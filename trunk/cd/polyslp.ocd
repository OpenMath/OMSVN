
<CD xmlns='http://www.openmath.org/OpenMathCD'>
  <CDName> polyslp </CDName> 
  <CDURL> http://www.openmath.org/cd/polyslp.ocd </CDURL>
  <CDReviewDate> 2003-04-01 </CDReviewDate>
  <CDDate> 2000-02-11 </CDDate>
  <CDStatus> experimental </CDStatus>
  <CDVersion> 2 </CDVersion>
 <CDRevision> 0 </CDRevision>

  <CDUses>
    <CDName>opnode</CDName>
    <CDName>relation1</CDName>
    <CDName>setname1</CDName>
    <CDName>poly</CDName>
  </CDUses>

  <Description>
    This CD contains operators to deal with polynomials and more precisely 
    polynomials held in Straight Line Program representation.
  </Description>

  <CDComment>
    Definition of data-structure constructors
  </CDComment>

  <CDDefinition>
     <Name> polynomial_SLP </Name>
     <Description>
       The constructor of Polynomials built with Straight Line Program
       representation. 
       The first argument is the polynomial ring containing the polynomial 
       built with poly_ring_SLP,
       The second argument is the program body built with ProgBody. 
     </Description>
    <Example>
    The polynomial x^2 + y^2,
    which may be represented as the Straight Line Program :

        line 1 : InputNode	x
        line 2 : InputNode	y
        line 3 : OperationNode 	times line 1, line 1
        line 4 : OperationNode 	times line 2, line 2
        line 5 : OperationNode 	plus line 3, line 4 >

    may be encoded as :


  <OMOBJ xmlns='http://www.openmath.org/OpenMath'>
    <OMA>
      <OMS cd="polyslp" name="polynomial_SLP"/>
      <OMA>
        <OMS cd="polyslp" name="poly_ringSLP"/>
        <OMS cd = "setname1" name = "Z"/>
        <OMV name="x" />
        <OMV name="y" />
      </OMA>
      <OMA>
        <OMS cd="polyslp" name="prog_body"/>
        <OMA>
          <OMS cd="polyslp" name="inp_node"/>
          <OMV name="x"/>
        </OMA>
        <OMA>
          <OMS cd="polyslp" name="inp_node"/>
          <OMV name="y"/>
        </OMA>
        <OMA>
          <OMS cd="polyslp" name="op_node"/>
	  <OMS cd="opnode" name="times"/>
          <OMI> 1 </OMI>
          <OMI> 1 </OMI>
        </OMA>
        <OMA>
          <OMS cd="polyslp" name="op_node"/>
	  <OMS cd="opnode" name="times"/>
          <OMI> 2 </OMI>
          <OMI> 2 </OMI>
        </OMA>
	<OMA>
	  <OMS cd="opnode" name="return"/>
          <OMA>
            <OMS cd="polyslp" name="op_node"/>
	    <OMS cd="opnode" name="plus"/>
            <OMI> 3 </OMI>
            <OMI> 4 </OMI>
	  </OMA>
        </OMA>
      </OMA>
    </OMA>
  </OMOBJ>
  </Example>
  </CDDefinition>

  <CDDefinition>
    <Name> prog_body </Name>
    <Description>
      the constructor of the body of the straight line program
      the arguments represent straight line instructions, as constructed by the
      following three constructors, op_node, inp_node and const_node. The order
      is taken to be the order in which they appear
    </Description>
  </CDDefinition>

  <CDDefinition>
    <Name> op_node </Name>
    <Description>
      This constructor takes three or four arguments.
      The first argument is a symbol from opnode, meant to specify
      whether the node is a plus, minus times or divide node, 
      the second and third arguments are integers, which are pointers
      to the lines which are the arguments of the operation
      The optional fourth argument is from opnode if it exists it must
      be return to specify that this is a return value of the straight
      line program.
    </Description>
  </CDDefinition>

  <CDDefinition>
    <Name> inp_node </Name>
    <Description>
      This constructor takes one argument, which is a variable the return value
      is intended to represent an input node.
      variables. 
    </Description>
  </CDDefinition>

  <CDDefinition>
    <Name> const_node </Name>
    <Description>
      This constructor takes one argument, which is a value of type PolyRingslp
      it is intended to represent a constant node
    </Description>
  </CDDefinition>

  <CDComment>
    Definition of some functions which are specific to slps
  </CDComment>

  <CDDefinition>
    <Name> length </Name>
    <Description>
      A unary function taking an slp as argument and returning the
      length of this slp.
    </Description>
  </CDDefinition>

  <CDDefinition>
    <Name> depth </Name>
    <Description>
      A unary function taking an slp as argument and returning the
      greatest depth of any leaf node, that is the greatest contiguous
      path to any leaf node.
    </Description>
  </CDDefinition>

  <CDDefinition>
    <Name> slp_degree </Name>
    <Description>
      A unary function taking an slp as argument and returning the
      apparent multiplicative degree of the slp, without performing
      any cancellation.
    </Description>

    <CMP> The slp_degree of the polynomial x > degree(x) </CMP>

    <FMP>
      <OMOBJ xmlns='http://www.openmath.org/OpenMath'>
        <OMA>
	  <OMS cd="relation1" name="gt"/>
	  <OMA>
	    <OMS cd="polyslp" name="slp_degree"/>
	    <OMV name="x"/>
	  </OMA>
	  <OMA>
	    <OMS cd="poly" name="degree"/>
	    <OMV name="x"/>
	  </OMA>
	</OMA>
      </OMOBJ>
    </FMP>

    <Example>
      slpDegree(convert(x^2)@poly_ring_SLP - convert(x^2)@poly_ring_SLP) = 2
      <OMOBJ xmlns='http://www.openmath.org/OpenMath'>
      <OMA>
        <OMS cd="relation1" name="eq"/>
	<OMA>
	  <OMS cd="polyslp" name="polynomial_SLP"/>
	  <OMA>
	    <OMS cd="polyslp" name="polyRing_SLP"/>
            <OMS name="Z" cd="setname1"/>
            <OMV name="x"/>
	  </OMA>
	  <OMA>
	    <OMS cd="polyslp" name="prog_body"/>
	    <OMA>
	      <OMS cd="polyslp" name="inp_node"/>
	      <OMV name="x"/>
	    </OMA>
	    <OMA>
	      <OMS cd="polyslp" name="op_node"/>
	      <OMS cd="opnode" name="times"/>
	      <OMI> 1 </OMI>
	      <OMI> 1 </OMI>
	    </OMA>      
	    <OMA>
	      <OMS cd="opnode" name="return"/>
	      <OMA>
	        <OMS cd="polyslp" name="op_node"/>
		<OMS cd="opnode" name="minus"/>
		<OMI> 2 </OMI>
		<OMI> 2 </OMI>
	      </OMA>	
	    </OMA>
	  </OMA>
	</OMA>
	<OMI> 2 </OMI>
      </OMA>
      </OMOBJ>
    </Example>
  </CDDefinition>

  <CDDefinition>
    <Name> return_node </Name>
    <Description>
      Takes an slp as the argument
      returns the return node of the slp.
    </Description>
  </CDDefinition>

  <CDDefinition>
    <Name> node_selector </Name>
    <Description>
      Takes an slp as the first argument, the second argument is the
      position of the required node. Returns the node of the slp at
      this position.
    </Description>
  </CDDefinition>

  <CDDefinition>
    <Name> left_ref </Name>
    <Description>
      Takes as argument a node of an slp.
      returns the value of the left hand pointer of the node.
    </Description>
  </CDDefinition>

  <CDDefinition>
    <Name> right_ref </Name>
    <Description>
      Takes as argument a node of an slp.
      returns the value of the right hand pointer of the node.
    </Description>
  </CDDefinition>

  <CDComment>
    Definition of some functions which are very useful for slps
  </CDComment>

  <CDDefinition>
    <Name> quotient </Name>
    <Description>
      A quotient function for polynomials represented by slps. It is a
      requirement that this is an exact division.
    </Description>
  </CDDefinition>

  <CDDefinition>
    <Name> monte_carlo_eq </Name>
    <Description>
      This is a Monte-Carlo equality test,
      it takes three arguments, the first two are slps representing
      polynomials, the third argument is the maximum probability of
      incorrectness that is required of the equality test.
      (Monte-Carlo equality tests are very important for slps as they
      offer the only tractable method of solving the equality problem
      in many cases)
    </Description>
  </CDDefinition>

  <CDDefinition>
    <Name> poly_ring_SLP </Name>
    <Description>
      The constructor of the polynomial ring. The first argument is a ring, 
      (the ring of the coefficients), the rest are the variables, in any order
    </Description>
       <Example>

An example to represent a polynomial ring over the integers, with the
two variables x,y. viz. Z[x,y]

         <OMOBJ xmlns='http://www.openmath.org/OpenMath'>
           <OMA>
             <OMS name="poly_ring_SLP" cd="polyslp"/>
             <OMS name="Z" cd="setname1"/>
             <OMV name="x"/>
             <OMV name="y"/>
           </OMA>
         </OMOBJ>
       </Example>
  </CDDefinition>

</CD>