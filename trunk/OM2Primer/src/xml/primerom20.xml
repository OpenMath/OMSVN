<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE book PUBLIC  "-//OASIS//DTD DocBook MathML Module V1.0//EN" "../dtd/dbmathml.dtd"
[
<!--  Abbreviations used in this document -->
<!ENTITY OM "<emphasis>OpenMath</emphasis>">
<!ENTITY MML "<emphasis>MathML</emphasis>">
<!ENTITY exml "<acronym>xml</acronym>">
<!ENTITY zsp "">
]>

<!-- @version CVS $Id: primerom20.xml,v 1.5 2003/11/25 13:12:48 openmath Exp $ -->


<book>
  <title>The &OM; 2 Primer</title>
  <bookinfo>
    <releaseinfo>1.0</releaseinfo>
    <author>
      <firstname>The &OM; Society</firstname>
    </author>
    <editor>
      <firstname>S.</firstname>
      <surname>Buswell</surname>
    </editor>
    <editor>
      <firstname>O.</firstname>
      <surname>Caprotti</surname>
    </editor>
    <editor>
      <firstname>D.</firstname>
      <othername>P.</othername>
      <surname>Carlisle</surname>
    </editor>
    <editor>
      <firstname>M.</firstname>
      <othername>C.</othername>
      <surname>Dewar</surname>
    </editor>
    <editor>
      <firstname>M.</firstname>
      <surname>Kohlhase</surname>
    </editor>
    <date>October 2003</date>
    <copyright>
      <year>2003&#8211;</year>
      <holder>The OpenMath Society</holder>
    </copyright>
    <abstract>
      <para>This primer is intended as a general introduction to version 2
of the &OM; Standard for developers and users. ...   </para>
    </abstract>
  </bookinfo>
  <toc/>
    <lot>
      <title>List of Figures</title>
    </lot>
    <chapter id="intro">
      <title>Introduction</title> <para>&OM; is a standard for
      representing mathematical objects, allowing them to be exchanged
      between computer programs, stored in databases, or published on
      the worldwide web.  The original designers were mainly
      developers of computer algebra systems interested in a mechanism
      that would allow using third party computational software on
      their mathematical objects. The world wide web development
      opened the way for a much broader usage of a portable
      representation of mathematics. &OM; has a close relationship
      with &MML;, the W3C recommendation for web mathematics,
      described further in <xref linkend="mml"/>.
 </para>
      <para>A novice user of &OM; most likely has come across an
      <emphasis>encoding</emphasis> of an &OM;
      <emphasis>object</emphasis> or of a <emphasis>Content
      Dictionary</emphasis>. To understand the encoding however, one
      must be aware of the abstract information model underlying &OM;
      objects and Content Dictionaries. </para>
      <figure id="fig_om">
        <title>The &OM; Information Model</title> <graphic depth="500"
        fileref="om-info" format="SVG" width="700"/>
      </figure>
    </chapter>
    <chapter id="infomodel">
      <title>&OM; Information Model</title> <para>Abstract model of
      &OM; objects and Content Dictionaries.</para>

      <section id="sec_omabs">
        <title>&OM; Objects Information Model</title> 

      <para>The &OM; abtract object model represents mathematical
        objects as terms or as labelled trees. There are three kinds
        of &OM; objects: basic, compound and derived objects.</para>
        
      <section id="sec_basic">
	<title>Basic &OM; objects</title> 

	<para>The basic &OM; objects form the leaves of the &OM;
	Object tree and model entities which are used naturally in
	mathematics. Table <xref linkend="table_tbo"/> summarizes
	them.</para>
        
	<figure id="table_tbo">
            <title>Basic Objects</title>
            <informaltable frame="all">
              <tgroup cols="2">
                <tbody>
                  <row>
                    <entry>
                      <emphasis>Integers</emphasis>
                    </entry>
                    <entry>Arbitrary precision integers</entry>
                  </row>
                  <row>
                    <entry>
                      <emphasis>Floating Point Numbers</emphasis>
                    </entry>
                    <entry>IEEE 754 double-precision floating point numbers</entry>
                  </row>
                  <row>
                    <entry>
                      <emphasis>Character Strings</emphasis>
                    </entry>
                    <entry>Unicode character sequences</entry>
                  </row>
                  <row>
                    <entry>
                      <emphasis>Bytearrays</emphasis>
                    </entry>
                    <entry>Sequences of bytes</entry>
                  </row>
                  <row>
                    <entry>
                      <emphasis>Symbols</emphasis>
                    </entry>
                    <entry>Function symbols, connectives, quantifiers, error messages, attribute keys</entry>
                  </row>
                  <row>
                    <entry>
                      <emphasis>Variables</emphasis>
                    </entry>
                    <entry>Parameters, indeterminates, indexed variables</entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
          </figure>
        
	<para>&OM; floats are <acronym>IEEE</acronym> 754 Double
	  precision floating-point numbers. Other types of floating
	  point number, for instance <quote>bigfloats</quote> in a
	  mantissa/ radix/exponent format or with precision in a
	  different radix, may be encoded in &OM; as
	  <emphasis>application</emphasis> objects by the use of
	  suitable Content Dictionaries (see <ulink
	  url="#sec_compound">below</ulink>).</para> <para>Bytearrays
	  are uninterpreted sequences of bytes with no intrinsic
	  meaning, unlike for instance strings where bytes are
	  interpred as characters.  A single byte can be represented
	  by a bytearray of length 1.  Bytearrays could be used, for
	  instance, inside &OM; errors to provide information to a
	  debugger; could contain intermediate results of
	  calculations, or <quote>handles</quote> into computations or
	  databases.</para> <para>A Symbol has three fields of
	  information, a <emphasis>symbol name</emphasis>, a
	  <emphasis>Content Dictionary name</emphasis>, and
	  (optionally) a <emphasis>role</emphasis>.The <ulink
	  url="#cdinfo">Content Dictionary</ulink> is the source of
	  the definition of the symbol, Names of symbols and CDs match
	  regular expressions described in the &OM; standard.  The
	  role further modifies the semantics of a symbol in context
	  within an &OM; object.  The possible roles are described in
	  the &OM; standard.</para> <para>A Variable has a
	  <emphasis>name</emphasis> matching a regular expression, as
	  described in the &OM; standard. A variable representing a
	  member of an enumerated set also has an information item
	  which is an &OM; object representing its indices.</para>
        </section>

        <section id="sec_compound">
          <title>Compound &OM; Objects</title> 

	<para>Compound &OM; objects are built out of basic, compound
          and derived &OM; objects using the constructs:
          <emphasis>application</emphasis>,
          <emphasis>binding</emphasis>,
          <emphasis>attribution</emphasis> and
          <emphasis>error</emphasis>.
	  </para>
          <blockquote>
            <informaltable>
              <tgroup cols="2">
                <tbody>
                  <row>
                    <entry>
                      <emphasis>application</emphasis>
                    </entry>
                    <entry>functional application</entry>
                  </row>
                  <row>
                    <entry>
                      <emphasis>binding</emphasis>
                    </entry>
                    <entry>function construction and quantification of logical statements</entry>
                  </row>
                  <row>
                    <entry>
                      <emphasis>attribution</emphasis>
                    </entry>
                    <entry>annotation or modification by key-value pairs</entry>
                  </row>
                  <row>
                    <entry>
                      <emphasis>error</emphasis>
                    </entry>
                    <entry>debugging information</entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
          </blockquote>

          <variablelist>
            <varlistentry>
              <term>Application</term>
              <listitem>
                <para>An &OM; application can be used to convey the
		mathematical notion of application of a function to a
		set of arguments.  It constructs an &OM; object from a
		sequence of one or more &OM; objects. For instance it
		can be used to represent notion of
		<equation><mml:math><mml:mi>sin</mml:mi><mml:mo>(</mml:mo><mml:mi>x</mml:mi><mml:mo>)</mml:mo></mml:math></equation>. It
		can also represent the notion of a rational number or
		a polynomial constructed from a set of monomials. The
		rational number, usually denoted as<equation><mml:math
		display="inline"><mml:mn>1</mml:mn><mml:mo>/</mml:mo><mml:mn>2</mml:mn></mml:math></equation>
		is represented by the &OM; application object
		<equation><mml:math><mml:mi
		mathvariant="bold">application</mml:mi><mml:mo>(</mml:mo><mml:mi>Rational</mml:mi><mml:mo>,</mml:mo><mml:mn>1</mml:mn><mml:mo>,</mml:mo><mml:mn>2</mml:mn><mml:mo>)</mml:mo></mml:math></equation>. The
		symbol
		<equation><mml:math><mml:mi>Rational</mml:mi></mml:math></equation>
		used here stands for a triple consisting of the symbol
		name, the Content Dictionary name in which it is
		defined to construct rationals, and the role.</para>
                <figure id="fig_sin">
                  <title>The &OM; binding objects in tree-like
		  notation.</title>
                  <graphic depth="190" fileref="sinx" width="600"/>
                </figure>
                <important>
                  <para>put picture here for rational(1,2)</para>
                </important>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>Binding</term>
              <listitem>
                <para>Binding can be used to express functions
	    or quantified logical statements. A binding object is
	    constructed from an &OM; object, the
	    <quote>binder</quote>, and a sequence of zero or more
	    variables to be bound, followed by another &OM; object,
	    the <quote>body</quote>.  It is allowed to have no bound
	    variables, but the binder object and the body should be
	    present.  </para>
                <figure id="fig_lam">
                  <title>The &OM; binding objects in tree-like notation.</title>
                  <graphic depth="190" fileref="lambda-alone" width="600"/>
                </figure>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>Attribution</term>
              <listitem>
                <para>decorates an object with a sequence of one or
  more pairs made up of an &OM; symbol, the <quote>attribute</quote>,
  and an associated object, the <quote>value of the attribute</quote>.
  The value of the attribute can be an &OM; attribution object
  itself. As an example of this, consider the &OM; objects
  representing groups, automorphism groups, and group dimensions. It
  is then possible to attribute an &OM; object representing a group by
  its automorphism group, itself attributed by its dimension.</para>
  <para>&OM; objects can be attributed with &OM; derived objects,
  which are containers for non-&OM; structures.  For example a
  mathematical expression could be attributed with its spoken or
  visual rendering.
</para>
                <para>Multiple attributes with the same name are
  allowed.  While the order of the given attributes does not imply any
  notion of priority, potentially it could be significant.  &OM;
  however does not mandate that an application preserves the
  attributes or their order.</para> <para>Attribution acts as either
  adornment annotation or as semantical annotation. When the key has
  rÃ´le <emphasis> attribution</emphasis>, then replacement of the
  attributed object by the object itself is not harmful and preserves
  the semantics. When the key has rÃ´le
  <emphasis>semantic-attribution</emphasis> then the attributed object
  is modified by the attribution and cannot be viewed as semantically
  equivalent to the stripped object. If the attribute lacks the rÃ´le
  specification then attribution is acting as adornment annotation.
  </para>
	      <para>The object <equation><mml:math><mml:mi
mathvariant="bold">attribution</mml:mi><mml:mo>(</mml:mo><mml:mi>A</mml:mi><mml:mo>,</mml:mo><mml:mi>type</mml:mi><mml:mspace
width=".3em"/><mml:mi>t</mml:mi><mml:mo>)</mml:mo></mml:math></equation>
represents the judgment stating that object
<equation><mml:math><mml:mi>A</mml:mi></mml:math></equation> has type
<equation><mml:math><mml:mi>t</mml:mi></mml:math></equation>. The
attribution can be enforced as semantical annotation by fixing the
rôle of symbol
<equation><mml:math><mml:mi>t</mml:mi></mml:math></equation>.</para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>Error</term>
              <listitem>
                <para>This object has no direct mathematical meaning.
		Errors occur as the result of processing an &OM;
		object and may occur inside other objects and also
		inside other errors. An error is made up of an &OM;
		symbol and a sequence of zero or more &OM; objects.
		Error objects might consist only of a symbol as in the
		object: <inlineequation><mml:math><mml:mi
		mathvariant="bold">error</mml:mi><mml:mo>(</mml:mo><mml:mi>S</mml:mi><mml:mo>)</mml:mo></mml:math></inlineequation>. Note
		that the rôle of the symbol
		<inlineequation><mml:math><mml:mi>S</mml:mi></mml:math></inlineequation>
		restricts its usage to <emphasis>error</emphasis>
		constructs.</para>
              </listitem>
            </varlistentry>
          </variablelist>
        </section>

        <section id="sec_derived">
          <title>Derived &OM; Objects</title> 

	<para>A derived &OM; object is built using data extraneous to
          &OM; and the construct <emphasis>foreign</emphasis>.</para>
          <blockquote>
            <informaltable>
              <tgroup cols="2">
                <tbody>
                  <row>
                    <entry>
                      <emphasis>foreign</emphasis>
                    </entry>
                    <entry>wrapper for non-&OM; content</entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>
          </blockquote>
        </section>
      </section>

      <section id="cdinfo">
        <title>CD Information Model</title> 

      <para>CD Metadata</para> 

      <para>CD Symbol Definitions</para>
      
  <section id="sec_roles">
	<title>&OM; Symbol Roles</title> 

	<para>The <emphasis>rôle</emphasis> of an &OM; symbol is a
          restriction on where it can appear in an &OM; object.  A
          symbol cannot have more than one rôle.  If no rôle is
          indicated then the symbol can be used anywhere.  Possible
          rôles are: <orderedlist
          numeration="lowerroman"><listitem><para><emphasis>binder</emphasis>
          The symbol may only appear as the first child of an &OM;
          binding object.
          </para></listitem><listitem><para><emphasis>attribution</emphasis>
          The symbol may only be used as key in an &OM; attribution
          object, i.e. as the first element of a key-value pair, or in
          an equivalent context (for example to refer to the value of
          an attribution).  This form of attribution may be ignored by
          an application, so should be used for information which does
          not change the meaning of the attributed &OM; object.
          </para></listitem><listitem><para><emphasis>semantic-attribution</emphasis>
          This is the same as <emphasis>attribution</emphasis> except
          that it modifies the meaning of the attributed &OM; object
          and thus cannot be ignored by an application.
          </para></listitem><listitem><para><emphasis>error</emphasis>
          The symbol can only appear as the first child of an &OM;
          error object.
          </para></listitem><listitem><para><emphasis>default</emphasis>
          The symbol can appear anywhere not defined in the previous
          four cases.  </para></listitem></orderedlist></para>
        </section>
      </section>
    </chapter>

    <chapter id="encodings">
      <title>&OM; Encodings</title> 
    
    <para>&OM; abstract objects are represented via an encoding. The
      standard defines an &exml; encoding and a binary encoding. This
      chapter shows examples of each.</para>
      
    <section id="omobjenco">
        <title>Encodings of &OM; Objects</title>
    
    <section id="xml">
          <title>XML Encoding</title> 

	<para>This encoding has been designed with the goals of
	  providing an encoding that:
	  <orderedlist><listitem><para>uses the most common character
	  set (so that it can be easily included in most documents and
	  transport protocols). In principle this format is both
	  readable and writable by a human however in general is
	  intended as a machine processable
	  format.</para></listitem><listitem><para>can be included
	  (embedded) in &exml; documents, see Section <xref
	  linkend="usingxml"/> for
	  details.</para></listitem></orderedlist></para> <para>This
	  encoding is defined by a Relax NG &exml; schema in the &OM;
	  standard. The default namespace for &OM; objects is
	  <quote>http://www.openmath.org/OpenMath</quote>.
      </para>
          <para>The root element for the encoded &OM; object is the
	  <systemitem>OMOBJ</systemitem> element.  This element can contain the
elements described in what follows.</para>
          <variablelist>
            <varlistentry>
              <term>Integers</term>
              <listitem>
                <para>are encoded using the
<systemitem>OMI</systemitem> element around the sequence of their
digits in base 10 or 16. Most significant digit go first.  Integers
written in base 16 match<screen>
<systemitem>-?x[0-9A-F]+</systemitem>.</screen>

The integer 10 can be thus encoded as 
<screen><systemitem>&lt;OMI> 10 &lt;/OMI></systemitem></screen> or as
<screen><systemitem>&lt;OMI> xA &lt;/OMI></systemitem></screen> but neither
<screen><systemitem>&lt;OMI> +10 &lt;/OMI></systemitem></screen> nor 
<screen><systemitem>&lt;OMI> +xA &lt;/OMI></systemitem></screen> can be used.</para>
	      
<para>The negative integer
<inlineequation><mml:math><mml:mn>-120</mml:mn></mml:math></inlineequation>
can be encoded as either as decimal <screen><systemitem>&lt;OMI> -120
&lt;/OMI></systemitem></screen> or as hexadecimal
<screen><systemitem>&lt;OMI> -x78
&lt;/OMI></systemitem></screen>.</para>
	    </listitem>
	  </varlistentry>
	  <varlistentry>
	    <term>Symbols</term>
	    <listitem>
	      <para>are encoded using the <systemitem>OMS</systemitem>
		element. This element has three &exml;-attributes
		<systemitem>cd</systemitem>,
		<systemitem>name</systemitem>, and
		<systemitem>uristub</systemitem>. The value of
		<systemitem>cd</systemitem> is the name of the Content
		Dictionary in which the symbol is defined and the
		value of <systemitem>name</systemitem> is the name of
		the symbol.  The optional
		<systemitem>uristub</systemitem> attribute is a URI
		that can be used to disambiguate between two content
		dictionaries with the same name.

  The name of the Content Dictionary is compulsory, but a future
  revision of the &OM; standard might introduce a defaulting
  mechanism.  For example, <screen><systemitem>&lt;OMS cd="transc"
  name="sin"/></systemitem></screen> is the encoding of the symbol
  named <systemitem>sin</systemitem> in the Content Dictionary named
  <systemitem>transc</systemitem>.</para> <para>The three attributes
  of the <systemitem>OMS</systemitem> are used in order to build a URI
  for the symbol, for use in contexts where URI-based referencing
  mechanisms are used. This canonical URI is constructed as
  follows:</para>
<screen>
<systemitem>URI = uristub-value + '/' + cd-value + '/' + name-value</systemitem> 
</screen>
	      
	      <example>
		<title/> 

		<screen><![CDATA[ 
<OMS name="plus" cd="arith1" uristub="http://www.openmath.org/CDs"/>
                    ]]></screen>
                           
                <para>gives the URI
		  <screen><systemitem>"http://www.openmath.org/CDs/arith1/plus"</systemitem>.</screen>
		  This allows us to refer uniquely to an openmath
		  symbol from a MathML document.</para></example>

	      <example>
		<title/>
		<screen>
		<literallayout>
		  &lt;mathml:csymbol xmlns:mathml="http://www.w3.org/TR/MathML2/" definitionURL="http://www.openmath.org/CDs/arith1/plus"&gt;Z&lt;/csymbol&gt;
		</literallayout>
	      </screen>
	      </example>
	    </listitem>
	  </varlistentry>
	  
	  <varlistentry>
	    <term>Variables</term>
	    <listitem>
	      <para>are encoded using the <systemitem>OMV</systemitem>
  element, with only one &exml;-attribute,
  <systemitem>name</systemitem>, whose value is the variable name.
  The variable name is a subset of the printable
  <acronym>ascii</acronym> set of characters.  In particular, neither
  spaces nor double-quote <systemitem>&quot;</systemitem> are allowed
  in variable names.  For instance, the encoding of the object
  representing the variable <inlineequation><mml:math
  ><mml:mi>x</mml:mi></mml:math></inlineequation> is:
  <screen><systemitem>&lt;OMV name="x"/></systemitem></screen></para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>Floating-point numbers</term>
              <listitem>
                <para>are encoded using the
  <systemitem>OMF</systemitem> element that has either the
  &exml;-attribute <systemitem>dec</systemitem> or the
  &exml;-attribute <systemitem>hex</systemitem>. The two
  &exml;-attributes cannot be present simultaneously. The value of
  <systemitem>dec</systemitem> is the floating-point number expressed
  in base 10, using the common syntax:</para>
	      <screen><systemitem>(-?)([0-9]+)?("."[0-9]+)?(e(-?)[0-9]+)?</systemitem>.</screen>

                <para>The value of <systemitem>hex</systemitem> is the
  digits of the floating-point number expressed in base 16, with
  digits <systemitem>0</systemitem>-<systemitem>9</systemitem>,
  <systemitem>A</systemitem>-<systemitem>F</systemitem> (mantissa,
  exponent, and sign from lowest to highest bits) using a least
  significant byte ordering.  For example, <screen><systemitem>&lt;OMF
  dec="1.0e-10"/></systemitem></screen> is a valid floating-point
  number.</para>
	    </listitem>
            </varlistentry>
            <varlistentry>
              <term>Character strings</term>
              <listitem>
                <para>are
  encoded using the <systemitem>OMSTR</systemitem> element.  Its
  content is a Unicode text (The default encoding is
  <acronym>utf-8</acronym><citation>utf8</citation>, although &exml;
  encoded &OM; may be embedded in a containing &exml; document that
  specifies alternative encoding in the &exml; declaration. Note that
  as always in &exml; the characters <systemitem>&lt;</systemitem> and
  <systemitem>&amp;</systemitem> need to be represented by the entity
  references <systemitem>&lt;</systemitem> and
  <systemitem>&amp;</systemitem> respectively.</para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>Bytearrays</term>
              <listitem>
                <para>are encoded using
  the <systemitem>OMB</systemitem> element. Its content is a sequence
  of characters that is a base64 encoding of the data.  The base64
  encoding is defined in <acronym>rfc</acronym> 1521
  <citation>rfc1521</citation>.  Basically, it represents an arbitrary
  sequence of octets using 64 <quote>digits</quote>
  (<systemitem>A</systemitem> through <systemitem>Z</systemitem>,
  <systemitem>a</systemitem> through <systemitem>z</systemitem>,
  <systemitem>0</systemitem> through <systemitem>9</systemitem>,
  <systemitem>+</systemitem> and /, in order of increasing
  value). Three octets are represented as four digits (the
  <systemitem>=</systemitem> character for padding to the right at the
  end of the data). All line breaks and carriage return, space, form
  feed and horizontal tabulation characters are ignored. The reader is
  refered to <citation>rfc1521</citation> for more detailed
  information.</para>
              </listitem>
            </varlistentry>
          </variablelist>
          <para>In detail the encoding of an &OM; object is described below.</para>
          <variablelist>
            <varlistentry>
              <term>Applications</term>
              <listitem>
                <para>are encoded using the
<systemitem>OMA</systemitem> element. The application whose root is
the &OM; object
<inlineequation><mml:math><mml:msub><mml:mi>e</mml:mi><mml:mn>0</mml:mn></mml:msub></mml:math></inlineequation>
and whose arguments are the &OM; objects
<inlineequation><mml:math><mml:msub><mml:mi>e</mml:mi><mml:mn>1</mml:mn></mml:msub></mml:math></inlineequation>,
<phrase>&#8230;</phrase>,
<inlineequation><mml:math><mml:msub><mml:mi>e</mml:mi><mml:mi>n</mml:mi></mml:msub></mml:math></inlineequation>
is encoded as
<systemitem>&lt;OMA></systemitem><inlineequation><mml:math><mml:msub><mml:mi>C</mml:mi><mml:mn>0</mml:mn></mml:msub></mml:math></inlineequation><inlineequation><mml:math><mml:msub><mml:mi>C</mml:mi><mml:mn>1</mml:mn></mml:msub></mml:math></inlineequation><phrase>&#8230;</phrase><inlineequation><mml:math><mml:msub><mml:mi>C</mml:mi><mml:mi>n</mml:mi></mml:msub></mml:math></inlineequation><systemitem>&lt;/OMA></systemitem>
where
<inlineequation><mml:math><mml:msub><mml:mi>C</mml:mi><mml:mi>i</mml:mi></mml:msub></mml:math></inlineequation>
is the encoding of
<inlineequation><mml:math><mml:msub><mml:mi>e</mml:mi><mml:mi>i</mml:mi></mml:msub></mml:math></inlineequation>.
</para>
                <para>For example, <inlineequation><mml:math><mml:mi mathvariant="bold">application</mml:mi><mml:mo>(</mml:mo><mml:mi>sin</mml:mi><mml:mo>,</mml:mo><mml:mi>x</mml:mi><mml:mo>)</mml:mo></mml:math></inlineequation> is encoded as:
		<screen><literallayout>
		  <![CDATA[<OMA><OMS cd="transc1" name="sin"/> <OMV name="x"/> </OMA> ]]>
		</literallayout> 
	      </screen>
		provided that the symbol <systemitem>sin</systemitem>
		is defined to be a function symbol in a Content
		Dictionary named
		<systemitem>transc1</systemitem>.</para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>Binding</term>
              <listitem>
                <para>is encoded using the
  <systemitem>OMBIND</systemitem> element.  The binding by the &OM;
  object <mml:math><mml:mi>b</mml:mi></mml:math> of the &OM; variables
  <mml:math><mml:msub><mml:mi>x</mml:mi><mml:mn>1</mml:mn></mml:msub></mml:math>,
  <mml:math><mml:msub><mml:mi>x</mml:mi><mml:mn>2</mml:mn></mml:msub></mml:math>,
  <mml:math><mml:mi>&#8230;</mml:mi></mml:math>,
  <mml:math><mml:msub><mml:mi>x</mml:mi><mml:mi>n</mml:mi></mml:msub></mml:math>
  in the object <mml:math><mml:mi>c</mml:mi></mml:math> is encoded as
  <systemitem>&lt;OMBIND></systemitem><mml:math><mml:mi>B</mml:mi></mml:math><systemitem>&lt;OMBVAR></systemitem><mml:math><mml:msub><mml:mi>X</mml:mi><mml:mn>1</mml:mn></mml:msub></mml:math><mml:math><mml:mi>&#8230;</mml:mi></mml:math><mml:math><mml:msub><mml:mi>X</mml:mi><mml:mi>n</mml:mi></mml:msub></mml:math><systemitem>&lt;/OMBVAR></systemitem><mml:math><mml:mi>C</mml:mi></mml:math><systemitem>&lt;/OMBIND></systemitem> where
  <mml:math><mml:mi>B</mml:mi></mml:math>,
  <mml:math><mml:mi>C</mml:mi></mml:math>, and
  <mml:math><mml:msub><mml:mi>X</mml:mi><mml:mi>i</mml:mi></mml:msub></mml:math>
  are the encodings of <mml:math><mml:mi>b</mml:mi></mml:math>,
  <mml:math><mml:mi>c</mml:mi></mml:math> and
  <mml:math><mml:msub><mml:mi>x</mml:mi><mml:mi>i</mml:mi></mml:msub></mml:math>,
  respectively.</para>
                <para>For instance the encoding of <inlineequation><mml:math><mml:mi mathvariant="bold">binding</mml:mi><mml:mo>(</mml:mo><mml:mi>lambda</mml:mi><mml:mo>,</mml:mo><mml:mi>x</mml:mi><mml:mo>,</mml:mo><mml:mi mathvariant="bold">application</mml:mi><mml:mo>(</mml:mo><mml:mi>sin</mml:mi><mml:mo>,</mml:mo><mml:mi>x</mml:mi><mml:mo>)</mml:mo><mml:mo>)</mml:mo></mml:math></inlineequation> is: <literallayout><![CDATA[
      <OMBIND>
        <OMS cd="fns1" name="lambda"/>  
        <OMBVAR>
          <OMV name="x"/>
        </OMBVAR>  
        <OMA>
          <OMS cd="transc1" name="sin"/> 
          <OMV name="x"/>  
        </OMA>
      </OMBIND>]]></literallayout></para>
                <para>Binders are defined in  Content Dictionaries, in particular,
  the symbol <systemitem>lambda</systemitem> is defined in the Content Dictionary
  <systemitem>fns1</systemitem> for functions over functions.</para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>Attributions</term>
              <listitem>
                <para>are encoded
  using the <systemitem>OMATTR</systemitem> element.  If the &OM;
  object
  <inlineequation><mml:math><mml:mi>e</mml:mi></mml:math></inlineequation>
  is attributed with (<inlineequation><mml:math><mml:msub><mml:mi>s</mml:mi><mml:mn>1</mml:mn></mml:msub></mml:math>,
  <mml:math><mml:msub><mml:mi>e</mml:mi><mml:mn>1</mml:mn></mml:msub></mml:math></inlineequation> ), <phrase>&#8230;</phrase>, (<inlineequation><mml:math><mml:msub><mml:mi>s</mml:mi><mml:mi>n</mml:mi></mml:msub></mml:math>,
  <mml:math><mml:msub><mml:mi>e</mml:mi><mml:mi>n</mml:mi></mml:msub></mml:math></inlineequation> ) pairs (where
  <inlineequation><mml:math><mml:msub><mml:mi>s</mml:mi><mml:mi>i</mml:mi></mml:msub></mml:math></inlineequation>
  are the attributes), it is encoded as
  <systemitem>&lt;OMATTR></systemitem><systemitem>&lt;OMATP></systemitem><inlineequation><mml:math><mml:msub><mml:mi>S</mml:mi><mml:mn>1</mml:mn></mml:msub></mml:math></inlineequation><inlineequation><mml:math><mml:msub><mml:mi>C</mml:mi><mml:mn>1</mml:mn></mml:msub></mml:math></inlineequation><phrase>&#8230;</phrase><inlineequation><mml:math><mml:msub><mml:mi>S</mml:mi><mml:mi>n</mml:mi></mml:msub></mml:math></inlineequation><inlineequation><mml:math><mml:msub><mml:mi>C</mml:mi><mml:mi>n</mml:mi></mml:msub></mml:math></inlineequation><systemitem>&lt;/OMATP></systemitem><inlineequation><mml:math><mml:mi>E</mml:mi></mml:math></inlineequation><systemitem>&lt;/OMATTR></systemitem> where
  <inlineequation><mml:math><mml:msub><mml:mi>S</mml:mi><mml:mi>i</mml:mi></mml:msub></mml:math></inlineequation>
  is the encoding of the symbol
  <inlineequation><mml:math><mml:msub><mml:mi>s</mml:mi><mml:mi>i</mml:mi></mml:msub></mml:math></inlineequation>,
  <inlineequation><mml:math><mml:msub><mml:mi>C</mml:mi><mml:mi>i</mml:mi></mml:msub></mml:math></inlineequation>
  of the object
  <inlineequation><mml:math><mml:msub><mml:mi>e</mml:mi><mml:mi>i</mml:mi></mml:msub></mml:math></inlineequation>
  and
  <inlineequation><mml:math><mml:mi>E</mml:mi></mml:math></inlineequation>
  is the encoding of
  <inlineequation><mml:math><mml:mi>e</mml:mi></mml:math></inlineequation>.</para>
                <para>Examples are the use of attribution to decorate a group by its
  automorphism group:
<literallayout><![CDATA[
          <OMATTR>    
             <OMATP>
                  <OMS cd="groups" name="automorphism_group" />  
                  [..group-encoding..] 
             </OMATP>  
             [..group-encoding..] 
          </OMATTR>]]></literallayout>
or to express the type of a variable:
<literallayout><![CDATA[ 
          <OMATTR>    
              <OMATP>
                   <OMS cd="ecc" name="type" /> 
                   <OMS cd="ecc" name="real" />
              </OMATP> 
              <OMV name="x" />
            </OMATTR>]]></literallayout></para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>Errors</term>
              <listitem>
                <para>are encoded using the
 <systemitem>OME</systemitem> element. The error whose symbol is
 <inlineequation><mml:math><mml:mi>s</mml:mi></mml:math></inlineequation>
 and whose arguments are the &OM; objects
 <inlineequation><mml:math><mml:msub><mml:mi>e</mml:mi><mml:mn>1</mml:mn></mml:msub></mml:math></inlineequation>,
 <phrase>&#8230;</phrase>,
 <inlineequation><mml:math><mml:msub><mml:mi>e</mml:mi><mml:mi>n</mml:mi></mml:msub></mml:math></inlineequation>
 is encoded as <systemitem>&lt;OME></systemitem><inlineequation><mml:math><mml:msub><mml:mi>C</mml:mi><mml:mi>s</mml:mi></mml:msub></mml:math></inlineequation><inlineequation><mml:math><mml:msub><mml:mi>C</mml:mi><mml:mn>1</mml:mn></mml:msub></mml:math></inlineequation><phrase>&#8230;</phrase><inlineequation><mml:math><mml:msub><mml:mi>C</mml:mi><mml:mi>n</mml:mi></mml:msub></mml:math></inlineequation><systemitem>&lt;/OME></systemitem> where
 <inlineequation><mml:math><mml:msub><mml:mi>C</mml:mi><mml:mi>s</mml:mi></mml:msub></mml:math></inlineequation>
 is the encoding of
 <inlineequation><mml:math><mml:mi>s</mml:mi></mml:math></inlineequation> and
 <inlineequation><mml:math><mml:msub><mml:mi>C</mml:mi><mml:mi>i</mml:mi></mml:msub></mml:math></inlineequation>
 the encoding of
 <inlineequation><mml:math><mml:msub><mml:mi>e</mml:mi><mml:mi>i</mml:mi></mml:msub></mml:math></inlineequation>.</para>
                <para>If an <systemitem>aritherror</systemitem> Content Dictionary
contained a
<inlineequation><mml:math><mml:mi>DivisionByZero</mml:mi></mml:math></inlineequation>
symbol, then the object <inlineequation><mml:math><mml:mi mathvariant="bold">error</mml:mi><mml:mo>(</mml:mo><mml:mi>DivisionByZero</mml:mi><mml:mo>,</mml:mo><mml:mi mathvariant="bold">application</mml:mi><mml:mo>(</mml:mo><mml:mi>divide</mml:mi><mml:mo>,</mml:mo><mml:mi>x</mml:mi><mml:mo>,</mml:mo><mml:mn>0</mml:mn><mml:mo>)</mml:mo><mml:mo>)</mml:mo></mml:math></inlineequation>
would be encoded as follows:

<literallayout><![CDATA[ 
            <OME>
            <OMS cd="aritherror" name="DivisionByZero"/>  
            <OMA>
                 <OMS cd="arith1" name="divide" />
                 <OMV name="x"/>  
                 <OMI> 0 </OMI>
            </OMA> 
            </OME>]]></literallayout></para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>References</term>
              <listitem>
                <para> &OM; integers, floating point numbers,
 character strings, byearrays, applications, binding, attributions can
 also be encoded as an empty <systemitem>OMR</systemitem> element with
 an <systemitem>xlink:href</systemitem> attribute whose value is the
 value of an id attribute of an &OM; object of that type. The &OM;
 element represented by this <systemitem>OMR</systemitem> element is a
 copy of the &OM; element pointed to in the
 <systemitem>xlink:xref</systemitem> attribute. Note that the
 representation of the <systemitem>OMR</systemitem> element is
 <emphasis>structurally equal</emphasis>, but not identical to the
 element it points to. </para> <para>For instance, the &OM; object

 <mml:math display="block"><mml:mrow><mml:mi mathvariant="bold">application</mml:mi><mml:mrow><mml:mo fence="true">(</mml:mo><mml:mrow><mml:mi>f</mml:mi><mml:mo separator="true">,</mml:mo><mml:mi mathvariant="bold">application</mml:mi><mml:mrow><mml:mo fence="true">(</mml:mo><mml:mrow><mml:mi>f</mml:mi><mml:mo separator="true">,</mml:mo><mml:mi mathvariant="bold">application</mml:mi><mml:mrow><mml:mo fence="true">(</mml:mo><mml:mrow><mml:mi>f</mml:mi><mml:mo separator="true">,</mml:mo><mml:mi>a</mml:mi><mml:mo separator="true">,</mml:mo><mml:mi>a</mml:mi></mml:mrow><mml:mo fence="true">)</mml:mo></mml:mrow><mml:mo separator="true">,</mml:mo><mml:mi mathvariant="bold">application</mml:mi><mml:mrow><mml:mo fence="true">(</mml:mo><mml:mrow><mml:mi>f</mml:mi><mml:mo separator="true">,</mml:mo><mml:mi>a</mml:mi><mml:mo separator="true">,</mml:mo><mml:mi>a</mml:mi></mml:mrow><mml:mo fence="true">)</mml:mo></mml:mrow><mml:mo fence="true">)</mml:mo></mml:mrow><mml:mo separator="true">,</mml:mo><mml:mi mathvariant="bold">application</mml:mi><mml:mrow><mml:mo fence="true">(</mml:mo><mml:mrow><mml:mi>f</mml:mi><mml:mo separator="true">,</mml:mo><mml:mi mathvariant="bold">application</mml:mi><mml:mrow><mml:mo fence="true">(</mml:mo><mml:mrow><mml:mi>f</mml:mi><mml:mo separator="true">,</mml:mo><mml:mi>a</mml:mi><mml:mo separator="true">,</mml:mo><mml:mi>a</mml:mi></mml:mrow><mml:mo fence="true">)</mml:mo></mml:mrow><mml:mo separator="true">,</mml:mo><mml:mi mathvariant="bold">application</mml:mi><mml:mrow><mml:mo fence="true">(</mml:mo><mml:mrow><mml:mi>f</mml:mi><mml:mo separator="true">,</mml:mo><mml:mi>a</mml:mi><mml:mo separator="true">,</mml:mo><mml:mi>a</mml:mi></mml:mrow><mml:mo fence="true">)</mml:mo></mml:mrow><mml:mo fence="true">)</mml:mo></mml:mrow></mml:mrow><mml:mo fence="true">)</mml:mo></mml:mrow></mml:mrow></mml:mrow></mml:mrow></mml:math></para>
                
<para>can be encoded in the &exml; encoding as either one of the
&exml; encodings below (and some intermedidate versions as
well).</para>
                <figure id="fig_shared_vs_unshared">
                  <title>Shared vs. unshared representations</title>
                  <literallayout><![CDATA[
 <OMOBJ>                                <OMOBJ>
  <OMA>                                   <OMA>
    <OMA>                                    <OMA id="t1">
      <OMV name="f"/>                           <OMV name="f"/>
      <OMA>                                     <OMA id="t11">
        <OMV name="f"/>                            <OMV name="f"/>
        <OMV name="a"/>                            <OMV name="a"/>
        <OMV name="a"/>                            <OMV name="a"/>
      </OMA>                                    </OMA>
      <OMA>                                     <OMR xlink:href="t11"/>
        <OMV name="f"/>
        <OMV name="a"/> 
        <OMV name="a"/>
      </OMA>                                   </OMA>
      <OMA>                                     <OMR xlink:href="t1"/>
        <OMV name="f"/>
        <OMA>
          <OMV name="f"/>
          <OMV name="a"/>
          <OMV name="a"/>
        </OMA>
        <OMA>
          <OMV name="f"/>
          <OMV name="a"/>
          <OMV name="a"/>
        </OMA>
      </OMA>
     </OMA>
   </OMA>
 </OMOBJ>                                 </OMOBJ>]]></literallayout>
                </figure>

                <para> Using references that capture variables in this
 way can easily lead to representation errors, and is not recommended.
	      </para>
              </listitem>
            </varlistentry>
          </variablelist>
        </section>
 
       <section id="bin">
          <title>Binary Encoding</title>

          <para>How the binary encoding is structured and used</para>
        </section>

        <section id="other">
          <title>Other Encoding</title>
          <para>How it is possible to devise other encodings</para>
        </section>
      </section>

      <section id="cdenco">
        <title>Encodings of Content Dictionaries</title>

        <section id="cdxml">
          <title>Classic &exml; encoding</title>
          <para></para>
        </section>

        <section id="cdrdf">
          <title>RDF encoding</title>
          <para></para>
        </section>

        <section id="cdother">
          <title>Other encodings</title>
          <para></para>
        </section>
      </section>
    </chapter>

    <chapter id="appl">
      <title>&OM; aware applications and compliance</title>

      <section id="usingxml">
        <title>Using the XML Encoding of &OM;</title>

        <para>examples from MONET, OMDOC</para>
        <para>how to use CDs</para>
      </section>

      <section id="usingbin">
        <title>Using the Binary Encoding of &OM;</title>
        <para>Effectiveness of the binary encoding</para>
      </section>
    </chapter>

    <chapter id="rel">
      <title>Relationships with XML technologies</title>
      <section id="mml">
        <title>Mathematical Markup Language (&MML;)</title>
        <para>There is a strong relationship to the MathML recommendation
    <citation>MathML_98</citation> from the Worldwide Web Consortium,
    and a large overlap between the two developer communities.  MathML
    deals principally with the <emphasis>presentation</emphasis> of
    mathematical objects, while &OM; is solely concerned with their
    semantic meaning or <emphasis>content</emphasis>.  While MathML
    does have some limited facilities for dealing with content, it
    also allows semantic information encoded in &OM; to be embedded
    inside a MathML structure.  Thus the two technologies may be seen
    as highly complementary.</para>

        <section>
          <title>&MML; Content and &OM;</title>
          <para>how to give a &MML; semantics of an &OM; symbol</para>
          <para>
            <systemitem>csymbol</systemitem> usage guidelines</para>
          <para>how to convert, equivalence</para>
        </section>
        <section id="mmlp">
          <title>&MML; Presentation of &OM;</title>
          <para>&MML; Presentation is the recommended technology for
	rendering &OM; on computer screens. There are several
	possibilities for associating presentation &MML; to
	&OM;.</para>
        </section>
      </section>
    </chapter>

    <chapter>
      <title>More on CDs</title>
      <section>
        <title>Special CDs</title>
        <para>Meta CD</para>
        <para>STS CD</para>
        <para>Set1 CD</para>
      </section>
    </chapter>

    <appendix id="terms">
      <title>Terminology</title>
      <para>Important words</para>
    </appendix>
    <appendix id="resources">
      <title>Resources</title>
      <para>Commented list of references to &OM; resources.</para>
    </appendix>

</book>



