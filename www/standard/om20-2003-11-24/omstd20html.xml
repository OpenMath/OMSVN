<?xml version="1.0" encoding="iso-8859-1"?><?xml-stylesheet  type="text/xsl" href="pmathml.xsl"?><html xmlns="http://www.w3.org/1999/xhtml" xmlns:m="http://www.w3.org/1998/Math/MathML" xml:space="preserve">
<head>
<title>The OpenMath Standard</title>

<style>
p {text-align:justify;	   
  }
code {font-size: 125%;
      font-family: monospace; 
     }
.figure {
border-width:1px;
border-color: black;
}
.footnote{
font-size: 75%;
font-style: italic;
}
.delliteral {
font-size: 75%;
background-color: #cfcfcf;
border-color: black;
border-style: solid;
border-width: 1px;
padding: 1em;
color: red;
text-decoration: line-through;
}
.newliteral {
font-size: 75%;
background-color: #cfcfcf;
border-color: black;
border-style: solid;
border-width: 1px;
padding: 1em;
color: green;
}
.literal {
font-size: 75%;
background-color: #cfcfcf;
border-color: black;
border-style: solid;
border-width: 1px;
padding: 1em;
}
.del {
color: red;
text-decoration: line-through;
}
.new {
color: green;
}
.chg {
color: blue;
}
.changetoc {
border-style: solid;
border-color: black;
border-width: 1px;
margin: 2em 2em 2em 2em;
background-color: yellow;
}

.lowerroman {
list-style-type: lower-roman;
}
</style>
</head>
<body>
<h1>The <i>OpenMath</i> Standard</h1>
<div>
Version: 2.0 Public Draft 4 (21 November 2003)
</div>

<div>
The OpenMath Society
</div>

<div>Editors<br/>
S. Buswell, O. Caprotti, D. P. Carlisle, M. C. Dewar, M. Gaetano, M. Kohlhase
</div>

<div>
November 2003
</div>

<div>
<h3>Abstract</h3>
<p>This document proposes <i>OpenMath</i> as a standard for the communication of
  semantically rich mathematical objects. This draft of the <i>OpenMath</i> 
  standard comprises the following: a description of <i>OpenMath</i> objects, the
  grammar of <span>xml</span> and of the binary encoding of objects, a
  description of Content Dictionaries and an <span>xml</span> document type
  definition for validating Content Dictionaries. The non-normative
  <a href="#cha_his">Chapter 1</a> of this document briefly overviews the history
  of <i>OpenMath</i>.</p>
</div>






  
<h2>Contents</h2><a href="#cha_his">1 <i>OpenMath</i> Movement</a><br/>
    <a href="#sec_hist">1.1 History</a><br/>
    <a href="#sec_omsoc">1.2 <i>OpenMath</i> Society</a><br/><a href="#cha_int">2 Introduction to <i>OpenMath</i></a><br/>
    <a href="#sec_om-arch">2.1 <i>OpenMath</i> Architecture</a><br/>
    <a href="#sec_intro-obj">2.2 <i>OpenMath</i> Objects and Encodings</a><br/>
    <a href="#sec_intro-cd">2.3 Content Dictionaries</a><br/>
    <a href="#sec_addnfiles">2.4 Additional Files</a><br/>
    <a href="#sec_phrasebooks">2.5 Phrasebooks</a><br/><a href="#cha_obj">3 <i>OpenMath</i> Objects</a><br/>
    <a href="#sec_omabs">3.1 Formal Definition of <i>OpenMath</i> Objects</a><br/>
        <a href="#sec_basic">3.1.1 Basic <i>OpenMath</i> objects</a><br/>
        <a href="#sec_derived">3.1.2 Derived <i>OpenMath</i> Objects</a><br/>
        <a href="#sec_compound">3.1.3 Compound <i>OpenMath</i> Objects</a><br/>
        <a href="#sec_roles">3.1.4 <i>OpenMath</i> Symbol Rôles</a><br/>
    <a href="#sec_omin">3.2 Further Description of <i>OpenMath</i> Objects</a><br/>
    <a href="#sec_names">3.3 Names</a><br/>
    <a href="#sec_summary">3.4 Summary</a><br/><a href="#cha_enco">4 <i>OpenMath</i> Encodings</a><br/>
    <a href="#sec_xml">4.1 The <span>xml</span> Encoding</a><br/>
        <a href="#ssec_xml">4.1.1 A <span>Schema</span> for the <span>xml</span> Encoding</a><br/>
        <a href="#sec_xml-desc">4.1.2 <span>Informal</span> description of
the <span><span>xml</span> Encoding</span></a><br/>
            <a href="#sec_acyclicity">4.1.2.1 An Acyclicity Constraint</a><br/>
            <a href="#sec_sharing_bvars">4.1.2.2 Sharing and Bound Variables</a><br/>
        <a href="#xmldoc">4.1.3 Embedding <i>OpenMath</i> in <span>xml</span> Documents</a><br/>
    <a href="#sec_binary">4.2 The Binary Encoding</a><br/>
        <a href="#sec_binary_grammar">4.2.1 A Grammar for the Binary Encoding</a><br/>
        <a href="#sec_bin-desc">4.2.2 Description of the Grammar</a><br/>
            <a href="#sec_sharing">4.2.2.1 Sharing <span>in Objects beginning with the identifier [24]</span></a><br/>
        <a href="#sec_sharing_references">4.2.3 Sharing with References (beginning with [24+64])</a><br/>
        <a href="#sec_impl_note">4.2.4 Implementation Note</a><br/>
        <a href="#sec_bin_example">4.2.5 Example of Binary Encoding</a><br/>
        <a href="#sec_relation_OM1_binary">4.2.6 Relation to the <i>OpenMath</i>1 binary encoding</a><br/>
    <a href="#sec_enc_summary">4.3 Summary</a><br/><a href="#cha_cd">5 Content Dictionaries</a><br/>
    <a href="#sec_cd_summary">5.1 Introduction</a><br/>
    <a href="#sect_func">5.2 Abstract Content Dictionaries</a><br/>
        <a href="#sec_status">5.2.1 Content Dictionary Status</a><br/>
        <a href="#sec_version">5.2.2 Content Dictionary Version Numbers</a><br/>
    <a href="#sec_xml_cd">5.3 The <span>Reference</span> Encoding for Content Dictionaries</a><br/>
        <a href="#sec_cd_schema">5.3.1 The RelaxNG Schema for Content Dictionaries</a><br/>
        <a href="#sect_pcdata">5.3.2 Further <span>Description of
the CD Schema</span></a><br/>
    <a href="#addfiles">5.4 Additional Information</a><br/>
        <a href="#sigfiles">5.4.1 Signature
<span>Dictionaries</span>
</a><br/>
            <a href="#sect_sigpcdata">5.4.1.1 
<span>
Abstract Specification</span>
 of a Signature File</a><br/>
            <a href="#sect_sigschema">5.4.1.2 A RelaxNG Schema for a Signature File</a><br/>
            <a href="#sect_sigex">5.4.1.3 Examples</a><br/>
        <a href="#ssec_cdgroups">5.4.2 CDGroups</a><br/>
            <a href="#sec_dtd_cdg">5.4.2.1 The Specification of CDGroups</a><br/>
            <a href="#sect_cdgpcdata">5.4.2.2 Further Requirements of a CDGroup</a><br/>
    <a href="#cdapprove">5.5 Content Dictionaries Reviewing Process</a><br/><a href="#cha_comp">6 <i>OpenMath</i> Compliance</a><br/>
    <a href="#sec_compl_encoding">6.1 Encoding</a><br/>
    <a href="#sec_compl_cd">6.2 Content Dictionaries</a><br/>
    <a href="#sec_comp_lex">6.3 Lexical Errors</a><br/><a href="#cha_conc">7 Conclusion</a><br/><a href="#app_cdfiles">A CD Files</a><br/>
    <a href="#app_cdcd">A.1 The <b>meta</b> Content Dictionary</a><br/>
    <a href="#arith1.ocd">A.2 The  <b>arith1</b> Content Dictionary File</a><br/>
    <a href="#arith1.sts">A.3 The  <b>arith1</b> STS Signature File</a><br/>
    <a href="#mathml.cdg">A.4 The  <b>MathML</b> CDGroup</a><br/>
    <a href="#errorcd">A.5 The <b>error</b> Content Dictionary</a><br/><a href="#app_openmath.rng">B <i>OpenMath</i> Schema in Relax NG XML Syntax (Normative)</a><br/><a href="#app_relaxrestricted">C Restricting the <i>OpenMath</i> Schema (Non-Normative)</a><br/><a href="#app_xsd">D <i>OpenMath</i> Schema in XSD Syntax (Non-Normative)</a><br/><a href="#app_dtd">E <i>OpenMath</i> DTD (Non-Normative)</a><br/><a href="#app_whats_new">F Changes between <i>OpenMath</i> 1.1 and <i>OpenMath</i> 2 (Non-Normative)</a><br/>
    <a href="#chgformal">F.1 Changes to the Formal Definition of Objects</a><br/>
    <a href="#chgenc">F.2 Changes to the encodings</a><br/>
    <a href="#chgcd">F.3 Changes to Content Dictionaries</a><br/><a href="#bibliography">G Bibliography</a><br/>
<h2>List of Figures</h2><a href="#fig_om">2.1 The <i>OpenMath</i> Architecture</a><br/><a href="#fig_obj">3.1 The <i>OpenMath</i> application and binding objects for
<m:math><m:mi>sin</m:mi> <m:mo>(</m:mo><m:mi>x</m:mi> <m:mo>)</m:mo></m:math>  and
<m:math><m:mi>&#955;</m:mi> <m:mi>x</m:mi><m:mo>.</m:mo><m:mi>x</m:mi> <m:mo>+</m:mo>
<m:mn>2</m:mn></m:math>  in tree-like notation.</a><br/><a href="#fig_shared_vs_unshared">4.1 Shared vs. unshared representations</a><br/><a href="#fig_bin-enc">4.2 Grammar of the binary encoding of <i>OpenMath</i> objects.</a><br/><a href="#fig_bin-enc2">4.3 A binary encoding of the <i>OpenMath</i> object from figure <a href="#fig_shared_vs_unshared">Figure 4.1</a>.</a><br/><a href="#fig_cdgroup.dtd">5.1 <span>Relax NG</span> Specification of CDGroups</a><br/>

<h2 name="cha_his" id="cha_his">
  Chapter 1<br/><i>OpenMath</i> Movement</h2>



<p>This chapter is a historical account of <i>OpenMath</i> and should be regarded
as non-normative.</p>

<p><i>OpenMath</i> is a standard for representing mathematical objects,
allowing them to be exchanged between computer programs, stored in
databases, or published on the worldwide web.  While the original
designers were mainly developers of computer algebra systems, it is
now attracting interest from other areas of scientific computation and
from many publishers of electronic documents with a significant
mathematical content.  There is a strong relationship to the MathML
recommendation <a href="#MathML_2000">[18]</a> from the Worldwide Web
Consortium, and a large overlap between the two developer communities.
MathML deals principally with the <i>presentation</i> of
mathematical objects, while <i>OpenMath</i> is solely concerned with their
semantic meaning or <i>content</i>.  While MathML does
have some limited facilities for dealing with content, it also allows
semantic information encoded in <i>OpenMath</i> to be embedded inside a MathML
structure.  Thus the two technologies may be seen as highly
complementary.</p>

<div><h3 name="sec_hist" id="sec_hist">1.1 History</h3>



<p><i>OpenMath</i> was originally developed through a series of workshops held
in Zurich (1993 and 1996), Oxford (1994), Amsterdam (1995), Copenhagen
(1995), Bath (1996), Dublin (1996), Nice (1997), Yorktown Heights
(1997), Berlin (1998), and Tallahassee (1998).  The participants in
these workshops formed a global <i>OpenMath</i> community which was coordinated
by a Steering Committee and operated through electronic mailing groups
and ad-hoc working parties.  This loose arrangement has been
formalised through the establishment of an <i>OpenMath</i> Society.  Up until the
end of 1996 much of the work of the community was funded through a
grant from the Human Capital and Mobility program of the European
Union, the contributions of several institutions and individuals.  A
document outlining the objectives and basic design of <i>OpenMath</i> was
produced (later published as
<a href="#Abbott_Leeuwen_Strotmann_98">[1]</a>).  By the end of 1996
a simplified specification had been agreed on and some prototype
implementations have come about
<a href="#Dalmas_Gaetano_Watt_97">[5]</a>.</p>


<p>In 1996 a group of European participants in <i>OpenMath</i> decided to bid
for funding under the European Union's Fourth Framework Programme for
strategic research in information technology.  This bid was successful
and the project started in late 1997.  The principal aims of the
project are to formalise <i>OpenMath</i> as a standard and to develop it
further through industrial applications; this document is a product of
that process and draws heavily on the previous work described earlier.
<i>OpenMath</i> participants from all over the world continue to meet
regularly and cooperate on areas of mutual interest, and
recent workshops in Tallahassee (November 1998) and Eindhoven (June
1999)  endorsed  drafts of this document as the current <i>OpenMath</i> standard.</p>




</div>

<div><h3 name="sec_omsoc" id="sec_omsoc">1.2 <i>OpenMath</i> Society</h3>



<p>In November 1998 the <i>OpenMath</i> Society has been established to coordinate
all <i>OpenMath</i> activities. The society is based in Helsinki, Finland and is
steered by the executive committee whose members are elected by the
society. The official web page of the society is
<a href="http://www.openmath.org">http://www.openmath.org</a>.</p>
</div>



<h2 name="cha_int" id="cha_int">
  Chapter 2<br/>Introduction to <i>OpenMath</i></h2>





<p>This chapter briefly introduces <i>OpenMath</i> concepts and notions that are
referred to in the rest of this document.</p>

<div><h3 name="sec_om-arch" id="sec_om-arch">2.1 <i>OpenMath</i> Architecture</h3>



<div class="figure"><a name="fig_om" id="fig_om"/>
    
    <img src="om-arch.png" alt="om-arch.png"/>
<div>
  Figure 2.1 The <i>OpenMath</i> Architecture</div></div>

<p>The architecture of <i>OpenMath</i> is described in <a href="#fig_om">Figure 2.1</a> and summarizes the interactions among the different
<i>OpenMath</i> components.  There are three layers of representation of a
mathematical object <a href="#OM_98">[12]</a>. A private layer that
is the internal representation used by an application.  An abstract
layer that is the representation as an <i>OpenMath</i> object. Third is a
communication layer that translates the <i>OpenMath</i> object representation to
a stream of bytes. An application dependent program manipulates the
mathematical objects using its internal representation, it can convert
them to <i>OpenMath</i> objects and communicate them by using the byte stream
representation of <i>OpenMath</i> objects.</p>
</div>

<div><h3 name="sec_intro-obj" id="sec_intro-obj">2.2 <i>OpenMath</i> Objects and Encodings</h3>






<p><i>OpenMath</i> objects are representations of mathematical entities that
can be communicated among various software applications in a
meaningful way, that is, preserving their
<span>"semantics"</span>.</p>

<p><i>OpenMath</i> objects and encodings are described in detail in <a href="#cha_obj">Chapter 3</a> and <a href="#cha_enco">Chapter 4</a>.</p>




<p>The standard endorses encodings in <span>xml</span> and binary
format. These are the encodings supported by the official <i>OpenMath</i>
libraries. However they are not the only possible encodings of <i>OpenMath</i>
objects. Users that wish to define their own encoding using some other
specific language (e.g.  Lisp) may do so provided there is an
effective translation of this encoding to an official one.</p>
</div>

<div><h3 name="sec_intro-cd" id="sec_intro-cd">2.3 Content Dictionaries</h3>



<p>Content Dictionaries (CDs) are used to assign informal and formal
semantics to all symbols used in the <i>OpenMath</i> objects. They define the
symbols used to represent concepts arising in a particular area of
mathematics.</p>

<p>The Content Dictionaries are public, they represent the actual
common knowledge among <i>OpenMath</i> applications.  Content Dictionaries fix
the <span>"meaning"</span> of objects independently of the
application.  The application receiving the object may then recognize
whether or not, according to the semantics of the symbols defined in
the Content Dictionaries, the object can be transformed to the
corresponding internal representation used by the application.</p>
</div>

<div><h3 name="sec_addnfiles" id="sec_addnfiles">2.4 Additional Files</h3>
  <p>Several
additional files are related to Content Dictionaries.  Signature files
contain the signatures of symbols defined in some <i>OpenMath</i> Content
Dictionary and their format is endorsed by this standard.</p>

<p>Furthermore, the standard fixes how to define as a CDGroup a specific
set of Content Dictionaries.</p>

<p>Auxiliary files that define presentation and rendering or that
are used for manipulating and processing Content Dictionaries are not
discussed by the standard.</p>


</div>
<div><h3 name="sec_phrasebooks" id="sec_phrasebooks">2.5 Phrasebooks</h3>




<p>The conversion of an <i>OpenMath</i> object to/from the internal
representation in a software application is performed by an interface
program called <i>Phrasebook</i>. The translation is
governed by the Content Dictionaries and the specifics of the
application. It is envisioned that a software application dealing with
a specific area of mathematics declares which Content Dictionaries it
understands. As a consequence, it is expected that the Phrasebook of
the application is able to translate <i>OpenMath</i> objects built using symbols
from these Content Dictionaries to/from the internal mathematical
objects of the application.</p>

 <p><i>OpenMath</i> objects do not
specify any computational behaviour, they merely represent mathematical
expressions.  Part of the <i>OpenMath</i> philosophy is to leave it to the
application to decide what it does with an object once it has received
it.  <i>OpenMath</i> is not a query or programming language. Because of this,
<i>OpenMath</i> does not prescribe a way of forcing <span>"evaluation"</span> or
<span>"simplification"</span> of objects like
<m:math><m:mn>2</m:mn><m:mo>+</m:mo><m:mn>3</m:mn></m:math>  or
<m:math><m:mi>sin</m:mi><m:mo>(</m:mo><m:mi>&#960;</m:mi><m:mo>)</m:mo></m:math>. Thus,
the same object <m:math><m:mn>2</m:mn><m:mo>+</m:mo><m:mn>3</m:mn></m:math>  could be
transformed to <m:math><m:mn>5</m:mn></m:math>  by a computer algebra system,
or displayed as <m:math><m:mn>2</m:mn><m:mo>+</m:mo><m:mn>3</m:mn></m:math>  by a
typesetting tool.</p>
</div>


<h2 name="cha_obj" id="cha_obj">
  Chapter 3<br/><i>OpenMath</i> Objects</h2>




<p>In this chapter we provide a self-contained description of <i>OpenMath</i>
objects. We first do so by means of an abstract grammar
description (<a href="#sec_omabs">Section 3.1</a>)
and then give a more informal description (<a href="#sec_omin">Section 3.2</a>).</p>


<div><h3 name="sec_omabs" id="sec_omabs">3.1 Formal Definition of <i>OpenMath</i> Objects</h3>



<p><i>OpenMath</i> represents mathematical objects as terms or as labelled
trees that are called <i>OpenMath</i> objects or <i>OpenMath</i> expressions. The definition
of an abstract <i>OpenMath</i> object is then the following.</p>


<div><h4 name="sec_basic" id="sec_basic">3.1.1 Basic <i>OpenMath</i> objects</h4>
 <p>The Basic <i>OpenMath</i> Objects form
the leaves of the <i>OpenMath</i> Object tree.  A Basic <i>OpenMath</i> Object is of one of
the following.</p> 
<ul>
<li><p><span>(i)</span> Integer.</p><p>Integers in
  the mathematical sense, with no predefined range.  They are
  <span>"infinite precision"</span> integers (also called
  <span>"bignums"</span> in computer algebra).</p></li>
<li><p><span>(ii)</span> IEEE floating point
    number.</p><p>Double precision floating-point numbers
    following the <span>ieee</span> 754-1985
    standard <a href="#ieee754_85">[8]</a>.</p></li>
<li><p><span>(iii)</span> Character string.</p><p>A Unicode Character string. This also corresponds to `characters' in
  <span>xml</span>.</p></li>
<li><p><span>(iv)</span> Bytearray.</p><p>A sequence of bytes.</p></li>
<li><p><span>(v)</span> Symbol.</p><p>A Symbol encodes three fields of
information, a <i>name</i>, a <i>Content
Dictionary</i>, and (optionally) a role.  The name of a symbol
is a sequence of characters matching the regular expression described
in <a href="#sec_names">Section 3.3</a>.  The Content Dictionary is the
location of the definition of the symbol, consisting of a name (a
sequence of characters matching the regular expression described in
<a href="#sec_names">Section 3.3</a>) and, optionally, a unique prefix called
a <i>cdbase</i> which is used to
disambiguate multiple Content Dictionaries of the same name.  The role
is a restriction on where the symbol may appear in an <i>OpenMath</i> object.
The possible roles are described in <a href="#sec_roles">Section 3.1.4</a>.

</p></li>
<li><p><span>(vi)</span> Variable.</p><p>A Variable 
<span>must have</span> a
<i>name</i> which is a sequence of characters matching a
regular expression, as described in <a href="#sec_names">Section 3.3</a>.
<span>Where the variable is a member of an
enumerated set it also has a child which is an <i>OpenMath</i> object
representing its indices.  </span></p></li>
</ul>
</div>

<div><h4 name="sec_derived" id="sec_derived">3.1.2 Derived <i>OpenMath</i> Objects</h4>


<p>A derived<i>OpenMath</i> object is built as follows: 
<ul>
<li><p><span>(i)</span> If <m:math><m:mi>A</m:mi></m:math>  is
<i>not</i> an <i>OpenMath</i> object, then <m:math><m:mi mathvariant="bold">foreign</m:mi><m:mfenced><m:mi>A</m:mi></m:mfenced></m:math>  is an <i>OpenMath</i>
<i>foreign object</i>.</p></li>
</ul>
</p>
</div>

<div><h4 name="sec_compound" id="sec_compound">3.1.3 Compound <i>OpenMath</i> Objects</h4>

  
<p><i>OpenMath</i> objects are built recursively as follows.
<ul>
<li><p><span>(i)</span> Basic <i>OpenMath</i> objects are <i>OpenMath</i> objects.
<span>Derived <i>OpenMath</i> objects are <i>not</i>
<i>OpenMath</i> objects.</span></p></li>

<li><p>
    <span>(ii)</span> If
    <m:math><m:msub><m:mi>A</m:mi><m:mn>1</m:mn></m:msub></m:math>,
    <span>&#8230;</span>,
    <m:math><m:msub><m:mi>A</m:mi><m:mi>n</m:mi></m:msub></m:math> 
    <m:math><m:mo>(</m:mo><m:mi>n</m:mi><m:mo>&gt;</m:mo><m:mn>0</m:mn><m:mo>)</m:mo></m:math> 
    are <i>OpenMath</i> objects, then
  <m:math display="block">
  <m:mi mathvariant="bold">application</m:mi><m:mo>(</m:mo><m:msub><m:mi>A</m:mi><m:mn>1</m:mn></m:msub><m:mo>,</m:mo> <m:mi>&#8230;</m:mi><m:mo>,</m:mo> <m:msub><m:mi>A</m:mi><m:mi>n</m:mi></m:msub><m:mo>)</m:mo>
  </m:math>
  is an <i>OpenMath</i> <i>application object</i>.</p></li> <li><p><span>(iii)</span> If
  <m:math><m:msub><m:mi>S</m:mi><m:mn>1</m:mn></m:msub><m:mo>,</m:mo>
  <m:mi>&#8230;</m:mi><m:mo>,</m:mo> <m:msub><m:mi>S</m:mi><m:mi>n</m:mi></m:msub></m:math> 
  are <i>OpenMath</i> symbols, and

<span>
<m:math><m:mi>A</m:mi></m:math>  is an <i>OpenMath</i> object, and
  <m:math><m:msub><m:mi>A</m:mi><m:mn>1</m:mn></m:msub></m:math>,
  <span>&#8230;</span>, <m:math><m:msub><m:mi>A</m:mi><m:mi>n</m:mi></m:msub></m:math>  <m:math><m:mo>(</m:mo><m:mi>n</m:mi><m:mo>&gt;</m:mo><m:mn>0</m:mn><m:mo>)</m:mo></m:math>  are <i>OpenMath</i> objects or <i>OpenMath</i> derived objects, then
</span>

  <m:math display="block"><m:mi mathvariant="bold">attribution</m:mi>
  <m:mo>(</m:mo><m:mi>A</m:mi><m:mo>,</m:mo> <m:msub><m:mi>S</m:mi><m:mn>1</m:mn></m:msub>
  <m:mspace width=".3em"/> <m:msub><m:mi>A</m:mi><m:mn>1</m:mn></m:msub><m:mo>,</m:mo>
  <m:mspace width=".3em"/> <m:mi>&#8230;</m:mi> <m:mspace width=".3em"/>
  <m:mo>,</m:mo> <m:msub><m:mi>S</m:mi><m:mi>n</m:mi></m:msub> <m:mspace width=".3em"/>
  <m:msub><m:mi>A</m:mi><m:mi>n</m:mi></m:msub><m:mo>)</m:mo></m:math> is an <i>OpenMath</i>
  <i>attribution object</i>. 

   <m:math><m:mi>A</m:mi></m:math> 
  is the object <i>stripped of attributions</i>. <span>
  <m:math><m:msub><m:mi>S</m:mi><m:mn>1</m:mn></m:msub><m:mo>,</m:mo>
  <m:mi>&#8230;</m:mi><m:mo>,</m:mo> <m:msub><m:mi>S</m:mi><m:mi>n</m:mi></m:msub></m:math> 
  are referred to as <i>keys</i> and
  <m:math><m:msub><m:mi>A</m:mi><m:mn>1</m:mn></m:msub></m:math>,
  <span>&#8230;</span>,
  <m:math><m:msub><m:mi>A</m:mi><m:mi>n</m:mi></m:msub></m:math>  as their associated
  <i>values</i></span>. The operation of recursively
  applying stripping to the stripped object is called
  <i>flattening of the attribution</i>.

                  When the stripped object after flattening is a
  variable, the attributed object is called <i>attributed
  variable</i>.</p></li>

<li><p><span>(iv)</span> If <m:math><m:mi>B</m:mi></m:math>  and
  <m:math><m:mi>C</m:mi></m:math>  are <i>OpenMath</i> objects, and
  <m:math><m:msub><m:mi>v</m:mi><m:mn>1</m:mn></m:msub></m:math>,
  <m:math><m:mi>&#8230;</m:mi></m:math>,
  <m:math><m:msub><m:mi>v</m:mi><m:mi>n</m:mi></m:msub></m:math> 
  <m:math><m:mo>(</m:mo><m:mi>n</m:mi> <m:mo>&#8805;</m:mo>
  <m:mn>0</m:mn><m:mo>)</m:mo></m:math>  are <i>OpenMath</i> variables or attributed
  variables, then
  <m:math display="block">
  <m:mi mathvariant="bold">binding</m:mi> <m:mo>(</m:mo><m:mi>B</m:mi><m:mo>,</m:mo> <m:msub><m:mi>v</m:mi><m:mn>1</m:mn></m:msub><m:mo>,</m:mo> <m:mi>&#8230;</m:mi><m:mo>,</m:mo> <m:msub><m:mi>v</m:mi><m:mi>n</m:mi></m:msub><m:mo>,</m:mo> <m:mi>C</m:mi><m:mo>)</m:mo>
  </m:math>
is an <i>OpenMath</i> <i>binding object</i>.</p></li>
<li><p><span>(v)</span> If <m:math><m:mi>S</m:mi></m:math>  is an
<i>OpenMath</i> symbol and <m:math><m:msub><m:mi>A</m:mi><m:mn>1</m:mn></m:msub></m:math>,
<span>&#8230;</span>,
<m:math><m:msub><m:mi>A</m:mi><m:mi>n</m:mi></m:msub></m:math> 
<m:math><m:mo>(</m:mo><m:mi>n</m:mi> <m:mo>&#8805;</m:mo>
<m:mn>0</m:mn><m:mo>)</m:mo></m:math>  are <i>OpenMath</i> objects, then <m:math display="block"><m:mi mathvariant="bold">error</m:mi>
<m:mo>(</m:mo><m:mi>S</m:mi><m:mo>,</m:mo>
<m:msub><m:mi>A</m:mi><m:mn>1</m:mn></m:msub><m:mo>,</m:mo><m:mi>&#8230;</m:mi><m:mo>,</m:mo><m:msub><m:mi>A</m:mi><m:mi>n</m:mi></m:msub><m:mo>)</m:mo>
  </m:math>
  is an <i>OpenMath</i> <i>error object</i>.</p></li>
</ul>
</p>
</div>

<div><h4 name="sec_roles" id="sec_roles">3.1.4 <i>OpenMath</i> Symbol Rôles</h4>


<p>The <i>rôle</i> of an <i>OpenMath</i> symbol is a restriction
on where it can appear in an <i>OpenMath</i> object.  A symbol cannot have more
than one role.  If no role is indicated
then the symbol can be used anywhere.  Possible roles are:
<ol class="lowerroman">

<li><p><i>binder</i> The symbol may only
appear as the first child of an <i>OpenMath</i> binding object.
</p></li>

<li><p> <i>attribution</i> The symbol may only
be used as key in an <i>OpenMath</i> attribution object, i.e. as the first
element of a key-value pair, or in an equivalent context (for example
to refer to the value of an attribution).  This form of attribution
may be ignored by an application, so should be used for information
which does not change the meaning of the attributed <i>OpenMath</i> object.
</p></li> 

<li><p> <i>semantic-attribution</i> This is the
same as <i>attribution</i> except that it modifies the
meaning of the attributed <i>OpenMath</i> object and thus cannot be ignored by an
application.  </p></li> 

<li><p> <i>error</i> The symbol can only appear
as the first child of an <i>OpenMath</i> error object.  </p></li>
<li><p> <i>default</i> The symbol can appear
anywhere not defined in the previous four cases.  </p></li>
</ol>
</p>
</div>

</div>
<div><h3 name="sec_omin" id="sec_omin">3.2 Further Description of <i>OpenMath</i> Objects</h3>




  

<p>Informally, an <i>OpenMath</i> <span><i>object</i></span> can be
viewed as a tree and is also referred to as a term.  The objects at
the leaves of <i>OpenMath</i> trees are called <span><i>basic
objects</i></span>.  The basic objects supported by <i>OpenMath</i> are:
<dl>
<dt>Integer</dt><dd><p>Arbitrary Precision
integers.</p> </dd>
<dt>Float</dt><dd> <p><i>OpenMath</i> floats are
<span>ieee</span> 754 Double precision floating-point
numbers. Other types of floating point number may be encoded in <i>OpenMath</i>
by the use of suitable content dictionaries.</p>
  
</dd>

<dt>Character strings</dt><dd><p>are
  sequences of characters. These characters come from the Unicode
  standard <a href="#UNICODE">[14]</a>.</p>
  
</dd>
<dt>Bytearrays</dt><dd><p>are sequences of
bytes. There is no <span>"byte"</span> in <i>OpenMath</i> as an object of its
own. However, a single byte can of course be represented by a
bytearray of length 1.  The difference between strings and bytearrays
is the following: a character string is a sequence of bytes with a
fixed interpretation (as characters, Unicode texts may require several
bytes to code one character), whereas a bytearray is an uninterpreted
sequence of bytes with no intrinsic meaning.  Bytearrays could be used
inside <i>OpenMath</i> errors to provide information to, for example, a debugger;
they could also contain intermediate results of calculations, or
`handles' into computations or databases.</p>
</dd>

<dt>Symbols</dt><dd>
  
  
  <p>
 are uniquely defined by the Content Dictionary in which they occur
  and by a name.
The form of these definitions is explained in
  <a href="#cha_cd">Chapter 5</a>.  Each symbol has no more than one
  definition in a Content Dictionary. Many Content Dictionaries may
  define differently a symbol with the same name (e.g. the symbol
  <small><code>union</code></small> is defined as
  associative-commutative set theoretic union in a Content Dictionary
  <small><code>set1</code></small> but another Content Dictionary,
  <small><code>multiset1</code></small> might define a symbol
  <small><code>union</code></small> as the union of multi-sets).


  
</p>
  
 
  </dd>

<dt>Variables</dt><dd><p>are meant to
  denote parameters, variables or indeterminates (such as bound
  variables of function definitions, variables in summations and
  integrals, independent variables of derivatives).   
</p>
<p>
A variable may have one or more children which are themselves <i>OpenMath</i>
objects and are treated as scripts.  Thus it is possible to create a
variable with cardinality such as
<m:math><m:msub><m:mi>x</m:mi><m:mn>1</m:mn></m:msub></m:math>  or
<m:math><m:msub><m:mi>x</m:mi><m:mi>i</m:mi></m:msub></m:math>.
</p>
</dd>

</dl> </p>


<p>Currently there is one way of making a
derived <i>OpenMath</i> object.</p>

<dl>
<dt>Foreign</dt><dd><p>is used to import a
non-<i>OpenMath</i> object into an <i>OpenMath</i> attribution.  Examples of its use could
be to annotate a formula with a visual or aural rendering, an
animation etc.
</p>
</dd>

</dl>


<p>The four following constructs can be used to make compound
 <i>OpenMath</i> objects.</p>
<dl>
<dt>Application</dt><dd><p>constructs an
  <i>OpenMath</i> object from a sequence of one or more <i>OpenMath</i> objects. The first
  argument of application is referred to as <span>"head"</span> while
  the remaining objects are called <span>"arguments"</span>.  An <i>OpenMath</i>
  application object can be used to convey the mathematical notion of
  application of a function to a set of arguments.  For instance,
  suppose that the <i>OpenMath</i> symbol <m:math><m:mi>sin</m:mi></m:math>  is defined in
  a Content Dictionary for trigonometry, then <m:math><m:mi mathvariant="bold">application</m:mi><m:mo>(</m:mo><m:mi>sin</m:mi><m:mo>,</m:mo>
  <m:mi>x</m:mi> <m:mo>)</m:mo></m:math>  is the abstract <i>OpenMath</i> object
  corresponding to <m:math><m:mi>sin</m:mi> <m:mo>(</m:mo><m:mi>x</m:mi>
  <m:mo>)</m:mo></m:math>.  More generally, an <i>OpenMath</i> application object can
  be used as a constructor to convey a mathematical object built from
  other objects such as a polynomial constructed from a set of
  monomials.  Constructors build inhabitants of some symbolic type,
  for instance the type of rational numbers or the type of
  polynomials.  The rational number, usually denoted as
  <m:math><m:mn>1</m:mn><m:mo>/</m:mo><m:mn>2</m:mn></m:math>, is represented by the
  <i>OpenMath</i> application object <m:math><m:mi mathvariant="bold">application</m:mi><m:mo>(</m:mo><m:mi>Rational</m:mi><m:mo>,</m:mo>
  <m:mn>1</m:mn><m:mo>,</m:mo> <m:mn>2</m:mn><m:mo>)</m:mo></m:math>. The symbol
  <m:math><m:mi>Rational</m:mi></m:math>  must be defined, by a Content
  Dictionary, as a constructor symbol for the rational numbers.</p>
   
<div class="figure"><a name="fig_obj" id="fig_obj"/>
      <img src="lambda.png" alt="lambda.png"/>
<div>
  Figure 3.1 The <i>OpenMath</i> application and binding objects for
<m:math><m:mi>sin</m:mi> <m:mo>(</m:mo><m:mi>x</m:mi> <m:mo>)</m:mo></m:math>  and
<m:math><m:mi>&#955;</m:mi> <m:mi>x</m:mi><m:mo>.</m:mo><m:mi>x</m:mi> <m:mo>+</m:mo>
<m:mn>2</m:mn></m:math>  in tree-like notation.</div></div>

  
</dd>

<dt>Binding</dt><dd><p>objects are
  constructed from an <i>OpenMath</i> object, and from a sequence of zero or more
  variables followed by another <i>OpenMath</i> object.  The first <i>OpenMath</i> object is
  the <span>"binder"</span> object. Arguments 2 to
  <m:math><m:mi>n</m:mi><m:mo>-</m:mo><m:mn>1</m:mn></m:math>  are always variables to
  be bound in the <span>"body"</span> which is the
  <m:math><m:msup><m:mi>n</m:mi><m:mi>th</m:mi></m:msup></m:math>  argument object. It
  is allowed to have no bound variables, but the binder object and the
  body should be present. Binding can be used to express functions or
  logical statements.  The function <m:math><m:mi>&#955;</m:mi>
  <m:mi>x</m:mi><m:mo>.</m:mo><m:mi>x</m:mi> <m:mo>+</m:mo><m:mn>2</m:mn></m:math>, in which
  the variable <m:math><m:mi>x</m:mi></m:math>  is bound by
  <m:math><m:mi>&#955;</m:mi></m:math>, corresponds to a binding object having
  as binder the <i>OpenMath</i> symbol <m:math><m:mi>lambda</m:mi></m:math>: <m:math display="block"><m:mi mathvariant="bold">binding</m:mi><m:mo>(</m:mo><m:mi>lambda</m:mi><m:mo>,</m:mo>
  <m:mi>x</m:mi> <m:mo>,</m:mo> <m:mi mathvariant="bold">application</m:mi><m:mo>(</m:mo><m:mi>plus</m:mi><m:mo>,</m:mo>
  <m:mi>x</m:mi> <m:mo>,</m:mo>
  <m:mn>2</m:mn><m:mo>)</m:mo><m:mo>)</m:mo><m:mtext>.</m:mtext></m:math></p>
  
  
  


<p>Phrasebooks are allowed to use <m:math><m:mi>&#945;</m:mi></m:math> 
  conversion in order to avoid clashes of variable names. Suppose an
  object <m:math><m:mi>&#937;</m:mi></m:math>  contains an occurrence of the
  object <m:math><m:mi mathvariant="bold">binding</m:mi>
  <m:mo>(</m:mo><m:mi>B</m:mi> <m:mo>,</m:mo> <m:mi>v</m:mi> <m:mo>,</m:mo> <m:mi>C</m:mi>
  <m:mo>)</m:mo></m:math>.  This object <m:math><m:mi mathvariant="bold">binding</m:mi> <m:mo>(</m:mo><m:mi>B</m:mi> <m:mo>,</m:mo>
  <m:mi>v</m:mi> <m:mo>,</m:mo> <m:mi>C</m:mi> <m:mo>)</m:mo></m:math>  can be replaced
  in <m:math><m:mi>&#937;</m:mi></m:math>  by <m:math><m:mi mathvariant="bold">binding</m:mi> <m:mo>(</m:mo><m:mi>B</m:mi> <m:mo>,</m:mo>
  <m:mi>z</m:mi> <m:mo>,</m:mo> <m:mi>C'</m:mi><m:mo>)</m:mo></m:math>  where
  <m:math><m:mi>z</m:mi></m:math>  is a variable not occurring free in
  <m:math><m:mi>C</m:mi></m:math>  and <m:math><m:mi>C'</m:mi></m:math>  is obtained
  from <m:math><m:mi>C</m:mi></m:math>  by replacing each free (i.e., not bound
  by any intermediate <b>binding</b> construct) occurrence
  of <m:math><m:mi>v</m:mi></m:math>  by <m:math><m:mi>z</m:mi></m:math>.  This
  operation preserves the semantics of the object
  <m:math><m:mi>&#937;</m:mi></m:math>. In the above example, a phrasebook is
  thus allowed to transform the object to, e.g.  <m:math revisionflag="deleted" display="block"><m:mi mathvariant="bold">binding</m:mi>
  <m:mo>(</m:mo><m:mi>lambda</m:mi><m:mo>,</m:mo> <m:mi>v</m:mi> <m:mo>,</m:mo> <m:mi mathvariant="bold">binding</m:mi> <m:mo>(</m:mo><m:mi>lambda</m:mi><m:mo>,</m:mo>
  <m:mi>z</m:mi> <m:mo>,</m:mo><m:mi mathvariant="bold">application</m:mi>
  <m:mo>(</m:mo><m:mi>times</m:mi><m:mo>,</m:mo><m:mi>z</m:mi>
  <m:mo>,</m:mo><m:mi>z</m:mi><m:mo>)</m:mo><m:mo>)</m:mo><m:mo>)</m:mo><m:mtext>.</m:mtext></m:math>
  <m:math revisionflag="added" display="block"><m:mi mathvariant="bold">binding</m:mi><m:mo>(</m:mo><m:mi>lambda</m:mi><m:mo>,</m:mo>
  <m:mi>z</m:mi> <m:mo>,</m:mo> <m:mi mathvariant="bold">application</m:mi><m:mo>(</m:mo><m:mi>plus</m:mi><m:mo>,</m:mo>
  <m:mi>z</m:mi> <m:mo>,</m:mo>
  <m:mn>2</m:mn><m:mo>)</m:mo><m:mo>)</m:mo><m:mtext>.</m:mtext></m:math>
</p>
<p>Repeated occurrences of the same variable in a binding operator
  are allowed. An <i>OpenMath</i> application should treat a binding with
  multiple occurrences of the same variable as equivalent to the
  binding in which all but the last occurrence of each variable is
  replaced by a new variable which does not occur free in the body of
  the binding.  <m:math display="block"><m:mi mathvariant="bold">binding</m:mi> <m:mo>(</m:mo><m:mi>lambda</m:mi><m:mo>,</m:mo>
  <m:mi>v</m:mi> <m:mo>,</m:mo> <m:mi>v</m:mi> <m:mo>,</m:mo><m:mi mathvariant="bold">application</m:mi>
  <m:mo>(</m:mo><m:mi>times</m:mi><m:mo>,</m:mo><m:mi>v</m:mi>
  <m:mo>,</m:mo><m:mi>v</m:mi><m:mo>)</m:mo> <m:mo>)</m:mo></m:math> is semantically
  equivalent to: <m:math display="block"><m:mi mathvariant="bold">binding</m:mi> <m:mo>(</m:mo><m:mi>lambda</m:mi> <m:mo>,</m:mo>
  <m:msup><m:mi>v</m:mi><m:mo>'</m:mo></m:msup> <m:mo>,</m:mo> <m:mi>v</m:mi>
  <m:mo>,</m:mo><m:mi mathvariant="bold">application</m:mi>
  <m:mo>(</m:mo><m:mi>times</m:mi><m:mo>,</m:mo><m:mi>v</m:mi>
  <m:mo>,</m:mo><m:mi>v</m:mi><m:mo>)</m:mo> <m:mo>)</m:mo></m:math> so that the
  resulting function is actually a constant in its first argument
  (<m:math><m:msup><m:mi>v</m:mi><m:mo>'</m:mo></m:msup></m:math>  does not occur free
  in the body <m:math><m:mi mathvariant="bold">application</m:mi>
  <m:mo>(</m:mo><m:mi>times</m:mi><m:mo>,</m:mo><m:mi>v</m:mi>
  <m:mo>,</m:mo><m:mi>v</m:mi><m:mo>)</m:mo> <m:mo>)</m:mo></m:math>).</p>

  
</dd>

<dt>Attribution</dt><dd><p>decorates an
  object with a sequence of one or more pairs made up of an <i>OpenMath</i>
  symbol, the <span>"attribute"</span>, and an associated  object, the <span>"value of the
  attribute"</span>.  The value of the attribute can be an <span><i>OpenMath</i></span> attribution object itself. As an
  example of this, consider the <i>OpenMath</i> objects representing groups,
  automorphism groups, and group dimensions. It is then possible to
  attribute an <i>OpenMath</i> object representing a group by its automorphism
  group, itself attributed by its dimension.</p>

<p>
<i>OpenMath</i> objects can be attributed with <i>OpenMath</i> foreign objects, which are
containers for non-<i>OpenMath</i> structures.  For example a mathematical
expression could be attributed with its spoken or visual rendering.
</p>

<p>Composition of attributions, as in
  <m:math display="block">
<m:mi mathvariant="bold">attribution</m:mi><m:mo>(</m:mo><m:mi mathvariant="bold">attribution</m:mi><m:mo>(</m:mo><m:mi>A</m:mi><m:mo>,</m:mo>
  <m:msub><m:mi>S</m:mi><m:mn>1</m:mn></m:msub> <m:mspace width=".3em"/>
  <m:msub><m:mi>A</m:mi><m:mn>1</m:mn></m:msub><m:mo>,</m:mo><m:mi>&#8230;</m:mi><m:mo>,</m:mo><m:msub><m:mi>S</m:mi><m:mi>h</m:mi></m:msub>
  <m:mspace width=".3em"/>
  <m:msub><m:mi>A</m:mi><m:mi>h</m:mi></m:msub><m:mo>)</m:mo><m:mo>,</m:mo>
  <m:msub><m:mi>S</m:mi><m:mrow><m:mi>h</m:mi><m:mo>+</m:mo><m:mn>1</m:mn></m:mrow></m:msub>
  <m:mspace width=".3em"/>
  <m:msub><m:mi>A</m:mi><m:mrow><m:mi>h</m:mi><m:mo>+</m:mo><m:mn>1</m:mn></m:mrow></m:msub><m:mo>,</m:mo>
  <m:mi>&#8230;</m:mi><m:mo>,</m:mo> <m:msub><m:mi>S</m:mi><m:mi>n</m:mi></m:msub> <m:mspace width=".3em"/> <m:msub><m:mi>A</m:mi><m:mi>n</m:mi></m:msub><m:mo>)</m:mo></m:math> is
  semantically equivalent to a single attribution, that is <m:math display="block"><m:mi mathvariant="bold">attribution</m:mi><m:mo>(</m:mo><m:mi>A</m:mi><m:mo>,</m:mo>
  <m:msub><m:mi>S</m:mi><m:mn>1</m:mn></m:msub> <m:mspace width=".3em"/>
  <m:msub><m:mi>A</m:mi><m:mn>1</m:mn></m:msub><m:mo>,</m:mo>
  <m:mi>&#8230;</m:mi><m:mo>,</m:mo> <m:msub><m:mi>S</m:mi><m:mi>h</m:mi></m:msub> <m:mspace width=".3em"/> <m:msub><m:mi>A</m:mi><m:mi>h</m:mi></m:msub><m:mo>,</m:mo>
  <m:msub><m:mi>S</m:mi><m:mrow><m:mi>h</m:mi><m:mo>+</m:mo><m:mn>1</m:mn></m:mrow></m:msub>
  <m:mspace width=".3em"/>
  <m:msub><m:mi>A</m:mi><m:mrow><m:mi>h</m:mi><m:mo>+</m:mo><m:mn>1</m:mn></m:mrow></m:msub><m:mo>,</m:mo>
  <m:mi>&#8230;</m:mi><m:mo>,</m:mo> <m:msub><m:mi>S</m:mi><m:mi>n</m:mi></m:msub> <m:mspace width=".3em"/>
  <m:msub><m:mi>A</m:mi><m:mi>n</m:mi></m:msub><m:mo>)</m:mo><m:mtext>.</m:mtext></m:math>
  The operation that produces an object with a single layer of
  attribution is called <i>flattening</i>.</p>

<p>Multiple attributes with the same name are allowed.  While the
  order of the given attributes does not imply any notion of priority,
  potentially it could be significant. For instance, consider the case
  in which <m:math><m:msub><m:mi>S</m:mi><m:mi>h</m:mi></m:msub> <m:mo>=</m:mo>
  <m:msub><m:mi>S</m:mi><m:mi>n</m:mi></m:msub></m:math>  (<m:math><m:mi>h</m:mi>
  <m:mo>&lt;</m:mo> <m:mi>n</m:mi></m:math>) in the example above. Then, the
  object is to be interpreted as if the value
  <m:math><m:msub><m:mi>A</m:mi><m:mi>n</m:mi></m:msub></m:math>  overwrites the value
  <m:math><m:msub><m:mi>A</m:mi><m:mi>h</m:mi></m:msub></m:math>.  (<i>OpenMath</i> however does
  not mandate that an application preserves the attributes or their
  order.)</p>

<p>Attribution acts as either adornment
  annotation or as semantical annotation. When the key has rôle
  <i> attribution</i>, then replacement of the
  attributed object by the object itself is not harmful and preserves
  the semantics. When the key has rôle
  <i>semantic-attribution</i> then the attributed
  object is modified by the attribution and cannot be viewed as
  semantically equivalent to the stripped object. If the attribute
  lacks the rôle specification then attribution is acting as adornment
  annotation.
  </p>


<p>Objects can be decorated in a multitude of
ways. In <a href="#OM_D131b">[3]</a>, typing of <i>OpenMath</i> objects is
expressed by using an attribution. The object <m:math><m:mi mathvariant="bold">attribution</m:mi><m:mo>(</m:mo><m:mi>A</m:mi><m:mo>,</m:mo>
<m:mi>type</m:mi> <m:mspace width=".3em"/> <m:mi>t</m:mi> <m:mo>)</m:mo></m:math> 
represents the judgment stating that object <m:math><m:mi>A</m:mi></m:math> 
has type <m:math><m:mi>t</m:mi></m:math>. Note that both
<m:math><m:mi>A</m:mi></m:math>  and <m:math><m:mi>t</m:mi></m:math>  are <i>OpenMath</i>
objects.</p>




            
  
  
</dd>

<dt>Error</dt><dd><p>is made up of an <i>OpenMath</i>
  symbol and a sequence of zero or more <i>OpenMath</i> objects. This object has
  no direct mathematical meaning.  Errors occur as the result of some
  treatment on an <i>OpenMath</i> object and are thus of real interest only when
  some sort of communication is taking place. Errors may occur inside
  other objects and also inside other errors.  Error objects might
  consist only of a symbol as in the object: <m:math><m:mi mathvariant="bold">error</m:mi> <m:mo>(</m:mo><m:mi>S</m:mi>
  <m:mo>)</m:mo></m:math>.</p> 
</dd>

</dl> 
</div>

<div><h3 name="sec_names" id="sec_names">3.3 Names</h3>

<p>

The names of symbols, variables and content dictionaries must conform to the
following rules, which are designed to be compatible with standards such as
Unicode and XML.  These standards group individual characters into letters,
digits, combining characters and extenders.  Informally, these are defined as
follows:

<dl>

<dt>Letters</dt><dd><p> are elements of an
alphabet such as latin, cyrillic, kanji etc.</p></dd>

<dt>Digits</dt><dd><p> are atomic numbers,
from which compound numbers can be constructed (for example `1' is a
digit but `11' is not).</p></dd>

<dt>Combining Characters</dt><dd><p> are
used to combine several characters to produce a new one, for example
an accented character.
</p></dd>

<dt>Extenders</dt><dd><p> are characters
which are neither letters nor combining characters but modify the
appearance of other characters in some way.
</p></dd>

</dl>
Formally, we use the precise definitions given in the Unicode
standard <a href="#UNICODE">[14]</a>.
</p>

<p>

Then a legal <i>OpenMath</i> name is defined by the following grammar:
<blockquote>
<table>
<tr>
<td>Name </td>
<td> <m:math><m:mo>&#8594;</m:mo></m:math>  </td>
<td> (Letter | '_') (Char)*
</td>
</tr>
<tr>
<td>Char</td>
<td> <m:math><m:mo>&#8594;</m:mo></m:math>  </td>
<td> Letter | Digit | '.' | '-' | '_' | CombiningChar | Extender
</td>
</tr>
</table>
</blockquote>

</p>

<p><b>CD Base</b>

<p>A cdbase must conform to the grammar for URIs described in
<a href="#IETF2396">[9]</a>.  Note that if non-ASCII characters are
used in a CD or symbol name then when a URI for that symbol is
constructed it will be necessary to map the non-ASCII characters to a
sequence of octets.  The precise mechanism for doing this depends on
the URI scheme.</p></p>

<p><b>Note on content dictionary names</b>
<p>
It is a common convention to store a Content Dictionary in a file of
the same name, which can cause difficulties on many file systems.  If
this convention is to be followed then <i>OpenMath</i>
<i>recommends</i> that the name be restricted to the
subset of the above grammar which is a legal POSIX
<a href="#POSIX">[7]</a> filename, namely:
<blockquote>
<table>
<tr>
<td>Name </td>
<td> <m:math><m:mo>&#8594;</m:mo></m:math>  </td>
<td> (PosixLetter | '_') (Char)*
</td>
</tr>
<tr>
<td>Char</td>
<td> <m:math><m:mo>&#8594;</m:mo></m:math>  </td>
<td> PosixLetter | Digit | '.' | '-' | '_' 
</td>
</tr>
<tr>
<td>PosixLetter</td>
<td> <m:math><m:mo>&#8594;</m:mo></m:math>  </td>
<td> 
'a' | 'b' | ... | 'z' | 'A' | 'B' | ... | 'Z'
</td>
</tr>
</table>
</blockquote>
</p>
</p>

</div>

<div><h3 name="sec_summary" id="sec_summary">3.4 Summary</h3>


<ul>
<li><p><i>OpenMath</i> supports basic objects like integers, symbols,
  floating-point numbers, character strings, bytearrays, and
  variables.</p></li>
<li><p><i>OpenMath</i> compound objects are of four kinds:
  applications, bindings, errors, and attributions.</p></li>
<li><p><i>OpenMath</i> objects may be attributed
with non-<i>OpenMath</i> objects via the use of foreign <i>OpenMath</i> objects.
  </p></li>
<li><p><i>OpenMath</i> objects have the expressive power to cover all
  areas of computational mathematics.</p></li>
</ul>

 <p>Observe that an <i>OpenMath</i>
application object is viewed as a <span>"tree"</span> by software
applications that do not understand Content Dictionaries, whereas a
Phrasebook that understands the semantics of the symbols, as defined
in the Content Dictionaries, should interpret the object as functional
application, constructor, or binding accordingly. Thus, for example,
for some applications, the <i>OpenMath</i> object corresponding to
<m:math><m:mn>2</m:mn><m:mo>+</m:mo><m:mn>5</m:mn></m:math>  may result in a command
that writes <m:math><m:mn>7</m:mn></m:math>.</p>
</div>


<h2 name="cha_enco" id="cha_enco">
  Chapter 4<br/><i>OpenMath</i> Encodings</h2>



<p>In this chapter, two encodings are defined that map between <i>OpenMath</i>
objects and byte streams.  These byte streams constitute a low level
representation that can be easily exchanged between processes (via
almost any communication method) or stored and retrieved from
files.</p>




<p>The first encoding is a character-based
encoding in <span>xml</span> format.  In previous versions of the <i>OpenMath</i> Standard
this encoding was a restricted subset of the full legal <span>xml</span> syntax.
In this version, however, we have removed all these restrictions so that
the earlier encoding is a strict subset of the existing one.  The
<span>xml</span> encoding can be used, for example, to send <i>OpenMath</i> objects via
e-mail, cut-and-paste, etc. and to embed <i>OpenMath</i> objects in <span>xml</span>
documents or to have <i>OpenMath</i> objects processed by <span>xml</span>-aware
applications.</p>

<p>The second encoding is a binary encoding that is meant to be
used when the compactness of the encoding is important (interprocess
communications over a network is an example).</p>

<p>Note that these two encodings are sufficiently different for
autodetection to be effective: an application reading the bytes can
very easily determine which encoding is used.</p>

<div><h3 name="sec_xml" id="sec_xml">4.1 The <span>xml</span> Encoding</h3>


<p>This encoding has been designed with two main goals in mind:
<ol>
<li><p>to provide an encoding that uses common character sets
  (so that it can be easily included in most documents and transport
  protocols) and that is both readable and writable by a human.</p></li>
<li><p>to provide an encoding that can be included (embedded) in
  <span>xml</span> documents or processed by <span>xml</span>-aware applications.</p></li>
</ol> 
</p>

<div><h4 name="ssec_xml" id="ssec_xml">4.1.1 A <span>Schema</span> for the <span>xml</span> Encoding</h4>





<p>The <span>xml</span> encoding of an <i>OpenMath</i> object is
defined by the Relax NG schema <a href="#RELAX">[11]</a> given below.
Relax NG has a number of advantages over the older XSD Schema format
<a href="#XSD">[15]</a>, in particular it allows for tighter control
of attributes and has a modular, extensible structure.  Although we
have made the <span>xml</span> form, which is given  in <a href="#app_openmath.rng">Appendix B</a> normative, it is generated from the
 compact syntax given below.  It is also very easy to restrict the schema to allow
a limited set of <i>OpenMath</i> symbols as described in <a href="#app_relaxrestricted">Appendix C</a>.  </p>

<p> Standard tools exist for generating a DTD
or an XSD schema from a Relax NG Schema.  Examples of such documents
are given in <a href="#app_dtd">Appendix E</a> and <a href="#app_xsd">Appendix D</a>
respectively.</p>

<div class="literal"><pre>
<span style="color:brown;"># RELAX NG Schema for OpenMath 2</span>


<span style="font-weight:bold;">default</span> <span style="font-weight:bold;">namespace</span> <a name="rncnamespaceom" style="color:blue;">om</a> = "http://www.openmath.org/OpenMath"
<span style="font-weight:bold;">namespace</span> <a name="rncnamespacexlink" style="color:blue;">xlink</a> = "http://www.w3.org/1999/xlink"

<span style="color:brown;"># OM2: allow OMR</span>
<a name="rncomel" style="color:blue;">omel</a> = 
  <a href="#rncOMS">OMS</a> | <a href="#rncOMV">OMV</a> | <a href="#rncOMI">OMI</a> | <a href="#rncOMB">OMB</a> | <a href="#rncOMSTR">OMSTR</a> | <a href="#rncOMF">OMF</a> | <a href="#rncOMA">OMA</a> | <a href="#rncOMBIND">OMBIND</a> | <a href="#rncOME">OME</a> | <a href="#rncOMATTR">OMATTR</a> |<a href="#rncOMR">OMR</a>

<span style="color:brown;"># things which can be variables</span>
<a name="rncomvar" style="color:blue;">omvar</a> = <a href="#rncOMV">OMV</a> | <a href="#rncattvar">attvar</a>

<a name="rncattvar" style="color:blue;">attvar</a> = <span style="font-weight:bold;">element</span> OMATTR { <a href="#rnccommon.attributes">common.attributes</a>,(<a href="#rncOMATP">OMATP</a> , (<a href="#rncOMV">OMV</a> | <a href="#rncattvar">attvar</a>))}

<span style="color:brown;">#OM2: common attributes</span>
<a name="rnccdbase" style="color:blue;">cdbase</a> = <span style="font-weight:bold;">attribute</span> cdbase { <span style="font-weight:bold;">xsd:anyURI</span>}?
<a name="rnccommon.attributes" style="color:blue;">common.attributes</a> = (<span style="font-weight:bold;">attribute</span> id { <span style="font-weight:bold;">xsd:ID</span> })?
<a name="rnccompound.attributes" style="color:blue;">compound.attributes</a> = <a href="#rnccommon.attributes">common.attributes</a>,<a href="#rnccdbase">cdbase</a>

<span style="color:brown;"># symbol</span>
<a name="rncOMS" style="color:blue;">OMS</a> = <span style="font-weight:bold;">element</span> OMS { <a href="#rnccommon.attributes">common.attributes</a>, <a href="#rncattlist.OMS">attlist.OMS</a>}
<a name="rncattlist.OMS" style="color:blue;">attlist.OMS</a> =
  <span style="font-weight:bold;">attribute</span> name { <span style="font-weight:bold;">xsd:NCName</span>},
  <span style="font-weight:bold;">attribute</span> cd { <span style="font-weight:bold;">xsd:NCName</span>},
  <a href="#rnccdbase">cdbase</a>

<span style="color:brown;"># variable</span>
<a name="rncOMV" style="color:blue;">OMV</a> = <span style="font-weight:bold;">element</span> OMV { <a href="#rnccommon.attributes">common.attributes</a>, <a href="#rncattlist.OMV">attlist.OMV</a>,<a href="#rncomel">omel</a>?}
<a name="rncattlist.OMV" style="color:blue;">attlist.OMV</a> = <span style="font-weight:bold;">attribute</span> name { <span style="font-weight:bold;">xsd:NCName</span>}

<span style="color:brown;"># integer</span>
<a name="rncOMI" style="color:blue;">OMI</a> = <span style="font-weight:bold;">element</span> OMI { <a href="#rnccommon.attributes">common.attributes</a>,
                    <span style="font-weight:bold;">xsd:string</span> {<span style="font-weight:bold;">pattern</span> = "\s*(-\s?)?[0-9]+(\s[0-9]+)*\s*"}}
<span style="color:brown;"># byte array</span>
<a name="rncOMB" style="color:blue;">OMB</a> = <span style="font-weight:bold;">element</span> OMB { <a href="#rnccommon.attributes">common.attributes</a>, <span style="font-weight:bold;">xsd:base64Binary</span> }

<span style="color:brown;"># string</span>
<a name="rncOMSTR" style="color:blue;">OMSTR</a> = <span style="font-weight:bold;">element</span> OMSTR { <a href="#rnccommon.attributes">common.attributes</a>, <span style="font-weight:bold;">text</span> }

<span style="color:brown;"># floating point</span>
<a name="rncOMF" style="color:blue;">OMF</a> = <span style="font-weight:bold;">element</span> OMF { <a href="#rnccommon.attributes">common.attributes</a>, <a href="#rncattlist.OMF">attlist.OMF</a>}
<a name="rncattlist.OMF" style="color:blue;">attlist.OMF</a> =
  <span style="font-weight:bold;">attribute</span> dec { <span style="font-weight:bold;">xsd:string</span> 
           {<span style="font-weight:bold;">pattern</span> = "(-?)([0-9]+)?(\.[0-9]+)?(e([+\-]?)[0-9]+)?"}}|
  <span style="font-weight:bold;">attribute</span> hex { <span style="font-weight:bold;">xsd:string</span> {<span style="font-weight:bold;">pattern</span> = "[0-9A-F]+"}}

<span style="color:brown;"># apply constructor</span>
<a name="rncOMA" style="color:blue;">OMA</a> = <span style="font-weight:bold;">element</span> OMA { <a href="#rnccompound.attributes">compound.attributes</a>, <a href="#rncomel">omel</a>+ }
<span style="color:brown;"># binding constructor and variable</span>
<a name="rncOMBIND" style="color:blue;">OMBIND</a> = <span style="font-weight:bold;">element</span> OMBIND { <a href="#rnccompound.attributes">compound.attributes</a>, <a href="#rncomel">omel</a>, <a href="#rncOMBVAR">OMBVAR</a>, <a href="#rncomel">omel</a> }
<a name="rncOMBVAR" style="color:blue;">OMBVAR</a> = <span style="font-weight:bold;">element</span> OMBVAR { <a href="#rnccommon.attributes">common.attributes</a>, <a href="#rncomvar">omvar</a>+ }

<span style="color:brown;"># error</span>
<a name="rncOME" style="color:blue;">OME</a> = <span style="font-weight:bold;">element</span> OME { <a href="#rnccommon.attributes">common.attributes</a>, <a href="#rncOMS">OMS</a>, <a href="#rncomel*">omel*</a> }

<span style="color:brown;"># attribution constructor and attribute pair constructor</span>
<a name="rncOMATTR" style="color:blue;">OMATTR</a> = <span style="font-weight:bold;">element</span> OMATTR { <a href="#rnccompound.attributes">compound.attributes</a>, <a href="#rncOMATP">OMATP</a>, <a href="#rncomel">omel</a> }

<span style="color:brown;"># OM2: allow OMFOREIGN </span>
<a name="rncOMATP" style="color:blue;">OMATP</a> = <span style="font-weight:bold;">element</span> OMATP { <a href="#rnccompound.attributes">compound.attributes</a>, (<a href="#rncOMS">OMS</a>, (<a href="#rncomel">omel</a> | <a href="#rncOMFOREIGN">OMFOREIGN</a>) )+ }

<span style="color:brown;"># OM2: OMFOREIGN </span>
<a name="rncOMFOREIGN" style="color:blue;">OMFOREIGN</a> =  <span style="font-weight:bold;">element</span> OMFOREIGN { <a href="#rnccompound.attributes">compound.attributes</a>, (<a href="#rncomel">omel</a>|<a href="#rncnotom">notom</a>)* }

<span style="color:brown;"># Any elements not in the om namespace (valid om is allowed as a descendant)</span>
<a name="rncnotom" style="color:blue;">notom</a> =
  (<span style="font-weight:bold;">element</span> * - <a href="#rncnamespaceom">om:</a>* {<span style="font-weight:bold;">attribute</span> * { <span style="font-weight:bold;">text</span> }*,(<a href="#rncomel">omel</a>|<a href="#rncnotom">notom</a>)*}
   | <span style="font-weight:bold;">text</span>)

<span style="color:brown;"># OM object constructor</span>
<a name="rncOMOBJ" style="color:blue;">OMOBJ</a> = <span style="font-weight:bold;">element</span> OMOBJ { <a href="#rnccompound.attributes">compound.attributes</a>, <a href="#rncomel">omel</a> }
 <a name="rncattlist.OMOBJ" style="color:blue;">attlist.OMOBJ</a> = <span style="font-weight:bold;">attribute</span> version { "1.0" | "1.2" | "2.0" }


<span style="color:brown;"># OM2: OMR</span>
<a name="rncOMR" style="color:blue;">OMR</a> = <span style="font-weight:bold;">element</span> OMR { <a href="#rnccommon.attributes">common.attributes</a>, <a href="#rncattlist.OMR">attlist.OMR</a> }
<a name="rncattlist.OMR" style="color:blue;">attlist.OMR</a> = 
        <span style="font-weight:bold;">attribute</span> <a href="#rncnamespacexlink">xlink:</a>href { <span style="font-weight:bold;">text</span> },
        <span style="font-weight:bold;">attribute</span> <a href="#rncnamespacexlink">xlink:</a>type {"simple"},
        <span style="font-weight:bold;">attribute</span> <a href="#rncnamespacexlink">xlink:</a>show {"embed"}

<a name="rncstart" style="color:blue;">start</a> = <a href="#rncOMOBJ">OMOBJ</a>

</pre></div>
<p/>








 











</div>

<div><h4 name="sec_xml-desc" id="sec_xml-desc">4.1.2 <span>Informal</span> description of
the <span><span>xml</span> Encoding</span></h4>


<p>An encoded <i>OpenMath</i> object is placed inside an <small><code>OMOBJ</code></small> element.  This 
element can contain the elements (and integers) described above.
<span> It can take an optional
<small><code>version</code></small> <span>xml</span>-attribute which indicates to which
version of the <i>OpenMath</i> standard it conforms.  This would allow an older
<i>OpenMath</i> application which, for example, could not parse the full <span>xml</span>
syntax, to accept objects with version "1" or "1.1" but reject objects
with version "2".
</span></p>

<p>We briefly discuss the <span>xml</span> encoding for each type of <i>OpenMath</i> object
starting from the basic objects.</p>

<dl>
<dt>Integers</dt>
<dd>
 <p>are encoded using the
<small><code>OMI</code></small> element around the sequence of their
digits in base 10 or 16 (most significant digit first).  White space
may be inserted between the characters of the integer representation,
this will be ignored.  After ignoring white space, integers written in
base 10 match the regular expression
<small><code>-?[0-9]+</code></small>.  Integers written in base 16 match
<small><code>-?x[0-9A-F]+</code></small>.  The integer 10 can be thus
encoded as <small><code>&lt;OMI&gt; 10 &lt;/OMI&gt; </code></small> or as
<small><code>&lt;OMI&gt; xA &lt;/OMI&gt; </code></small> but neither
<small><code>&lt;OMI&gt; +10 &lt;/OMI&gt;</code></small> nor
<small><code>&lt;OMI&gt; +xA &lt;/OMI&gt;</code></small> can be used.</p>

<p>The negative integer <m:math><m:mn>-120</m:mn></m:math>  can be encoded
       as either as decimal <small><code>&lt;OMI&gt; -120
       &lt;/OMI&gt;</code></small> or as hexadecimal <small><code>&lt;OMI&gt;
       -x78 &lt;/OMI&gt;</code></small>.</p>

  
</dd>

<dt>Symbols</dt><dd><p>are encoded using
  the <small><code>OMS</code></small> element. This element has
  
  <span>three</span>
  <span>xml</span>-attributes <small><code>cd</code></small>,
  <small><code>name</code></small><span>,  and
    <small><code>cdbase</code></small></span>. The value of
  <small><code>cd</code></small> is the name of the Content Dictionary in
  which the symbol is defined and the value of
  <small><code>name</code></small> is the name of the symbol.
  <span>The optional <small><code>cdbase</code></small>
    attribute is a URI that can be used to disambiguate between two  content
    dictionaries with the same name. The
  <small><code>cdbase</code></small> attribute may be used on any ancester
  element of the current <small><code>OMS</code></small>, any <small><code>OMS</code></small> elements without an
  explict  <small><code>cdbase</code></small> attribute which is a
  descendent of such an element is taken to
  encode an OpenMath symbol with this CD base.</span>
 For
  example:

<blockquote><p><small><code>&lt;OMS
 cdbase="http://www.openmath.org/cd" cd="transc1" name="sin"/&gt;</code></small></p>
</blockquote>
  is the encoding of the symbol named <small><code>sin</code></small> in
  the Content Dictionary named <small><code>transc1</code></small>,
<span>which is part of the collection
maintained by the <i>OpenMath</i> Society</span>.</p>

<p>The three attributes of the
  <small><code>OMS</code></small> can be used to build a URI reference for the symbol,
for use in contexts where URI-based referencing mechanisms are used. This
canonical URI reference is constructed as follows:</p>
<blockquote>
  <p><small><code>URI = cdbase-value + '/' + cd-value + '#' + name-value</code></small></p>
</blockquote>

<p>For example</p>
<blockquote>
  <div class="literal"><pre>&lt;OMS name="plus" cd="arith1" cdbase="http://www.openmath.org/cd"/&gt;</pre></div>
</blockquote>
<p>
  gives the URI <small><code>"http://www.openmath.org/cd/arith1#plus"</code></small>
  This would allow us to refer uniquely to an openmath symbol from a
MathML document <a href="#MathML_2000">[18]</a>.</p>
<blockquote>
  <div class="literal"><pre>
&lt;mathml:csymbol xmlns:mathml="http://www.w3.org/1998/Math/MathML/"
                definitionURL="http://www.openmath.org/cd/arith1#plus"&gt;
  Z
&lt;/csymbol&gt;
  </pre></div>
</blockquote>
<p>
Note that the role attribute described in <a href="#sec_roles">Section 3.1.4</a> is contained in the Content Dictionary and is not
part of the encoding of a symbol, also the <small><code>cdbase</code></small> attribute need not
be explict on each <small><code>OMS</code></small> as it is inherited
from any ancestor element.</p>
</dd>

<dt>Variables</dt><dd><p>are encoded using
  the <small><code>OMV</code></small> element, with only one
  <span>xml</span>-attribute, <small><code>name</code></small>, whose value is the
  variable name.   For instance, the encoding of the object
  representing the variable <m:math><m:mi>x</m:mi></m:math>  is:
  <small><code>&lt;OMV name="x"/&gt;</code></small></p>

<p>
For an enumerated variable the index or indices of the variable are
encoded as a child.  So for example the encoding
   of the object
  representing the variable
<m:math><m:msub><m:mi>x</m:mi><m:mrow><m:mi>i</m:mi><m:mo>+</m:mo><m:mn>1</m:mn></m:mrow></m:msub></m:math>  is:
<div class="literal"><pre>&lt;OMV name="x"&gt;  
  &lt;OMA&gt;
    &lt;OMS cdbase="http://www.openmath.org/cd" cd="arith1" name="plus"/&gt; 
    &lt;OMV name="i"/&gt;  
    &lt;OMI&gt;1&lt;/OMI&gt;
  &lt;/OMA&gt;
&lt;/OMV&gt;</pre></div>
</p>

  
</dd>

<dt>Floating-point numbers</dt><dd><p>are
  encoded using the <small><code>OMF</code></small> element that has
  either the <span>xml</span>-attribute <small><code>dec</code></small> or the
  <span>xml</span>-attribute <small><code>hex</code></small>. The two
  <span>xml</span>-attributes cannot be present simultaneously. The value of
  <small><code>dec</code></small> is the floating-point number expressed
  in base 10, using the common syntax:</p>
  
  <blockquote><p>
  <small><code>(-?)([0-9]+)?("."[0-9]+)?(e(-?)[0-9]+)?</code></small>.
  </p></blockquote>
  
  <p>The value of <small><code>hex</code></small> is the digits of the floating-point number
  expressed in base 16, with digits <small><code>0</code></small>-<small><code>9</code></small>, <small><code>A</code></small>-<small><code>F</code></small>
  (mantissa, exponent, and sign from lowest to highest bits) using a
  least significant byte ordering.  For example, <small><code>&lt;OMF
    dec="1.0e-10"/&gt;</code></small> is a valid floating-point number.</p>
  

</dd>

<dt>Character strings</dt><dd><p>are encoded using the <small><code>OMSTR</code></small> element.
  Its content is  a Unicode text . Note that as always in <span>xml</span> the
  characters <small><code>&lt;</code></small> and <small><code>&amp;</code></small>  need to be represented by the
  entity references <small><code>&amp;lt;</code></small> and
<small><code>&amp;amp;</code></small> respectively.</p>
  
</dd>

<dt>Bytearrays</dt><dd><p>are encoded using the <small><code>OMB</code></small> element. Its content
  is a sequence of characters that is a base64 encoding of the data.
  The base64 encoding is defined in <span>rfc</span> 1521 <a href="#rfc1521">[2]</a>.
  Basically, it represents an arbitrary sequence of octets using 64
  <span>"digits"</span> (<small><code>A</code></small> through <small><code>Z</code></small>, <small><code>a</code></small> through <small><code>z</code></small>, <small><code>0</code></small> through <small><code>9</code></small>, <small><code>+</code></small> and /, in order of increasing
  value). Three octets are represented as four digits (the <small><code>=</code></small>
  character for padding to the right at the end of the data). All line
  breaks and carriage return, space, form feed and horizontal
  tabulation characters are ignored. The reader is refered to
  <a href="#rfc1521">[2]</a> for more detailed information.</p>

</dd>

</dl>
 
<p>In detail the encoding of an <i>OpenMath</i> object is described below.</p>

<dl>
<dt>Applications</dt><dd><p>are encoded using the <small><code>OMA</code></small> element. The
  application whose head is the <i>OpenMath</i> object <m:math><m:msub><m:mi>e</m:mi><m:mn>0</m:mn></m:msub></m:math>  and whose arguments
  are the <i>OpenMath</i> objects <m:math><m:msub><m:mi>e</m:mi><m:mn>1</m:mn></m:msub></m:math>, <span>&#8230;</span>, <m:math><m:msub><m:mi>e</m:mi><m:mi>n</m:mi></m:msub></m:math>  is encoded as <small><code>&lt;OMA&gt;</code></small>
  <m:math><m:msub><m:mi>C</m:mi><m:mn>0</m:mn></m:msub></m:math>  <m:math><m:msub><m:mi>C</m:mi><m:mn>1</m:mn></m:msub></m:math><span>&#8230;</span> <m:math><m:msub><m:mi>C</m:mi><m:mi>n</m:mi></m:msub></m:math>  <small><code>&lt;/OMA&gt;</code></small> where <m:math><m:msub><m:mi>C</m:mi><m:mi>i</m:mi></m:msub></m:math>  is the encoding of
  <m:math><m:msub><m:mi>e</m:mi><m:mi>i</m:mi></m:msub></m:math>.</p>

<p>For example, <m:math><m:mi mathvariant="bold">application</m:mi><m:mo>(</m:mo><m:mi>sin</m:mi><m:mo>,</m:mo><m:mi>x</m:mi> <m:mo>)</m:mo></m:math>  is encoded as:
<div class="literal"><pre>&lt;OMA&gt;  
  &lt;OMS cdbase="http://www.openmath.org/cd" cd="transc1" name="sin"/&gt; 
  &lt;OMV name="x"/&gt;  
&lt;/OMA&gt;</pre></div>
  provided that the symbol <small><code>sin</code></small> is defined to be a function
  symbol in a Content Dictionary named <small><code>transc1</code></small>.</p>

  
</dd>

<dt>Binding</dt><dd><p>is encoded using the <small><code>OMBIND</code></small> element.  The binding
  by the <i>OpenMath</i> object <m:math><m:mi>b</m:mi></m:math>  of the <i>OpenMath</i> variables <m:math><m:msub><m:mi>x</m:mi><m:mn>1</m:mn></m:msub></m:math>, <m:math><m:msub><m:mi>x</m:mi><m:mn>2</m:mn></m:msub></m:math>,
  <m:math><m:mi>&#8230;</m:mi></m:math>, <m:math><m:msub><m:mi>x</m:mi><m:mi>n</m:mi></m:msub></m:math>  in the object <m:math><m:mi>c</m:mi></m:math>  is encoded as <small><code>&lt;OMBIND&gt;</code></small> <m:math><m:mi>B</m:mi></m:math> 
  <small><code>&lt;OMBVAR&gt;</code></small> <m:math><m:msub><m:mi>X</m:mi><m:mn>1</m:mn></m:msub></m:math>  <m:math><m:mi>&#8230;</m:mi></m:math>  <m:math><m:msub><m:mi>X</m:mi><m:mi>n</m:mi></m:msub></m:math>  <small><code>&lt;/OMBVAR&gt;</code></small> <m:math><m:mi>C</m:mi></m:math>  <small><code>&lt;/OMBIND&gt;</code></small> where <m:math><m:mi>B</m:mi></m:math>, <m:math><m:mi>C</m:mi></m:math>, and <m:math><m:msub><m:mi>X</m:mi><m:mi>i</m:mi></m:msub></m:math>  are the encodings of <m:math><m:mi>b</m:mi></m:math>, <m:math><m:mi>c</m:mi></m:math> 
  and <m:math><m:msub><m:mi>x</m:mi><m:mi>i</m:mi></m:msub></m:math>, respectively.</p>

<p>For instance the encoding of
  <m:math><m:mi mathvariant="bold">binding</m:mi>
       <m:mo>(</m:mo><m:mi>lambda</m:mi><m:mo>,</m:mo>
  <m:mi>x</m:mi><m:mo>,</m:mo><m:mi mathvariant="bold">application</m:mi>
     <m:mo>(</m:mo><m:mi>sin</m:mi><m:mo>,</m:mo> <m:mi>x</m:mi><m:mo>)</m:mo><m:mo>)</m:mo></m:math>  is:
<div class="literal"><pre>&lt;OMBIND&gt;
  &lt;OMS cdbase="http://www.openmath.org/cd" cd="fns1" name="lambda"/&gt;  
  &lt;OMBVAR&gt;&lt;OMV name="x"/&gt;&lt;/OMBVAR&gt;  
  &lt;OMA&gt;
    &lt;OMS cdbase="http://www.openmath.org/cd" cd="transc1" name="sin"/&gt; 
    &lt;OMV name="x"/&gt;  
  &lt;/OMA&gt;
&lt;/OMBIND&gt;</pre></div></p>
  
<p>Binders are defined in  Content Dictionaries, in particular,
  the symbol <small><code>lambda</code></small> is defined in the Content Dictionary
  <small><code>fns1</code></small> for functions over functions.</p>
  
</dd>

<dt>Attributions</dt><dd><p>are encoded using the <small><code>OMATTR</code></small> element.  If
  the <i>OpenMath</i> object <m:math><m:mi>e</m:mi></m:math>  is attributed with (<m:math><m:msub><m:mi>s</m:mi><m:mn>1</m:mn></m:msub></m:math>, <m:math><m:msub><m:mi>e</m:mi><m:mn>1</m:mn></m:msub></m:math>), <span>&#8230;</span>, 
  (<m:math><m:msub><m:mi>s</m:mi><m:mi>n</m:mi></m:msub></m:math>, <m:math><m:msub><m:mi>e</m:mi><m:mi>n</m:mi></m:msub></m:math>) pairs (where <m:math><m:msub><m:mi>s</m:mi><m:mi>i</m:mi></m:msub></m:math>  are the attributes), it is encoded
  as <small><code>&lt;OMATTR&gt;</code></small> <small><code>&lt;OMATP&gt;</code></small> <m:math><m:msub><m:mi>S</m:mi><m:mn>1</m:mn></m:msub></m:math>  <m:math><m:msub><m:mi>C</m:mi><m:mn>1</m:mn></m:msub></m:math>  <span>&#8230;</span> <m:math><m:msub><m:mi>S</m:mi><m:mi>n</m:mi></m:msub></m:math>  <m:math><m:msub><m:mi>C</m:mi><m:mi>n</m:mi></m:msub></m:math>  <small><code>&lt;/OMATP&gt;</code></small> <m:math><m:mi>E</m:mi></m:math>  <small><code>&lt;/OMATTR&gt;</code></small> where <m:math><m:msub><m:mi>S</m:mi><m:mi>i</m:mi></m:msub></m:math>  is the encoding of the
  symbol <m:math><m:msub><m:mi>s</m:mi><m:mi>i</m:mi></m:msub></m:math>, <m:math><m:msub><m:mi>C</m:mi><m:mi>i</m:mi></m:msub></m:math>  of the object <m:math><m:msub><m:mi>e</m:mi><m:mi>i</m:mi></m:msub></m:math>  and <m:math><m:mi>E</m:mi></m:math>  is the encoding of
  <m:math><m:mi>e</m:mi></m:math>.</p>

<p>Examples are the use of attribution to decorate a group by its
  automorphism group:
<div class="literal"><pre>&lt;OMATTR&gt;    
  &lt;OMATP&gt;
    &lt;OMS cd="groups" name="automorphism_group" /&gt;  
    [..group-encoding..] 
  &lt;/OMATP&gt;  
  [..group-encoding..] 
&lt;/OMATTR&gt;</pre></div>
or to express the type of a variable:
<div class="literal"><pre>&lt;OMATTR&gt;    
  &lt;OMATP&gt;
    &lt;OMS cd="ecc" name="type" /&gt; 
    &lt;OMS cd="ecc" name="real" /&gt;
  &lt;/OMATP&gt; 
  &lt;OMV name="x" /&gt;
&lt;/OMATTR&gt;</pre></div></p>

  
<p>
A special use of attributions is to associate non-<i>OpenMath</i> data with an
<i>OpenMath</i> object.  This is done using the
<small><code>OMFOREIGN</code></small> element.  The children of this
element must be well-formed <span>xml</span>.  For example the attribution of the
<i>OpenMath</i> object 
  <m:math>
     <m:mi>sin</m:mi><m:mfenced><m:mi>x</m:mi></m:mfenced></m:math>  with its
representation in Presentation MathML is:
<div class="literal"><pre>&lt;OMATTR&gt;
  &lt;OMATP&gt;
    &lt;OMS cd="presentation1" name="mathml"/&gt;  
    &lt;OMFOREIGN&gt;
      &lt;math xmlns="http://www.w3.org/1998/Math/MathML"&gt;
        &lt;mi&gt;sin&lt;/mi&gt;&lt;mfenced&gt;&lt;mi&gt;x&lt;/mi&gt;&lt;/mfenced&gt;
      &lt;/math&gt;
    &lt;/OMFOREIGN&gt;  
  &lt;/OMATP&gt;
  &lt;OMA&gt;
   &lt;OMS cdbase="http://www.openmath.org/cd" cd="transc1" name="sin"/&gt; 
   &lt;OMV name="x"/&gt;  
  &lt;/OMA&gt;
&lt;/OMATTR&gt;</pre></div>
Of course not everything has a natural XML encoding in this way and
often the contents of a <small><code>OMFOREIGN</code></small> will just
be data or some kind of encoded string.  For example the attribution
of the previous object with its LaTeX representation could be achieved
as follows:
<div class="literal"><pre>&lt;OMATTR&gt;
  &lt;OMATP&gt;
    &lt;OMS cd="presentation1" name="latex"/&gt;  
    &lt;OMFOREIGN&gt;sin\,(x)&lt;/OMFOREIGN&gt;  
  &lt;/OMATP&gt;
  &lt;OMA&gt;
    &lt;OMS cdbase="http://www.openmath.org/cd" cd="transc1" name="sin"/&gt; 
    &lt;OMV name="x"/&gt;  
  &lt;/OMA&gt;
&lt;/OMATTR&gt;</pre></div>
</p>
</dd>




 <dt>Errors</dt> 
 <dd><p>are encoded using the <small><code>OME</code></small> element. The error whose
  symbol is <m:math><m:mi>s</m:mi></m:math>  and whose arguments are the <i>OpenMath</i> objects <m:math><m:msub><m:mi>e</m:mi><m:mn>1</m:mn></m:msub></m:math>,
  <span>&#8230;</span>, <m:math><m:msub><m:mi>e</m:mi><m:mi>n</m:mi></m:msub></m:math>  is encoded as <small><code>&lt;OME&gt;</code></small> <m:math><m:msub><m:mi>C</m:mi><m:mi>s</m:mi></m:msub></m:math>  <m:math><m:msub><m:mi>C</m:mi><m:mn>1</m:mn></m:msub></m:math><span>&#8230;</span> <m:math><m:msub><m:mi>C</m:mi><m:mi>n</m:mi></m:msub></m:math>  <small><code>&lt;/OME&gt;</code></small> where <m:math><m:msub><m:mi>C</m:mi><m:mi>s</m:mi></m:msub></m:math>  is the encoding of <m:math><m:mi>s</m:mi></m:math>  and <m:math><m:msub><m:mi>C</m:mi><m:mi>i</m:mi></m:msub></m:math>  the encoding
  of <m:math><m:msub><m:mi>e</m:mi><m:mi>i</m:mi></m:msub></m:math>.</p>

<p>If an <small><code>aritherror</code></small> Content Dictionary contained a
  <small><code>DivisionByZero</code></small> symbol, then the object
  <m:math><m:mi mathvariant="bold">error</m:mi><m:mo>(</m:mo><m:mi>DivisionByZero</m:mi><m:mo>,</m:mo> <m:mi mathvariant="bold">application</m:mi>
  <m:mo>(</m:mo><m:mi>divide</m:mi><m:mo>,</m:mo> 
  <m:mi>x</m:mi><m:mo>,</m:mo> <m:mn>0</m:mn><m:mo>)</m:mo><m:mo>)</m:mo></m:math>  would be encoded as follows:

<div class="literal"><pre>&lt;OME&gt;
  &lt;OMS cd="aritherror" name="DivisionByZero"/&gt;  
  &lt;OMA&gt;
    &lt;OMS cd="arith1" name="divide" /&gt;
    &lt;OMV name="x"/&gt;  
    &lt;OMI&gt; 0 &lt;/OMI&gt;
  &lt;/OMA&gt; 
 &lt;/OME&gt;</pre></div></p>
  
</dd>



 <dt>References</dt>
 <dd><p>
 <i>OpenMath</i> integers, floating point numbers, character strings,
 byearrays, applications, binding, attributions can also be encoded
 as an empty <small><code>OMR</code></small> element with an <small><code>xlink:href</code></small>
 attribute whose value is the value of an id attribute of an <i>OpenMath</i> object of
 that type. The <i>OpenMath</i> element represented by this <small><code>OMR</code></small>
 element is a copy of the <i>OpenMath</i> element pointed to in the
 <small><code>xlink:xref</code></small> attribute. Note that the representation of the
 <small><code>OMR</code></small>
 element is <i>structurally equal</i>, but not identical
 to the element it points to. </p>

 <p>For instance, the <i>OpenMath</i> object

 <m:math display="block">
   <m:mrow>
     <m:mi mathvariant="bold">application</m:mi>
     <m:mrow>
       <m:mo fence="true">(</m:mo>
       <m:mrow>
         <m:mi>f</m:mi>
         <m:mo separator="true">,</m:mo>
         <m:mi mathvariant="bold">application</m:mi>
         <m:mrow>
           <m:mo fence="true">(</m:mo>
           <m:mrow>
             <m:mi>f</m:mi>
             <m:mo separator="true">,</m:mo>
             <m:mi mathvariant="bold">application</m:mi>
             <m:mrow>
               <m:mo fence="true">(</m:mo>
               <m:mrow><m:mi>f</m:mi><m:mo separator="true">,</m:mo><m:mi>a</m:mi><m:mo separator="true">,</m:mo><m:mi>a</m:mi></m:mrow>
               <m:mo fence="true">)</m:mo>
             </m:mrow>
             <m:mo separator="true">,</m:mo>
             <m:mi mathvariant="bold">application</m:mi>
             <m:mrow>
               <m:mo fence="true">(</m:mo>
               <m:mrow><m:mi>f</m:mi><m:mo separator="true">,</m:mo><m:mi>a</m:mi><m:mo separator="true">,</m:mo><m:mi>a</m:mi></m:mrow>
               <m:mo fence="true">)</m:mo>
             </m:mrow>
             <m:mo fence="true">)</m:mo>
           </m:mrow>
           <m:mo separator="true">,</m:mo>
           <m:mi mathvariant="bold">application</m:mi>
           <m:mrow>
             <m:mo fence="true">(</m:mo>
             <m:mrow>
               <m:mi>f</m:mi>
               <m:mo separator="true">,</m:mo>
               <m:mi mathvariant="bold">application</m:mi>
               <m:mrow>
                 <m:mo fence="true">(</m:mo>
                 <m:mrow><m:mi>f</m:mi><m:mo separator="true">,</m:mo><m:mi>a</m:mi><m:mo separator="true">,</m:mo><m:mi>a</m:mi></m:mrow>
                 <m:mo fence="true">)</m:mo>
               </m:mrow>
               <m:mo separator="true">,</m:mo>
               <m:mi mathvariant="bold">application</m:mi>
               <m:mrow>
                 <m:mo fence="true">(</m:mo>
                 <m:mrow><m:mi>f</m:mi><m:mo separator="true">,</m:mo><m:mi>a</m:mi><m:mo separator="true">,</m:mo><m:mi>a</m:mi></m:mrow>
                 <m:mo fence="true">)</m:mo>
               </m:mrow>
               <m:mo fence="true">)</m:mo>
             </m:mrow>
           </m:mrow>
           <m:mo fence="true">)</m:mo>
         </m:mrow>
       </m:mrow>
     </m:mrow>
   </m:mrow>
 </m:math>
</p>
<p>can be encoded in the <span>xml</span> encoding as either one of the <span>xml</span> encodings
below (and some intermedidate versions as well).</p>

<div class="figure"><a name="fig_shared_vs_unshared" id="fig_shared_vs_unshared"/>
    
    
 <div class="literal"><pre>&lt;OMOBJ&gt;                      &lt;OMOBJ&gt;
  &lt;OMA&gt;                         &lt;OMA xmlns:xlink="http://www.w3.org/1999/xlink"&gt;
    &lt;OMV name="f"/&gt;               &lt;OMV name="f"/&gt; 
    &lt;OMA&gt;                         &lt;OMA id="t1"&gt;
      &lt;OMV name="f"/&gt;               &lt;OMV name="f"/&gt;
      &lt;OMA&gt;                         &lt;OMA id="t11"&gt;
        &lt;OMV name="f"/&gt;               &lt;OMV name="f"/&gt;
        &lt;OMV name="a"/&gt;               &lt;OMV name="a"/&gt;
        &lt;OMV name="a"/&gt;               &lt;OMV name="a"/&gt;
      &lt;/OMA&gt;                        &lt;/OMA&gt;
      &lt;OMA&gt;                         &lt;OMR xlink:href="t11"/&gt;
        &lt;OMV name="f"/&gt;
        &lt;OMV name="a"/&gt; 
        &lt;OMV name="a"/&gt;
      &lt;/OMA&gt;                                
    &lt;/OMA&gt;                      &lt;/OMA&gt;
    &lt;OMA&gt;                       &lt;OMR xlink:href="t1"/&gt;
      &lt;OMV name="f"/&gt;
      &lt;OMA&gt;
        &lt;OMV name="f"/&gt;
        &lt;OMV name="a"/&gt;
        &lt;OMV name="a"/&gt;
      &lt;/OMA&gt;
      &lt;OMA&gt;
        &lt;OMV name="f"/&gt;
        &lt;OMV name="a"/&gt;
        &lt;OMV name="a"/&gt;
      &lt;/OMA&gt;
    &lt;/OMA&gt;
  &lt;/OMA&gt;
&lt;/OMOBJ&gt;                     &lt;/OMOBJ&gt;
</pre></div>
<div>
  Figure 4.1 Shared vs. unshared representations</div></div>

<p>We say that an <i>OpenMath</i> element dominates all its children and all elements
they dominate. An <small><code>OMR</code></small> element dominates its target,
i.e. the element that carries the <small><code>id</code></small> attribute pointed to
by the <small><code>xref</code></small> attribute. For instance in the representation
in Figure <a href="#fig_shared_vs_unshared">Figure 4.1</a>, the
<small><code>OMA</code></small> element with <small><code>id="t1"</code></small> and
also the second <small><code>OMR</code></small> dominate the
<small><code>OMA</code></small> element with <small><code>id="t11"</code></small>.
</p> </dd>  </dl>

<div><h5 name="sec_acyclicity" id="sec_acyclicity">4.1.2.1 An Acyclicity Constraint</h5>


<p>The occurrences of the <small><code>OMR</code></small> element must obey the following global
<i>acyclicity constraint</i>: An <i>OpenMath</i> element may not dominate itself.</p>

<p>Consider for instance the following (illegal) <span>xml</span> representation
<div class="literal"><pre>&lt;OMOBJ&gt;
  &lt;OMA id="foo"&gt;
    &lt;OMS cdbase="http://www.openmath.org/cd" cd="arith1" name="divide"/&gt;
    &lt;OMI&gt;1&lt;/OMI&gt;
    &lt;OMA&gt;
       &lt;OMS cdbase="http://www.openmath.org/cd" cd="arith1" name="plus"/&gt;
       &lt;OMI&gt;1&lt;/OMI&gt;
       &lt;OMR xref="foo"/&gt;
    &lt;/OMA&gt; 
  &lt;/OMA&gt;
&lt;/OMOBJ&gt;
</pre></div>
</p>

<p>Here, the <small><code>OMA</code></small> element with
<small><code>id="foo"</code></small> dominates its third child, which dominates the
<small><code>OMR</code></small> element, which dominates its target: the element with
<small><code>id="foo"</code></small>. So by transitivity, this element dominates itself, and
by the acyclicity constraint, it is not the <span>xml</span> representation of an <i>OpenMath</i>
element. Even though it could be given the interpretation of the continued fraction
<m:math display="block">
 <m:mfrac>
   <m:mn>1</m:mn>
   <m:mrow>
     <m:mn>1</m:mn>
     <m:mo>+</m:mo>
     <m:mfrac>
       <m:mn>1</m:mn>
       <m:mrow>
         <m:mn>1</m:mn>
         <m:mo>+</m:mo>
         <m:mfrac><m:mn>1</m:mn><m:mi>...</m:mi></m:mfrac>
       </m:mrow>
     </m:mfrac>
   </m:mrow>
 </m:mfrac>
</m:math> this would correspond to an infinite tree of applications,
which is not admitted by the structure of <i>OpenMath</i> objects described
in <a href="#cha_obj">Chapter 3</a>.</p>

<p>Note that the acyclicity constraints is not restricted to such simple
cases, as the following example shows.</p>

<p><div class="literal"><pre>&lt;OMOBJ&gt;                                &lt;OMOBJ&gt;
  &lt;OMA id="bar"&gt;                         &lt;OMA id="baz"&gt;
    &lt;OMS cd="arith1" name="plus"/&gt;         &lt;OMS cd="arith1" name="plus"/&gt;
    &lt;OMI&gt;1&lt;/OMI&gt;                           &lt;OMI&gt;1&lt;/OMI&gt;
    &lt;OMR xref="baz"/&gt;                      &lt;OMR xref="bar"/&gt;
  &lt;/OMA&gt;                                 &lt;/OMA&gt;
&lt;/OMOBJ&gt;                               &lt;/OMOBJ&gt;
</pre></div></p>

<p> Here, the <small><code>OMA</code></small> with
<small><code>id="bar"</code></small> dominates its third child, the
<small><code>OMR</code></small> with <small><code>xref="baz"</code></small>,
which dominates its target <small><code>OMA</code></small> with
<small><code>id="baz"</code></small>, which in turn dominates its third
child, the <small><code>OMR</code></small> with
<small><code>xref="bar"</code></small>, this finally dominates its
target, the original <small><code>OMA</code></small> element with
<small><code>id="bar"</code></small>. So this pair of <i>OpenMath</i> objects
violates the acyclicity constraint and is not the <span>xml</span>
representation of an <i>OpenMath</i> object.</p>
</div>


<div><h5 name="sec_sharing_bvars" id="sec_sharing_bvars">4.1.2.2 Sharing and Bound Variables</h5>


<p>Note that the <small><code>OMR</code></small> element is a
<i>syntactic</i> referencing mechanism: an
<small><code>OMR</code></small> element stands for the exact <span>xml</span>
element it points to. In particular, referencing does not interact
with binding in a semantically intuitive way, since it allows for
variable capture. Consider for instance the following <span>xml</span>
representation: <div class="literal"><pre>&lt;OMBIND id="outer"&gt;
  &lt;OMS cdbase="http://www.openmath.org/cd" cd="fns1" name="lambda"/&gt;
  &lt;OMBVAR&gt;&lt;OMV name="X"/&gt;&lt;/OMBVAR&gt;
  &lt;OMA&gt;
    &lt;OMV name="f"/&gt;
    &lt;OMBIND id="inner"&gt;
      &lt;OMS cdbase="http://www.openmath.org/cd" cd="fns1" name="lambda"/&gt;
      &lt;OMBVAR&gt;&lt;OMV name="X"/&gt;&lt;/OMBVAR&gt;
      &lt;OMR id="copy" xlink:href="orig"/&gt;
    &lt;/OMBIND&gt;
    &lt;OMA id="orig"&gt;&lt;OMV name="g"/&gt;&lt;OMV name="X"/&gt;&lt;/OMA&gt;
  &lt;/OMA&gt;
&lt;/OMBIND&gt;
</pre></div>
it represents the <i>OpenMath</i> object
<m:math display="block">
  <m:mi mathvariant="bold">binding</m:mi>
  <m:mrow>
    <m:mo fence="true">(</m:mo>
    <m:mo>&#955;</m:mo>
      <m:mo separator="true">,</m:mo>
    <m:mi>X</m:mi>
    <m:mo separator="true">,</m:mo>
    <m:mrow>
      <m:mi mathvariant="bold">application</m:mi>
      <m:mo fence="true">(</m:mo>
      <m:mi>f</m:mi>
      <m:mo separator="true">,</m:mo>
      <m:mi mathvariant="bold">binding</m:mi>
      <m:mrow>
        <m:mo fence="true">(</m:mo>
        <m:mo>&#955;</m:mo>
        <m:mo separator="true">,</m:mo>
        <m:mi>X</m:mi>
        <m:mo separator="true">,</m:mo>
        <m:mrow>
          <m:mi mathvariant="bold">application</m:mi>
          <m:mo fence="true">(</m:mo>
          <m:mi>g</m:mi>
          <m:mo separator="true">,</m:mo>
          <m:mi>X</m:mi>
          <m:mo fence="true">)</m:mo>
        </m:mrow>
        <m:mo fence="true">)</m:mo>
      </m:mrow>
      <m:mo separator="true">,</m:mo>
      <m:mrow>
        <m:mi mathvariant="bold">application</m:mi>
        <m:mo fence="true">(</m:mo>
        <m:mi>g</m:mi>
        <m:mo separator="true">,</m:mo>
        <m:mi>X</m:mi>
        <m:mo fence="true">)</m:mo>
      </m:mrow>
      <m:mo fence="true">)</m:mo>
    </m:mrow>
    <m:mo fence="true">)</m:mo>
  </m:mrow>
  <m:mo fence="true">)</m:mo> </m:math> which has two subterms of the form
<m:math>
  <m:mi mathvariant="bold">application</m:mi>
  <m:mo fence="true">(</m:mo>
  <m:mi>g</m:mi>
  <m:mo separator="true">,</m:mo>
  <m:mi>X</m:mi>
  <m:mo fence="true">)
  </m:mo> </m:math>, one with <small><code>id="orig"</code></small> (the one explicitly
represented) and one with <small><code>id="copy"</code></small>, represented by the
<small><code>OMR</code></small> element. In the original, the variable
<m:math><m:mi>X</m:mi></m:math>  is bound by the <i>outer</i>
<small><code>OMBIND</code></small> element, and in the copy, the variable
<m:math><m:mi>X</m:mi></m:math>  is bound by the <i>inner</i>
<small><code>OMBIND</code></small> element. We say that the inner
<small><code>OMBIND</code></small> has captured the variable <m:math><m:mi>X</m:mi></m:math>.
</p>

<p>It is well-known that variable capture does not conserve semantics. For
  instance, we could use <m:math><m:mi>&#945;</m:mi></m:math>-conversion to rename the inner occurrence of
  <m:math><m:mi>x</m:mi></m:math>  into - say - 
  <m:math><m:mi>y</m:mi></m:math>  arriving at the (same) object
<m:math display="block">
  <m:mi mathvariant="bold">binding</m:mi>
  <m:mrow>
    <m:mo fence="true">(</m:mo>
    <m:mo>&#955;</m:mo>
      <m:mo separator="true">,</m:mo>
    <m:mi>X</m:mi>
    <m:mo separator="true">,</m:mo>
    <m:mrow>
      <m:mi mathvariant="bold">application</m:mi>
      <m:mo fence="true">(</m:mo>
      <m:mi>f</m:mi>
      <m:mo separator="true">,</m:mo>
      <m:mi mathvariant="bold">binding</m:mi>
      <m:mrow>
        <m:mo fence="true">(</m:mo>
        <m:mo>&#955;</m:mo>
        <m:mo separator="true">,</m:mo>
        <m:mi mathcolor="red">Y</m:mi>
        <m:mo separator="true">,</m:mo>
        <m:mrow>
          <m:mi mathvariant="bold">application</m:mi>
          <m:mo fence="true">(</m:mo>
          <m:mi>g</m:mi>
          <m:mo separator="true">,</m:mo>
          <m:mi mathcolor="red">Y</m:mi>
          <m:mo fence="true">)</m:mo>
        </m:mrow>
        <m:mo fence="true">)</m:mo>
      </m:mrow>
      <m:mo separator="true">,</m:mo>
      <m:mrow>
        <m:mi mathvariant="bold">application</m:mi>
        <m:mo fence="true">(</m:mo>
        <m:mi>g</m:mi>
        <m:mo separator="true">,</m:mo>
        <m:mi>X</m:mi>
        <m:mo fence="true">)</m:mo>
      </m:mrow>
      <m:mo fence="true">)</m:mo>
    </m:mrow>
    <m:mo fence="true">)</m:mo>
  </m:mrow>
  <m:mo fence="true">)</m:mo> </m:math>
 Using references that
capture variables in this way can easily lead to representation errors, and is not
  recommended.
</p>
</div>
</div>

<div><h4 name="xmldoc" id="xmldoc">4.1.3 Embedding <i>OpenMath</i> in <span>xml</span> Documents</h4>


     
<p>The above encoding of <span>xml</span> encoded <i>OpenMath</i> specifies the grammar to be
used in files that encode a single <i>OpenMath</i> object, and specifies the
character streams that a conforming <i>OpenMath</i> application should be able
to accept or produce.</p>

<p>When embedding <span>xml</span> encoded <i>OpenMath</i> objects into a larger <span>xml</span> document
one may wish, or need, to use other <span>xml</span> features. For example use of
extra <span>xml</span> attributes to specify <span>xml</span> Namespaces <a href="#xmlns">[16]</a>
or xml:lang attributes to specify the language used in strings <a href="#xml">[17]</a>.

</p>

 



<p>If such <span>xml</span> features are used then the <span>xml</span> application controlling the
document must, if passing the <i>OpenMath</i> fragment to an <i>OpenMath</i> application,
remove any such extra attributes and must ensure that the
fragment is encoded according to the grammar specified above.</p>
</div>
</div>

<div><h3 name="sec_binary" id="sec_binary">4.2 The Binary Encoding</h3>


<p>The binary encoding was essentially designed to be more compact than
the <span>xml</span> encodings, so that it can be more efficient if large
amounts of data are involved. For the current encoding, we tried to
keep the right balance between compactness, speed of encoding and
decoding and simplicity (to allow a simple specification and easy
implementations).</p>

<div><h4 name="sec_binary_grammar" id="sec_binary_grammar">4.2.1 A Grammar for the Binary Encoding</h4>


     

<div class="figure"><a name="fig_bin-enc" id="fig_bin-enc"/>
    
    
    <table>
          <tr>
            <td>start </td>
            <td><m:math><m:mo>&#8594;</m:mo></m:math></td>
            <td> [24] object [25] </td>
            <td>|</td>
            <td> [24+64] object [25]</td>
          </tr>
          
          <tr>
            <td>object </td>
            <td><m:math><m:mo>&#8594;</m:mo></m:math></td>
            <td> integer </td>
          </tr>
          
          <tr>
            <td/>
            <td>|</td>
            <td> float</td>
          </tr>
          
          <tr>
            <td/>
            <td>|</td>
            <td> variable</td>
          </tr>
          
          <tr>
            <td/>
            <td>|</td>
            <td> indexed_variable</td>
          </tr>
          
          <tr>
            <td/>
            <td>|</td>
            <td> symbol</td>
          </tr>
          
          <tr>
            <td/>
            <td>|</td>
            <td> string</td>
          </tr>
          
          <tr>
            <td/>
            <td>|</td>
            <td> bytearray</td>
          </tr>
          
          <tr>
            <td/>
            <td>|</td>
            <td>foreign</td>
          </tr>
          
          <tr>
            <td/>
            <td>|</td>
            <td> construct</td>
          </tr>
          
          <tr>
            <td/>
            <td>|</td>
            <td>internal_reference</td>
          </tr>
          
          <tr>
            <td/>
            <td>|</td>
            <td>external_reference</td>
          </tr>
          
          <tr>
            <td>integer </td>
            <td><m:math><m:mo>&#8594;</m:mo></m:math></td>
            <td> [1] [_] </td>
            <td>|</td>
            <td> [1+64]
              [<m:math><m:mi>n</m:mi></m:math>]
              id:<m:math><m:mi>n</m:mi></m:math> 
              [_]
            </td>
          </tr>

          <tr>
            <td/>
            <td><m:math><m:mo>|</m:mo></m:math></td>
            <td> [1+32] [_] </td>
            <td/>
            <td/>
          </tr>
          
          <tr>
            <td/>
            <td>|</td>
            <td> [1+128] {_} </td>
            <td>|</td>
            <td> [1+64+128]
              {<m:math><m:mi>n</m:mi></m:math>}
              id:<m:math><m:mi>n</m:mi></m:math> 
              {_}
            </td>
          </tr>

          <tr>
            <td/>
            <td>|</td>
            <td> [1+32+128] {_} </td>
            <td/>
            <td/>
          </tr>

          <tr>
            <td/>
            <td>|</td>
            <td> [2]
              [<m:math><m:mi>n</m:mi></m:math>]
              [_] digits:<m:math><m:mi>n</m:mi></m:math> 
            </td>
            <td>|</td>
            <td> [2+64]
              [<m:math><m:mi>n</m:mi></m:math>]
              [<m:math><m:mi>m</m:mi></m:math>]
              [_] digits:<m:math><m:mi>n</m:mi></m:math> 
              id:<m:math><m:mi>m</m:mi></m:math> 
            </td>
          </tr>

          <tr>
            <td/>
            <td>|</td>
            <td> [2+32]
              [<m:math><m:mi>n</m:mi></m:math>]
              [_] digits:<m:math><m:mi>n</m:mi></m:math> 
            </td>
            <td/>
            <td/>
          </tr>
          
          <tr>
            <td/>
            <td>|</td>
            <td> [2+128]
              {<m:math><m:mi>n</m:mi></m:math>}
              [_] digits:<m:math><m:mi>n</m:mi></m:math> 
            </td>
            <td>|</td>
            <td> [2+64+128]
              {<m:math><m:mi>n</m:mi></m:math>}
              {<m:math><m:mi>n</m:mi></m:math>}
              [_]
              digits:<m:math><m:mi>n</m:mi></m:math> 
              id:<m:math><m:mi>n</m:mi></m:math> 
            </td>
          </tr>
          
          <tr>
            <td/>
            <td>|</td>
            <td> [2+32+128]
              {<m:math><m:mi>n</m:mi></m:math>}
              [_] digits:<m:math><m:mi>n</m:mi></m:math> 
            </td>
            <td/>
            <td/>
          </tr>
          
          <tr>
            <td>float </td>
            <td><m:math><m:mo>&#8594;</m:mo></m:math></td>
            <td> [3] {_}{_} </td>
            <td>|</td>
            <td> [3+64]
              [<m:math><m:mi>n</m:mi></m:math>]
              id:<m:math><m:mi>n</m:mi></m:math> 
              {_}{_}</td>
          </tr>
          
          <tr>
            <td>variable </td>
            <td><m:math><m:mo>&#8594;</m:mo></m:math></td>
            <td> [5]
              [<m:math><m:mi>n</m:mi></m:math>]
              varname:<m:math><m:mi>n</m:mi></m:math> 
            </td>
            <td>|</td>
            <td> [5+64]
              [<m:math><m:mi>n</m:mi></m:math>]
              [<m:math><m:mi>m</m:mi></m:math>]
              varname:<m:math><m:mi>n</m:mi></m:math> 
              id:<m:math><m:mi>m</m:mi></m:math> 
            </td>
          </tr>
          
          <tr>
            <td/>
            <td>|</td>
            <td> [5+128]
              {<m:math><m:mi>n</m:mi></m:math>}
              varname:<m:math><m:mi>n</m:mi></m:math> 
            </td>
            <td>|</td>
            <td> [5+64+128]
              {<m:math><m:mi>n</m:mi></m:math>}
              {<m:math><m:mi>m</m:mi></m:math>}
              varname:<m:math><m:mi>n</m:mi></m:math> 
              id:<m:math><m:mi>m</m:mi></m:math> 
            </td>
          </tr>
          
          <tr>
            <td>indexed_variable</td>
            <td><m:math><m:mo>&#8594;</m:mo></m:math></td>
            <td> [10]
              [<m:math><m:mi>n</m:mi></m:math>]
              varname:<m:math><m:mi>n</m:mi></m:math> 
              object [11]
            </td>
            <td><m:math><m:mo>|</m:mo></m:math></td>
            <td> [10+64]
              [<m:math><m:mi>n</m:mi></m:math>]
              [<m:math><m:mi>m</m:mi></m:math>]
              varname:<m:math><m:mi>n</m:mi></m:math> 
              id:<m:math><m:mi>m</m:mi></m:math> 
              object [11]
            </td>
          </tr>
          
          
          <tr>
            <td/>
            <td><m:math><m:mo>|</m:mo></m:math></td>
            <td> [10+128]
              {<m:math><m:mi>n</m:mi></m:math>}
              varname:<m:math><m:mi>n</m:mi></m:math> 
              object [11]
            </td>
            <td><m:math><m:mo>|</m:mo></m:math></td>
            <td> [10+64+128]
              {<m:math><m:mi>n</m:mi></m:math>}
              {<m:math><m:mi>m</m:mi></m:math>}
              varname:<m:math><m:mi>n</m:mi></m:math> 
              id:<m:math><m:mi>m</m:mi></m:math> 
              object [11]
            </td>
          </tr>
          
          <tr>
            <td>symbol</td>
            <td><m:math><m:mo>&#8594;</m:mo></m:math></td>
            <td> [8]
              [<m:math><m:mi>n</m:mi></m:math>]
              [<m:math><m:mi>m</m:mi></m:math>]
              cdname:<m:math><m:mi>n</m:mi></m:math> 
              symbname:<m:math><m:mi>m</m:mi></m:math> 
            </td>
            <td>|</td>
            <td> [8+64]
              [<m:math><m:mi>n</m:mi></m:math>]
              [<m:math><m:mi>m</m:mi></m:math>]
              [<m:math><m:mi>k</m:mi></m:math>]
              cdname:<m:math><m:mi>n</m:mi></m:math> 
              symbname:<m:math><m:mi>m</m:mi></m:math> 
              id:<m:math><m:mi>k</m:mi></m:math> 
            </td>
          </tr>
          
          <tr>
            <td/>
            <td>|</td>
            <td> [8+128]
              {<m:math><m:mi>n</m:mi></m:math>}
              {<m:math><m:mi>m</m:mi></m:math>}
              cdname:<m:math><m:mi>n</m:mi></m:math> 
              symbname:<m:math><m:mi>m</m:mi></m:math> 
            </td>
            <td>|</td>
            <td> [8+64+128]
              {<m:math><m:mi>n</m:mi></m:math>}
              {<m:math><m:mi>m</m:mi></m:math>}
              {<m:math><m:mi>k</m:mi></m:math>}
              cdname:<m:math><m:mi>n</m:mi></m:math> 
              symbname:<m:math><m:mi>m</m:mi></m:math> 
              id:<m:math><m:mi>k</m:mi></m:math></td>
          </tr>
          
          <tr>
            <td/>
            <td>|</td>
            <td> [9]
              [<m:math><m:mi>n</m:mi></m:math>]
              [<m:math><m:mi>m</m:mi></m:math>]
              [<m:math><m:mi>k</m:mi></m:math>]
              cdname:<m:math><m:mi>n</m:mi></m:math> 
              symbname:<m:math><m:mi>m</m:mi></m:math> 
              uri:<m:math><m:mi>k</m:mi></m:math> 
            </td>
            <td>|</td>
            <td> [9+64]
              [<m:math><m:mi>n</m:mi></m:math>]
              [<m:math><m:mi>m</m:mi></m:math>]
              [<m:math><m:mi>k</m:mi></m:math>]
              [<m:math><m:mi>l</m:mi></m:math>]
              cdname:<m:math><m:mi>n</m:mi></m:math> 
              symbname:<m:math><m:mi>m</m:mi></m:math> 
              uri:<m:math><m:mi>k</m:mi></m:math> 
              id:<m:math><m:mi>l</m:mi></m:math> 
            </td>
          </tr>
          
          <tr>
            <td/>
            <td>|</td>
            <td> [9+128]
              {<m:math><m:mi>n</m:mi></m:math>}
              {<m:math><m:mi>m</m:mi></m:math>}
              {<m:math><m:mi>k</m:mi></m:math>}
              cdname:<m:math><m:mi>n</m:mi></m:math> 
              symbname:<m:math><m:mi>m</m:mi></m:math> 
              uri:<m:math><m:mi>k</m:mi></m:math> 
            </td>
            <td>|</td>
            <td> [9+64+128]
              {<m:math><m:mi>n</m:mi></m:math>}
              {<m:math><m:mi>m</m:mi></m:math>}
              {<m:math><m:mi>k</m:mi></m:math>}
              {<m:math><m:mi>l</m:mi></m:math>}
              cdname:<m:math><m:mi>n</m:mi></m:math> 
              symbname:<m:math><m:mi>m</m:mi></m:math> 
              uri:<m:math><m:mi>k</m:mi></m:math> 
            id:<m:math><m:mi>l</m:mi></m:math></td>
          </tr>
          
          <tr>
            <td>string </td>
            <td><m:math><m:mo>&#8594;</m:mo></m:math></td>
            <td> [6]
              [<m:math><m:mi>n</m:mi></m:math>]
              
              <span>bytes</span>:<m:math><m:mi>n</m:mi></m:math> 
            </td>
            <td>|</td>
            <td> [6+64]
              [<m:math><m:mi>n</m:mi></m:math>]
              
              <span>bytes</span>:<m:math><m:mi>n</m:mi></m:math> 
            </td>
          </tr>
          
          <tr>
            <td/>
            <td><m:math><m:mo>|</m:mo></m:math></td>
            <td> [6+32]
              [<m:math><m:mi>n</m:mi></m:math>]
              <span>bytes</span>:<m:math><m:mi>n</m:mi></m:math> 
            </td>
            <td/>
            <td/>
          </tr>
          
          <tr>
            <td/>
            <td>|</td>
            <td> [6+128]
              {<m:math><m:mi>n</m:mi></m:math>}
              
              <span>bytes</span>:<m:math><m:mi>n</m:mi></m:math> 
            </td>
            <td>|</td>
            <td> [6+64+128]
              {<m:math><m:mi>n</m:mi></m:math>}
              {<m:math><m:mi>m</m:mi></m:math>}
              
              <span>bytes</span>:<m:math><m:mi>n</m:mi></m:math> 
              id:<m:math><m:mi>m</m:mi></m:math> 
            </td>
          </tr>
          
          <tr>
            <td/>
            <td>|</td>
            <td> [6+32+128]
              {<m:math><m:mi>n</m:mi></m:math>}
              <span>bytes</span>:<m:math><m:mi>n</m:mi></m:math> 
            </td>
            <td/>
            <td/>
          </tr>
          
          <tr>
            <td/>
            <td>|</td>
            <td> [7]
              [<m:math><m:mi>n</m:mi></m:math>]
              
              <span>bytes</span>:<m:math><m:mn>2</m:mn><m:mi>n</m:mi></m:math> 
            </td>
            <td>|</td>
            <td> [7+64]
              [<m:math><m:mi>n</m:mi></m:math>]
              [<m:math><m:mi>m</m:mi></m:math>]
              
              <span>bytes</span>:<m:math><m:mn/><m:mi>n</m:mi></m:math> 
              id:<m:math><m:mi>m</m:mi></m:math> 
            </td>
          </tr>
          
          <tr>
            <td/>
            <td>|</td>
            <td> [7+32]
              [<m:math><m:mi>n</m:mi></m:math>]
              <span>bytes</span>:<m:math><m:mn>2</m:mn><m:mi>n</m:mi></m:math> 
            </td>
            <td/>
            <td/>
          </tr>
          
          <tr>
            <td/>
            <td>|</td>
            <td> [7+128]
              {<m:math><m:mi>n</m:mi></m:math>}
              
              <span>bytes</span>:<m:math><m:mn>2</m:mn><m:mi>n</m:mi></m:math> 
            </td>
            <td>|</td>
            <td> [7+64+128]
              {<m:math><m:mi>n</m:mi></m:math>}
              {<m:math><m:mi>m</m:mi></m:math>}
              
              <span>bytes</span>:<m:math><m:mn>2</m:mn><m:mi>n</m:mi></m:math> 
              id:<m:math><m:mi>m</m:mi></m:math> 
            </td>
          </tr>
          
          
          <tr>
            <td/>
            <td>|</td>
            <td> [7+32+128]
              {<m:math><m:mi>n</m:mi></m:math>}
              <span>bytes</span>:<m:math><m:mn>2</m:mn><m:mi>n</m:mi></m:math> 
            </td>
            <td/>
            <td/>
          </tr>
          
          <tr>
            <td>bytearray </td>
            <td><m:math><m:mo>&#8594;</m:mo></m:math></td>
            <td> [4]
              [<m:math><m:mi>n</m:mi></m:math>]
              bytes:<m:math><m:mi>n</m:mi></m:math> 
            </td>
            <td>|</td>
            <td> [4+64]
              [<m:math><m:mi>n</m:mi></m:math>]
              [<m:math><m:mi>m</m:mi></m:math>]
              bytes:<m:math><m:mi>n</m:mi></m:math> 
              id:<m:math><m:mi>m</m:mi></m:math> 
            </td>
          </tr>
          
          <tr>
            <td/>
            <td><m:math><m:mo>|</m:mo></m:math></td>
            <td> [4+32]
              [<m:math><m:mi>n</m:mi></m:math>]
              bytes:<m:math><m:mi>n</m:mi></m:math> 
            </td>
            <td/>
            <td/>
          </tr>
          
          <tr>
            <td/>
            <td>|</td>
            <td> [4+128]
              {<m:math><m:mi>n</m:mi></m:math>}
              bytes:<m:math><m:mi>n</m:mi></m:math> 
            </td>
            <td>|</td>
            <td> [4+64+128]
              {<m:math><m:mi>n</m:mi></m:math>}
              {<m:math><m:mi>m</m:mi></m:math>}
              bytes:<m:math><m:mi>n</m:mi></m:math> 
              id:<m:math><m:mi>m</m:mi></m:math> 
            </td>
          </tr>
          
          
          <tr>
            <td/>
            <td>|</td>
            <td> [4+32+128]
              {<m:math><m:mi>n</m:mi></m:math>}
              bytes:<m:math><m:mi>n</m:mi></m:math> 
            </td>
            <td/>
            <td/>
          </tr>
          
          <tr>
            <td>foreign</td>
            <td><m:math><m:mo>&#8594;</m:mo></m:math></td>
            <td> [12]
              [<m:math><m:mi>n</m:mi></m:math>]
              bytes:<m:math><m:mi>n</m:mi></m:math> 
            </td>
            <td>|</td>
            <td> [12+64]
              [<m:math><m:mi>n</m:mi></m:math>]
              [<m:math><m:mi>m</m:mi></m:math>]
              bytes:<m:math><m:mi>n</m:mi></m:math> 
              id:<m:math><m:mi>m</m:mi></m:math> 
            </td>
          </tr>
          
          <tr>
            <td/>
            <td><m:math><m:mo>|</m:mo></m:math></td>
            <td> [12+32]
              [<m:math><m:mi>n</m:mi></m:math>]
              bytes:<m:math><m:mi>n</m:mi></m:math> 
            </td>
            <td/>
            <td/>
          </tr>
          
          <tr>
            <td/>
            <td>|</td>
            <td> [12+128]
              {<m:math><m:mi>n</m:mi></m:math>}
              bytes:<m:math><m:mi>n</m:mi></m:math> 
            </td>
            <td>|</td>
            <td> [12+64+128]
              {<m:math><m:mi>n</m:mi></m:math>}
              {<m:math><m:mi>m</m:mi></m:math>}
              bytes:<m:math><m:mi>n</m:mi></m:math> 
              id:<m:math><m:mi>m</m:mi></m:math> 
            </td>
          </tr>
          
          <tr>
            <td/>
            <td>|</td>
            <td> [12+32+128]
              {<m:math><m:mi>n</m:mi></m:math>}
              bytes:<m:math><m:mi>n</m:mi></m:math> 
            </td>
            <td/>
            <td/>
          </tr>
          
          <tr>
            <td>construct </td>
            <td><m:math><m:mo>&#8594;</m:mo></m:math></td>
            <td> [16] object objects [17] </td>
            <td>|</td>
            <td> [16+64]
              {<m:math><m:mi>m</m:mi></m:math>}
              id:<m:math><m:mi>m</m:mi></m:math> 
              object objects [17]
            </td>
          </tr>
          
          <tr>
            <td/>
            <td>|</td>
            <td> [22] symbol objects [23] </td>
            <td>|</td>
            <td> [22+64]
              {<m:math><m:mi>m</m:mi></m:math>}
              id:<m:math><m:mi>m</m:mi></m:math> 
              symbol objects [23]</td>
          </tr>
          
          <tr>
            <td/>
            <td>|</td>
            <td> [18] attrpairs object [19] </td>
            <td>|</td>
            <td> [18+64]
              {<m:math><m:mi>m</m:mi></m:math>}
              id:<m:math><m:mi>m</m:mi></m:math> 
              attrpairs object [19]
            </td>
          </tr>
          
          <tr>
            <td/>
            <td>|</td>
            <td> [26] object bvars object [27] </td>
            <td>|</td>
            <td> [26+64]
              {<m:math><m:mi>m</m:mi></m:math>}
              id:<m:math><m:mi>m</m:mi></m:math> 
              object bvars object [27]
            </td>
          </tr>
          
          <tr>
            <td>attrpairs </td>
            <td><m:math><m:mo>&#8594;</m:mo></m:math></td>
            <td> [20] pairs [21] </td>
            <td>|</td>
            <td> [20+64]
              {<m:math><m:mi>m</m:mi></m:math>}
              id:<m:math><m:mi>m</m:mi></m:math> 
              pairs [21]
            </td>
          </tr>
          
          <tr>
            <td>pairs </td>
            <td><m:math><m:mo>&#8594;</m:mo></m:math></td>
            <td> symbol object</td>
          </tr>
          
          <tr>
            <td/>
            <td>|</td>
            <td> symbol object pairs</td>
          </tr>
          
          <tr>
            <td>bvars </td>
            <td><m:math><m:mo>&#8594;</m:mo></m:math></td>
            <td> [28] vars [29] </td>
            <td>|</td>
            <td> [28+64]
              {<m:math><m:mi>m</m:mi></m:math>}
              id:<m:math><m:mi>m</m:mi></m:math> 
              vars [29]
            </td>
          </tr>
          
          <tr>
            <td>vars </td>
            <td><m:math><m:mo>&#8594;</m:mo></m:math></td>
            <td> attrvar</td>
          </tr>
          
          <tr>
            <td/>
            <td>|</td>
            <td> attrvar vars</td>
          </tr>
          
          <tr>
            <td>attrvar </td>
            <td><m:math><m:mo>&#8594;</m:mo></m:math></td>
            <td> variable</td>
          </tr>
          
          <tr>
            <td/>
            <td>|</td>
            <td> [18] attrpairs attrvar [19] </td>
            <td>|</td>
            <td> [18+64]
              {<m:math><m:mi>m</m:mi></m:math>}
              id:<m:math><m:mi>m</m:mi></m:math> 
              attrpairs attrvar [19]
            </td>
          </tr>
          
          <tr>
            <td>objects </td>
            <td><m:math><m:mo>&#8594;</m:mo></m:math></td>
            <td> object objects</td>
          </tr>
          
          <tr>
            <td>internal_reference </td>
            <td><m:math><m:mo>&#8594;</m:mo></m:math></td>
            <td> [30] [_] </td>
          </tr>
          
          <tr>
            <td/>
            <td>|</td>
            <td> [30+128] {_}</td>
          </tr>
          
          <tr>
            <td>external_reference </td>
            <td><m:math><m:mo>&#8594;</m:mo></m:math></td>
            <td> [31]
              [<m:math><m:mi>n</m:mi></m:math>]
              uri:<m:math><m:mi>n</m:mi></m:math> 
            </td>
          </tr>
          
          <tr>
            <td/>
            <td>|</td>
            <td> [31+128]
              {<m:math><m:mi>n</m:mi></m:math>}
              uri:<m:math><m:mi>n</m:mi></m:math> 
            </td>
          </tr>
        </table>
  <div>
  Figure 4.2 Grammar of the binary encoding of <i>OpenMath</i> objects.</div></div>
  
  <p>Figure <a href="#fig_bin-enc">Figure 4.2</a> gives a grammar for the binary
    encoding <span> (<span>"start"</span> is the start
      symbol).</span>.</p>
  <p>The following conventions are used in this section:
    [<m:math><m:mi>n</m:mi></m:math>] denotes a byte whose value is the integer
    <m:math><m:mi>n</m:mi></m:math>  (<m:math><m:mi>n</m:mi></m:math>  can range from 0 to 255),
    {<m:math><m:mi>m</m:mi></m:math>} denotes four bytes representing the (unsigned) integer
    <m:math><m:mi>m</m:mi></m:math>  in network byte order, [_] denotes an arbitrary byte, {_}
    denotes an arbitrary sequence of four bytes.
    </p>
  
  <p><i>xxxx</i>:<m:math><m:mi>n</m:mi></m:math>,
    where <i>xxxx</i> is one of <i>symbname</i>,
    <i>cdname</i>, <i>varname</i>,
    <i>uri</i>, <i>id</i>, <i>digits</i>, or
    <i>bytes</i> denotes a sequence of <m:math><m:mi>n</m:mi></m:math>  bytes
    that conforms to the constraints on <i>xxxx</i> strings. For
    instance, for <i>symbname</i>, <i>varname</i>, or
    <i>cdname</i>this is the regular expression described in
    <a href="#sec_names">Section 3.3</a>, for <i>uri</i> it is the grammar for
    URIs in <a href="#IETF2396">[9]</a>.</p>
</div>

<div><h4 name="sec_bin-desc" id="sec_bin-desc">4.2.2 Description of the Grammar</h4>
  
  
<p>An <i>OpenMath</i> object is encoded as a sequence of bytes starting with the begin object tag
(
<span>values 24 and 88</span>) and ending with the end
object tag (value 25). These are similar to
the <small><code>&lt;OMOBJ&gt;</code></small> and <small><code>&lt;/OMOBJ&gt;</code></small> tags of
the <span>xml</span> encoding.</p>

<p>The encoding of each kind of <i>OpenMath</i> object begins with a tag that is a single byte,
holding a <span><i>token identifier</i></span>
<span> that describes the kind of object</span> and two flags, the <span><i>long</i></span> flag and the <span><i>shared</i></span> flag. The
identifier is stored in the first 6 bits (1 to 6). The long flag is the eighth bit
<span>and the shared flag is the seventh bit. If the long
  flag is set, this signifies that  the names, strings, and data fields in the
  encoded <i>OpenMath</i> object are longer than 255 byte or characters. The sharing flag
  indicates that the encoded object is shared in another (part of an) object
  somewhere else (see <a href="#sec_sharing_references">Section 4.2.3</a>). Note that if the sharing
  flag is set (in the right column of the grammar in Figure
  <a href="#fig_bin-enc">Figure 4.2</a>, then the encoding includes a representation of
  the identifier.</span>
</p>
<p>To facilitate the stremaing <i>OpenMath</i> objects, some basic
  objects (integers, strings, bytearrays, and foreign objects) have variant
  token identifiers with the fifth bit set. The idea behind this is that these
  basic objects can be split into packets. If the fifth bit is not set, this
  packet is the final packet of the basic object. If the bit is set, then more
  packets of the basic object will follow directly after this one. Note that all
  packets making up a basic object must have the same token identifier (up to the
  fifth bit). 
</p>

<p>Here is a description of the binary encodings of every kind of <i>OpenMath</i> object:

<dl>

  <dt>Integers</dt><dd><p>are encoded depending on how large they
      are. There are four possible formats.  Integers between -128 and 127 are
      encoded as the small integer tags (<span>token identifier</span> 1) followed by a single byte that is the
      value of the integer (interpreted as a signed character). For
      example 16 is encoded as <small><code>0x01 0x10</code></small>.  Integers between
      <m:math>
        <m:msup>
          <m:mn>-2</m:mn>
          <m:mn>31</m:mn>
        </m:msup>
      </m:math> 
      (<m:math><m:mn>-2147483648</m:mn></m:math>) and
      <m:math>
        <m:msup>
          <m:mn>2</m:mn>
          <m:mn>31</m:mn>
        </m:msup>
        <m:mo>-</m:mo>
        <m:mn>1</m:mn>
      </m:math> 
      (<m:math><m:mn>2147483647</m:mn></m:math>) are encoded as
      the small integer tag with the long flag set followed by the integer
      encoded in little endian format on four bytes (network byte order:
      the most significant byte comes first). For example, 128 is encoded
      as <small><code>0x81</code></small> <small><code>0x00000080</code></small>.  The most
      general encoding begins 
      with the big integer tag (token identifier 2) with the long flag set
      if the number of bytes in the encoding of the digits is greater or
      equal than 256. It is followed by the length (in bytes) of the
      sequence of digits, encoded on one byte (0 to 255, if the long flag
      was not set) or four bytes (network byte order, if the long flag was
      set).  It is then followed by a byte describing the sign and the
      base.  This 'sign/base' byte is <small><code>+</code></small> (0x2B) or
      <small><code>-</code></small> (0x2D) 
      for the sign ored with the base mask bits that can be 0 for base 10
      or 0x40 for base 16.  It is followed by the strings of digits (as
      characters) in their natural order (as in the <span>xml</span>
      encoding).  For example, 8589934592
      (<m:math><m:msup><m:mn>2</m:mn><m:mn>33</m:mn></m:msup></m:math>) is encoded <small><code>0x02 
        0x0A 0x2B 0x38353839393334353932</code></small> and
      xfffffff1 is 
      encoded as <small><code>0x02 0x08 0x6b 0x6666666666666631</code></small>.  Note that it is
      permitted to encode a <span>"small"</span> integer in any <span>"bigger"</span>
      format.
    </p>
    <p>To splice sequences of integer packets into
      integers, we have to consider three cases: In the case of token identifiers
      1, 33, and 65 the sequence of packets is treated as a sequence of integer digits
      to the base of <m:math><m:msup><m:mn>2</m:mn><m:mn>7</m:mn></m:msup></m:math>  (most
      significant first). The case of token identifiers 129, 161, and 193 is analogous
      with digits of base <m:math><m:msup><m:mn>2</m:mn><m:mn>31</m:mn></m:msup></m:math>. In the
      case of token identifiers 2, 34, 66, 130, 162, and 194 the integer is assembled by 
      concatenating the string of decimal digits in the packets in sequence order
      (which corresponds to most significant first).  Note that in all cases only
      the sequence-initial packet may contain a signed
      integer. The sign of this packet determines the sign of the overall
      integer.</p>
</dd>



<dt>Symbols</dt>
<dd><p>are encoded as the symbol tags
    (<span>token identifier</span> 8) with the long flag
    set if the maximum of the length <span>in bytes in the UTF-8 encoding</span> of the Content Dictionary name,
    
  the symbol name <span>or the CD base </span>
  is greater than or equal to 256
<span>. The symbol tags [8] and [8+128] are deprecated in <i>OpenMath</i>2 since
  symbols now have an optional <small><code>cdbase</code></small> field, but are
  kept for backwards compatibility. The symbol tag is  followed by the length <span>in bytes in the UTF-8 encoding</span> of the
  Content Dictionary name, the symbol name, and the CD base as a byte (if the long flag was not set)
  or a four byte integers (in network byte order). These are followed by the
  
  <span>bytes of the UTF-8 encoding</span> of the Content Dictionary name, the symbol name, and the CD base.</span></p>
</dd>



<dt>Variables</dt>
<dd><p>are encoded using the variable tags
    (<span>token identifiers</span> 5) with the long
  flag set if the number of bytes in the UTF-8 encoding of the variable name is
  greater than or equal to 256 (this should never happen if the rules
  on variables are followed).  Then, there is the number of characters
  as a byte (if the long flag was not set) or a four byte integer
  (in network byte order), followed by the characters of the name of
  the variable. For example, the variable x is encoded as <small><code>0x05
    0x01 0x78</code></small>.</p>
</dd>



<dt>Indexed Variables</dt>
<dd><p>are encoded using the indexed variable tags
    (token identifiers 10 and 11) as begin and end tags. The long
  flag set on the begin tag if the number of bytes (characters) in the variable name is
  greater than or equal to 256.  The start tag is followed by the number of
  bytes
  as a byte (if the long flag was not set) or a four byte integer
  (in network byte order), followed by the bytes 
  of  the UTF-8 encoding of the name of
  the variable. This is followed by the encoding of an <i>OpenMath</i> object and the end tag
  [11].</p>
</dd>




<dt>Floating-point number</dt>
<dd><p>are encoded using the floating-point
  number tags (<span>token identifier</span> 3) followed by eight bytes that are the IEEE 754
  representation <a href="#ieee754_85">[8]</a>, most significant bytes first. For
  example, 0.1 is encoded as <small><code>0x03 0x000000000000f03f</code></small>.</p>
</dd>



<dt>Character string</dt>
<dd><p>are encoded in two ways depending on whether
  ,
  <span>the string is encoded in
  <span>utf-16</span> or <span>iso-859-1</span>
  (<span>latin-1</span>).
  In the case of <span>latin-1</span></span> it is encoded as the one
  byte character string tags (<span>token identifier</span> 6) with the long flag set if the number
  of bytes (characters) in the string is greater than or equal to 256.
  Then, there is the number of characters as a byte (if the length
  flag was not set) or a four byte integer (in network byte order),
  followed by the characters in the string. If the string <span> is encoded in
  <span>utf-16</span></span>, it is encoded as the two byte character string
  tags (<span>token identifier</span> 7) with the long flag set if the number of characters in the
  string is greater or equal to 256. Then, there is the number of
  <span><span>utf-16</span> units, which will be the
  number of characters unless characters in the higher planes of
  Unicode are used,</span> as a byte (if the long flag was not set) or a four byte
  integer (in network byte order), followed by the characters
  (<span>utf-16</span> encoded  Unicode).</p>

<p>Sequences of string packets are assembled into strings by 
      concatenating the strings in the packets in sequence order.</p>

</dd>



<dt>Bytearrays</dt>
<dd><p>are encoded using the bytearray tags (<span>token identifier</span> 4) with the
  long flag set if the number  elements is
  greater than or equal to 256. Then, there is the number of elements,
  as a byte (if the long flag was not set) or a four byte integer
  (in network byte order), followed by the elements of the arrays in
  their normal order.</p>
<p>Sequences of bytearray packets are assembled into byte arrays by 
      concatenating the bytearrays in the packets in sequence order.</p>

</dd>



<dt>Foreign Objects</dt>
<dd>
  <p>are encoded using the foreign object tags (token identifier 12) with the
  long flag set if the number of bytes is
  greater than or equal to 256. Then, there is the number of elements,
  as a byte (if the long flag was not set) or a four byte integer
  (in network byte order), followed by the elements of the arrays in
  their normal order.</p>
<p>Sequences of foreign object packets are assembled into
  foreign objects by 
      concatenating the bytes in the packets in sequence order.</p>
</dd>



  <dt>Applications</dt>
  <dd><p>are encoded using the application tags (<span>token identifiers</span> 16 and 17). More
  precisely, the application of <m:math><m:msub><m:mi>E</m:mi><m:mn>0</m:mn></m:msub></m:math>  to
  <m:math><m:msub><m:mi>E</m:mi><m:mn>1</m:mn></m:msub></m:math><span>&#8230;</span>
  <m:math><m:msub><m:mi>E</m:mi><m:mi>n</m:mi></m:msub></m:math>  is encoded
  using the application tags (<span>token
    identifier</span> 16), the sequence of the encodings of 
  <m:math><m:msub><m:mi>E</m:mi><m:mn>0</m:mn></m:msub></m:math>  to
  <m:math><m:msub><m:mi>E</m:mi><m:mi>n</m:mi></m:msub></m:math>  and the end application tags
  (<span>token identifier</span> 17).</p> 
</dd>


 
  <dt>Bindings</dt>
  <dd><p>are encoded using the binding
 tags (<span>token identifiers</span> 26 and 27). More precisely,
 the binding by <m:math><m:mi>B</m:mi></m:math>  of variables
 <m:math><m:msub><m:mi>V</m:mi><m:mn>1</m:mn></m:msub></m:math><span>&#8230;</span>
 <m:math><m:msub><m:mi>V</m:mi><m:mi>n</m:mi></m:msub></m:math>  in <m:math><m:mi>C</m:mi></m:math>  is
 encoded as the binding tags (<span>token
 identifier</span> 26), followed by the encoding of <m:math><m:mi>B</m:mi></m:math>,
 followed by the binding variables tags (<span>token
 identifier</span> 28), followed by the encodings of the variables
 <m:math><m:msub><m:mi>V</m:mi><m:mn>1</m:mn></m:msub></m:math>  <span>&#8230;</span>
 <m:math><m:msub><m:mi>V</m:mi><m:mi>n</m:mi></m:msub></m:math>, followed by the end binding
 variables tags (<span>token identifier</span> 29),
 followed by the encoding of <m:math><m:mi>C</m:mi></m:math>, followed by the end binding
 tags (<span>token identifier</span> 27).</p>
 </dd> 


 <dt>Attribution</dt>
 <dd><p>are encoded using the attribution
     tags (<span>token identifiers </span> 18 and 19). More
     precisely, attribution of the object <m:math><m:mi>E</m:mi></m:math>  with
     (<m:math><m:msub><m:mi>S</m:mi><m:mn>1</m:mn></m:msub></m:math>,
     <m:math><m:msub><m:mi>E</m:mi><m:mn>1</m:mn></m:msub></m:math>),
     <m:math><m:mi>&#8230;</m:mi></m:math> 
     (<m:math><m:msub><m:mi>S</m:mi><m:mi>n</m:mi></m:msub></m:math>,
     <m:math><m:msub><m:mi>E</m:mi><m:mi>n</m:mi></m:msub></m:math>) pairs (where
     <m:math><m:msub><m:mi>S</m:mi><m:mi>i</m:mi></m:msub></m:math>  are the attributes) is 
     encoded as the attributed object tags (<span>token
       identifier</span> 18), followed by the encoding 
     of the attribute pairs as the attribute pairs tags
     (<span>token identifier</span> 20), followed by 
     the encoding of each symbol and value, followed by the end attribute
     pairs tags (<span>token identifier</span> 21),
     followed by the encoding of <m:math><m:mi>E</m:mi></m:math>, followed by the end 
     attributed object tags (<span>token identifier</span> 19).</p>
 </dd>



  <dt>Error</dt>
  <dd><p>are encoded using the error tags
      (<span>token identifiers</span> 22 and 23). More precisely, 
  <m:math><m:msub><m:mi>S</m:mi><m:mn>0</m:mn></m:msub></m:math>  applied to
  <m:math><m:msub><m:mi>E</m:mi><m:mn>1</m:mn></m:msub></m:math><span>&#8230;</span>
  <m:math><m:msub><m:mi>E</m:mi><m:mi>n</m:mi></m:msub></m:math>  is encoded as the error tags
  (<span>token identifier</span> 22), 
  the encoding of <m:math><m:msub><m:mi>S</m:mi><m:mn>0</m:mn></m:msub></m:math>, the sequence of
  the encodings of <m:math><m:msub><m:mi>E</m:mi><m:mn>0</m:mn></m:msub></m:math>  to
  <m:math><m:msub><m:mi>E</m:mi><m:mi>n</m:mi></m:msub></m:math>  and the end error tags
  (<span>token identifier</span> 23).</p> 
</dd>



<dt>Internal References</dt>
<dd>
  <p>are encoded using the internal reference tags [30] and [30+128] (the sharing flag cannot
  be set on this tag, since chains of references are not allowed in the <i>OpenMath</i>
  binary encoding.) with   long flag set if the number of <i>OpenMath</i> sub-objects in the
  encoded <i>OpenMath</i> is
  greater than or equal to 256. Then, there is the ordinal number of the
  referenced <i>OpenMath</i> object as a byte (if the long flag was not set) or a four byte integer
  (in network byte order).</p>
</dd>



<dt>External References</dt>
<dd>
  <p>are encoded using the external reference tags [31] and [31+128] (the sharing flag cannot
  be set on this tag, since chains of references are not allowed in the <i>OpenMath</i>
  binary encoding) with the
  long flag set if the number of bytes in the reference URI is
  greater than or equal to 256. Then, there is the number of bytes in the URI used
  for the external reference 
  as a byte (if the long flag was not set) or a four byte integer
  (in network byte order), followed by the URI.</p>
</dd>


</dl> 
</p>

<div><h5 name="sec_sharing" id="sec_sharing">4.2.2.1 Sharing <span>in Objects beginning with the identifier [24]</span></h5>

 
<p>This binary encoding supports the sharing of symbols, variables and strings
(up to a certain length for strings) within one object. That is, sharing between
objects is not supported.  A reference to a shared symbol, variable or string is
encoded as the corresponding tag with the long flag not set and the shared flag
set, followed by a positive integer <m:math><m:mi>n</m:mi></m:math>  coded on one byte (0
to 255). This integer references the <m:math><m:mi>n</m:mi> <m:mo>+</m:mo>
<m:mn>1</m:mn></m:math>-th such sharable sub-object (symbol, variable or string up to
255 characters) in the current <i>OpenMath</i> object (counted in the order they are
generated by the encoding).  For example, <small><code>0x48 0x01</code></small>
references a symbol that is identical to the second symbol that was found in the
current object.  Strings with 8 bit characters and strings with 16 bit characters
are two different kinds of objects for this sharing. Only strings containing less
than 256 characters can be shared (i.e. only strings up to 255 characters).</p>
</div>
</div>

<div><h4 name="sec_sharing_references" id="sec_sharing_references">4.2.3 Sharing with References (beginning with [24+64])</h4>
  

  <p>In the binary encoding specified in the last section (which we keep
for compatibility reasons, but deprecate in favor of the more
efficient binary encoding specified in this section) only symbols,
variables, and short strings could be shared. In this section, we will
present a second binary encoding, which shares most of the identifiers
with the one in the last one, but handles sharing differently. This
  encoding is signaled by the shared object tags [88].</p>

  <p>The main difference is the interpretation of the sharing flag (bit 7),
which can be set on all objects that allow it. Instead of encoding a reference to a
previous occurrence of an object of the same type, it indicates
whether an object will be referenced later in the encoding. This
  corresponds to the information, whether an <small><code>id</code></small>
 attribute is set
in the <span>xml</span> encoding. On the object identifier (where sharing does not
make sense), the shared flag signifies the encoding described here
([88]=[24+64]).
</p>

<p>Otherwise integers, floats, variables, symbols, strings, bytearrays, and constructs
are treated exactly as in the binary encoding described in the last section.</p>

<p>The binary encoding with references uses the additional reference tags [30]
for (short) internal references, [30+128] for long internal references, [31] for
(short) external references, [31+128] for long external references. Internal
references are used to share sub-objects in the encoded object (see <a href="#fig_bin-enc2">Figure 4.3</a> for an example) by referencing their position; external
references allow to reference <i>OpenMath</i> objects in other documents by a URI.</p>

<p>Identifiers [30+64] and [30+64+128] are not used, since they would encode
references that are shared themselves. Chains of references are redundant, and
decrease both space and time efficiency, therefore they are not allowed in the
<i>OpenMath</i> binary encoding.</p>

<p>References consist of the identifier [30] ([30+128] for long references)
followed by a positive integer <m:math><m:mi>n</m:mi></m:math>  coded on one byte (4 bytes for long
references). This integer references the
<m:math><m:mrow><m:mi>n</m:mi><m:mo>+</m:mo><m:mn>1</m:mn></m:mrow></m:math>th shared sub-object (one
where the 
shared flag is set) in the current object (counted in the order they are generated
in the encoding). For example <small><code>Ox7E Ox01</code></small> references the
second shared sub-object. Figure <a href="#fig_bin-enc2">Figure 4.3</a> shows the binary
encoding of the object in figure <a href="#fig_shared_vs_unshared">Figure 4.1</a>
above.</p>


<div class="figure"><a name="fig_bin-enc2" id="fig_bin-enc2"/>
    
<table>
<tr>
<th>Hex </th>
<th>Meaning </th>
<th>Hex </th>
<th>Meaning </th>
</tr>

<tr><td>58</td><td>begin object tag</td>
   <td>05</td><td>variable tag</td></tr>
<tr><td>10</td><td>begin application tag</td>
  <td>01</td><td>variable length</td></tr>
<tr><td>05</td><td>variable tag</td>
  <td>61</td><td>a  (variable name)</td></tr>
<tr><td>01</td><td>variable length</td>
  <td>05</td><td>variable tag</td></tr>
<tr><td>66</td><td>f  (variable name)</td>
  <td>01</td><td>variable length</td></tr>
<tr><td>50</td><td>begin application tag (shared)</td>
  <td>61</td><td>a  (variable name)</td></tr>
<tr><td>05</td><td>variable tag</td>
  <td>11</td><td>end application tag</td></tr>
<tr><td>01</td><td>variable length</td>
  <td>1E</td><td>short reference</td></tr>
<tr><td>66</td><td>f  (variable name)</td>
  <td>00</td><td>to the first shared object</td></tr>
<tr><td>50</td><td>begin application tag (shared)</td>
  <td>11</td><td>end application tag</td></tr>
<tr><td>05</td><td>variable tag</td>
  <td>1E</td><td>short reference</td></tr>
<tr><td>01</td><td>variable length</td>
  <td>00</td><td>to the second shared object</td></tr>
<tr><td>66</td><td>f  (variable name)</td>
  <td>11</td><td>end application tag</td></tr>
<tr><td/><td/><td>19</td><td>end object tag</td></tr>
</table>
<div>
  Figure 4.3 A binary encoding of the <i>OpenMath</i> object from figure <a href="#fig_shared_vs_unshared">Figure 4.1</a>.</div></div>

<p>It is easy to see that in this binary encoding, the size of the encoding is
<m:math><m:mn>13</m:mn><m:mo>+</m:mo><m:mn>7</m:mn><m:mo fence="true">(</m:mo><m:mi>d</m:mi><m:mo>-</m:mo><m:mn>1</m:mn><m:mo fence="true">)</m:mo></m:math>  bytes,
where <m:math><m:mi>d</m:mi></m:math>  is the depth of the tree, while a totally unshared encoding
is <m:math><m:mn>8</m:mn><m:mo>*</m:mo><m:msup><m:mn>2</m:mn><m:mi>d</m:mi></m:msup><m:mo>-</m:mo><m:mn>8</m:mn></m:math> 
bytes (sharing variables saves up to 256 bytes for trees up to depth 8 and wastes space
for greater depths). The shared <span>xml</span> encoding only uses
<m:math><m:mn>32</m:mn><m:mi>d</m:mi><m:mo>+</m:mo><m:mn>29</m:mn></m:math>  bytes, which is more space
efficient starting at depth 9.</p>

<p>Note that in conversion to binary encoding the identifiers on the
objects are not preserved. Morever, even though the <span>xml</span> encoding
allows references across objects, as in figure ???, the binary
encoding does not (the binary encoding has no notion of a multi-object
collection, which is implicit by embedding <i>OpenMath</i> objects into <span>xml</span>
documents in the <span>xml</span> encoding.).</p>

<p>Note that objects need not be fully shared (or shared at all) in the
binary encoding with sharing.</p>
</div>

<div><h4 name="sec_impl_note" id="sec_impl_note">4.2.4 Implementation Note</h4>


<p>A typical implementation of the binary encoding comes in two parts. The
  first part deals with the unshared encodings, i.e. objects starting with the
  identifier <small><code>[24]</code></small>.</p>

<p>This part uses four tables, each of 256 entries, for symbol, variables, 8
  bit character strings whose lengths are less than 256 characters and 16 bit
  character strings whose lengths are less than 256 characters.  When an object is
  read, all the tables are first flushed. Each time a sharable sub-object is read,
  it is entered in the corresponding table if it is not full. When a reference to
  the shared <m:math><m:mi>i</m:mi></m:math>-th object of a given type is read, it stands
  for the <m:math><m:mi>i</m:mi></m:math>-th entry in the corresponding table. It is an
  encoding error if the <m:math><m:mi>i</m:mi></m:math>-th position in the table has not
  already been assigned (i.e. forward references are not allowed).  Sharing is not
  mandatory, there may be duplicate entries in the tables (if the application that
  wrote the object chose not to share optimally).
</p>

<p>
  The part for the shared representations of <i>OpenMath</i> objects uses an unbounded
  array for storing shared sub-objects. Whenever an object has the shared flag
  set, then it is read and a pointer to the generated data structure is stored at
  the next position of the array. Whenever a reference of the form 
  <small><code>[30] [_]</code></small> is
  encountered, the array is queried for the value at <small><code>[_]</code></small>
  and analogously for <small><code>[30+128] {_}</code></small>. Note that the
  application can decide to copy the value or share it among subterms as long as
  it respects the identity conditions given by the tree-nature of the <i>OpenMath</i>
  objects.  The implementation must take care to ensure that no variables
  are captured during this process (see section
  <a href="#sec_sharing_bvars">Section 4.1.2.2</a>), and possibly have methods for recovering
  from cyclic dependency relations (this can be done by standard loop-checking
  methods).
</p>

<p>Writing an object is simple. The tables are first flushed. Each time a
sharable sub-object is encountered (in the natural order of output given by the
encoding), it is either entered in the corresponding table (if it is not full) and
output in the normal way or replaced by the right reference if it is already
present in the table.</p>
</div>

<div><h4 name="sec_bin_example" id="sec_bin_example">4.2.5 Example of Binary Encoding</h4>


<p>As an example of this binary encoding, we can consider the <i>OpenMath</i> object
whose <span>xml</span> encoding is
<div class="literal"><pre>&lt;OMOBJ&gt;
  &lt;OMA&gt;
    &lt;OMS cdbase="http://www.openmath.org/cd" name="times" cd="arith1"/&gt;
    &lt;OMA&gt;
      &lt;OMS cdbase="http://www.openmath.org/cd" name="plus" cd="arith1"/&gt;
      &lt;OMV name="x"/&gt;
      &lt;OMV name="y"/&gt;
    &lt;/OMA&gt;
    &lt;OMA&gt;
      &lt;OMS cdbase="http://www.openmath.org/cd" name="plus" cd="arith1"/&gt;
      &lt;OMV name="x"/&gt;
      &lt;OMV name="z"/&gt;
    &lt;/OMA&gt;
  &lt;/OMA&gt;
&lt;/OMOBJ&gt;</pre></div> 
It is binary encoded as the sequence of bytes given by  the following table.</p>

<table>
<tr>
<th>Hex </th>
<th>Meaning </th>
<th> Hex </th>
<th>Meaning 
</th>
</tr>

<tr><td>18</td><td>begin object tag</td>
  <td>68</td><td>h  .</td></tr>
<tr><td>10</td><td> begin application tag</td>
  <td>31</td><td>1  .)</td></tr>
<tr><td>08</td><td>symbol tag</td>
  <td>70</td><td>p (symbol name begin</td></tr>
<tr><td>06</td><td>cd length </td>
  <td>6c</td><td>   l  .</td></tr>
<tr><td>05  </td><td>   name length</td>
  <td>75  </td><td>   u  . </td></tr>
<tr><td>61  </td><td>    a (cd name begin</td>
  <td>73  </td><td>   s  .) </td></tr>
<tr><td>72  </td><td>    r  .</td>
  <td>05  </td><td>   variable tag </td></tr>
<tr><td>69  </td><td>   i  .</td>
  <td>01  </td><td>   name length </td></tr>
<tr><td>74  </td><td>   t  .</td>
  <td>78  </td><td>   x (name) </td></tr>
<tr><td>68  </td><td>   h  .</td>
  <td>05  </td><td>   variable tag </td></tr>
<tr><td>31  </td><td>   1  .)</td>
  <td>01  </td><td>   name length </td></tr>
<tr><td>74  </td><td>   t (symbol name begin</td>
  <td>79  </td><td>   y (variable name) </td></tr>
<tr><td>69  </td><td>   i  .</td>
  <td>11  </td><td>   end application tag </td></tr>
<tr><td>6d  </td><td>   m  .</td>
  <td>10  </td><td>   begin application tag </td></tr>
<tr><td>65  </td><td>   e  .</td>
  <td>48  </td><td>   symbol tag (with share bit on) </td></tr>
<tr><td>73  </td><td>   s  .)</td>
  <td>01</td><td>reference to second symbol seen (arith1:plus)</td></tr>
<tr><td>10  </td><td>   begin application tag</td>
  <td>45  </td><td>   variable tag (with share bit on) </td></tr>
<tr><td>08  </td><td>   symbol tag</td>
  <td>00  </td><td>   reference to first variable seen (x) </td></tr>
<tr><td>06  </td><td>   cd length</td>
  <td>05  </td><td>   variable tag </td></tr>
<tr><td>04  </td><td>   name length</td>
  <td>01  </td><td>   name length </td></tr>
<tr><td>61  </td><td>   a (cd name begin</td>
  <td>7a  </td><td>   z (variable name) </td></tr>
<tr><td>72  </td><td>   r  .</td>
  <td>11  </td><td>   end application tag </td></tr>
<tr><td>69  </td><td>   i  .</td>
  <td>11  </td><td>   end application tag </td></tr>
<tr><td>74  </td><td>   t  .</td>
  <td>19  </td><td>   end object tag </td></tr>
</table> 

</div>

<div><h4 name="sec_relation_OM1_binary" id="sec_relation_OM1_binary">4.2.6 Relation to the <i>OpenMath</i>1 binary encoding</h4>
  
  <p>The <i>OpenMath</i>2 binary encoding significantly extends the
    <i>OpenMath</i>1 binary encoding to accomodate the new features and in particular sharing of
    sub-objects. The tags and structure of the  <i>OpenMath</i>1 binary encoding are still
    present in the current <i>OpenMath</i> binary encoding, so that binary encoded <i>OpenMath</i>1 objects
    are still valid in the <i>OpenMath</i>2 binary encoding and correspond to the same abstract
    <i>OpenMath</i> objects. In some cases, the binary encoding tags without the shared flag
    can still be used as more compact representations of the objects (which are
    not shared, and do not have an identifier).
  </p>
  <p>As the binary encoding is geared towards compactness, <i>OpenMath</i> objects should
    be maximally internally shared (if computationally feasible). Note that since
    sharing is done only at the
    encoding level, this does not alter the meaning of an <i>OpenMath</i> object, only allow
    to represent it more compactly.
  </p>
</div>
</div>

<div><h3 name="sec_enc_summary" id="sec_enc_summary">4.3 Summary</h3>


<p>The key points of this chapter are:
<ul>
<li><p>The <span>xml</span> encoding for <i>OpenMath</i> objects uses most common
  character sets.</p></li>
<li><p>The <span>xml</span> encoding is readable, writable and can be
  embedded in most documents and transport protocols.</p></li>
<li><p>The binary encoding for <i>OpenMath</i> objects should be used when
  efficiency is a key issue. It is compact yet simple enough to allow
  fast encoding and decoding of objects.</p></li>
</ul>
</p>
</div>


<h2 name="cha_cd" id="cha_cd">
  Chapter 5<br/>Content Dictionaries</h2>



<p>In this chapter we give a brief overview of Content Dictionaries
before explicitly stating their functionality and encoding.</p>
<div><h3 name="sec_cd_summary" id="sec_cd_summary">5.1 Introduction</h3>


<p>Content Dictionaries (CDs) are central to the <i>OpenMath</i> philosophy of
transmitting mathematical information. It is the <i>OpenMath</i> Content
Dictionaries which actually hold the meanings of the objects being
transmitted.</p>

<p>For example if application <m:math><m:mi>A</m:mi></m:math>  is talking to
application <m:math><m:mi>B</m:mi></m:math>, and sends, say, an equation
involving multiplication of matrices, then <m:math><m:mi>A</m:mi></m:math>  and
<m:math><m:mi>B</m:mi></m:math>  must agree on what a matrix is, and on what
matrix multiplication is, and even on what constitutes an
equation. All this information is held within some Content
Dictionaries which both applications agree upon.</p>

<p>A <i> Content Dictionary</i> holds the meanings of
(various) mathematical <span>"words"</span>. These words are <i>OpenMath</i>
basic objects referred to as <i>symbols</i> in <a href="#sec_omabs">Section 3.1</a>.</p>

<p>With a set of symbol definitions (perhaps from several Content
Dictionaries), <m:math><m:mi>A</m:mi></m:math>  and <m:math><m:mi>B</m:mi></m:math>  can
now talk in a common <span>"language"</span>.</p>

<p>It is important to stress that it is not Content Dictionaries
themselves which are being transmitted, but some <span>"mathematics"</span>
whose definitions are held within the Content Dictionaries. This means
that the applications must have already agreed on a set of Content
Dictionaries which they <span>"understand"</span> (i.e., can cope with
to some degree).</p>

 <p>In many cases, the Content
Dictionaries that an application understands will be constant, and be
intrinsic to the application's mathematical use. However the above
approach can also be used for applications which can handle every
Content Dictionary (such as an <i>OpenMath</i> parser, or perhaps a typesetting
system), or alternatively for applications which understand a
changeable number of Content Dictionaries (perhaps after being sent
Content Dictionaries in some way).</p>

<p>The primary use of Content Dictionaries is thought to be for
designers of Phrasebooks,the programs which translate between the <i>OpenMath</i>
mathematical object and the corresponding (often internal) structure
of the particular application in question. For such a use the Content
Dictionaries have themselves been designed to be as readable and
precise as possible.</p>

<p>Another possible use for <i>OpenMath</i> Content Dictionaries could rely on
their automatic comprehension by a machine (e.g., when given
definitions of objects defined in terms of previously understood
ones), in which case Content Dictionaries may have to be passed as
data. Towards this end, a Content Dictionary has been written which
contains a set of symbols sufficient to represent any other Content
Dictionary. This means that Content Dictionaries may be passed in the
same way as other (<i>OpenMath</i>) mathematical data.</p>

 <p>Finally, the syntax of the
<span>reference encoding for</span>
Content Dictionaries has been designed to be relatively easy to learn
and to write, and also free from the need for any specialist
software. This is because it is acknowledged that there is an enormous
amount of mathematical information to represent, and so most of the
Content Dictionaries will be written by <span>"ordinary"</span>
mathematicians, encoding their particular fields of expertise.  A
further reason is that the mathematics conveyed by a specific Content
Dictionary should be understandable independently of any
application.</p>

<p>The key points from this section are:
<ul>
<li><p>Content Dictionaries should be readable and precise to help
  Phrasebook designers,</p></li>
<li><p>Content Dictionaries should be readily write-able to encourage
  widespread use,</p></li>
<li><p>It ought to be possible for a machine to understand a Content
  Dictionary to some degree.</p></li>
</ul>
</p>
</div>

<div><h3 name="sect_func" id="sect_func">5.2 Abstract Content Dictionaries</h3>


<p>In this section we define the <span>abstract</span> structure of Content
Dictionaries.</p>












<p>A Content Dictionary consists of the
following mandatory pieces of information:
<ol>
<li><p>A <i>name</i> corresponding to the rules
described in <a href="#sec_names">Section 3.3</a>.</p></li>
<li><p>A <i>description</i> of the Content
Dictionary.
</p></li>
<li><p>A <i>revision date</i>, the date of the
last change to the Content Dictionary.  Dates should be stored in the
ISO-compliant format YYYY-MM-DD, e.g. 1966-02-03. 
</p></li>
<li><p>A <i>review date</i>, a date until which
the content dictionary is guarenteed to remain unchanged. 
</p></li>
<li><p>A <i>version number</i> which consists
of a major and minor part (see <a href="#sec_version">Section 5.2.2</a>). 
</p></li>
<li><p>A <i>status</i>, as described in <a href="#sec_status">Section 5.2.1</a>. 
</p></li>
<li><p>A <i>CD base</i> which is a unique
identifier for the Content Dictionary, and may or may not refer to an
actual location from which it can be retrieved.   
</p></li>
<li><p>A series of <i>symbol definitions</i> as
described below.
</p></li>
</ol>
</p>

<p>A symbol definition consists of the
following pieces of information:
<ol>
<li><p>A mandatory <i>name</i> corresponding to the rules
described in <a href="#sec_names">Section 3.3</a>.</p></li>
<li><p>A mandatory <i>description</i> of the symbol,
which can be as formal or informal as the author likes.
</p></li>
<li><p>An optional <i>role</i> as described in
<a href="#sec_roles">Section 3.1.4</a>.
</p></li>
<li><p>Zero or more <i>commented mathematical
properties</i> which are mathematical properties of the symbol
expressed in a mechanism other than <i>OpenMath</i>.
</p></li>
<li><p>Zero or more <i>formal mathematical
properties</i> which are mathematical properties of the symbol
expressed in <i>OpenMath</i>.  Note that it is common for commented and formal
mathematical properties to be introduced in pairs, with the former
describing the latter.
</p></li>
<li><p>Zero or more <i>examples</i> which are
intended to demonstrate the use of the symbol within an <i>OpenMath</i> object.
</p></li>
</ol>
</p>



<p>
Some pieces of information which might logically be thought to be part
of a Content Dictionary, such as the types or signatures of symbols,
are better represented externally.  This allows for new variants to be
associated with Content Dictionaries without the Dictionaries
themselves being changed.  A model for signatures is given in <a href="#sigfiles">Section 5.4.1</a>.</p>


<p>Content Dictionaries may be grouped into <i>CD
Groups</i>. These groups allow applications to easily refer to
collections of Content Dictionaries. One particular CDGroup of
interest is the <span>"MathML CDGroup"</span>. This group expresses
the collection of the core Content Dictionaries that is designed to
have the same semantic scope as the content elements of
MathML 2 <a href="#MathML_2000">[18]</a>.  <i>OpenMath</i> objects
built from symbols that come from Content Dictionaries in this CDGroup
may be expected to be eaily transformed between <i>OpenMath</i> and MathML
encodings.  The detailed structure of a CDGroup is described in
<a href="#ssec_cdgroups">Section 5.4.2</a> below.</p>

<div><h4 name="sec_status" id="sec_status">5.2.1 Content Dictionary Status</h4>


  <p>The status of a Content Dictionary can be either
<ul>
<li><p>
  <small><code>official</code></small>: approved by the <i>OpenMath</i> Society
  according to the procedure outlined in <a href="#cdapprove">Section 5.5</a>;
</p></li>

<li><p>
  <small><code>experimental</code></small>: under development and thus
liable to change;
</p></li>
<li><p>
  <small><code>private</code></small>: used by a private group of <i>OpenMath</i>
  users;
</p></li>
<li><p>
<small><code>obsolete</code></small>: an obsolete Content
  Dictionary kept only for archival purposes.
</p></li>
</ul>
</p>
</div>

<div><h4 name="sec_version" id="sec_version">5.2.2 Content Dictionary Version Numbers</h4>


<p>A version number must consist of two parts, a major version and
a revision, both of which should be non-negative integers.  In CDs
that do not have status <i>experimental</i>, the version
number should be a positive integer.</p>

<p>Unless a CD has status <i>experimental</i>,
no changes should ever be
  introduced that invalidate objects built with previous versions.
  Any change that influences phrasebook compliance, like adding a new
  symbol to a Content Dictionary, is considered a major change
  and should be reflected by an increase in the major version number. Other
  changes, like adding an example or correcting a description, are
  considered minor changes. For minor changes the version number is not
  changed, but an increase should be made to the revision number.
  Note that a change such as removing a symbol should
  not be made unless the CD has status
<i>experimental</i>.
Should this be required then a new CD with a different name should be
  produced so as not to invalidate existing objects.</p>

<p>
   When the major version number
   is increased, the revision number is normally reset to zero.</p>

<p>As detailed in chapter <a href="#cha_comp">Chapter 6</a>, <i>OpenMath</i>
compliant applications state which versions of which CDs they support.
</p>

</div>

</div>

<div><h3 name="sec_xml_cd" id="sec_xml_cd">5.3 The <span>Reference</span> Encoding for Content Dictionaries</h3>





<p><span>The reference encoding of</span>
Content Dictionaries are as <span>xml</span> documents.  A valid Content Dictionary
document should 
        
<span>conform to the Relax NG Schema for
Content Dictionaries given in <a href="#sec_cd_schema">Section 5.3.1</a>.
</span>
</p>



<p>An example of a complete Content Dictionary is given in
Appendix <a href="#app_cdcd">Appendix A.1</a>, which is the
<small><code>Meta</code></small> Content Dictionary for describing
Content Dictionaries themselves. A more typical Content Dictionary is
given in Appendix <a href="#arith1.ocd">Appendix A.2</a>, the
<small><code>arith1</code></small> Content Dictionary for basic
arithmetic functions.</p>

<div><h4 name="sec_cd_schema" id="sec_cd_schema">5.3.1 The RelaxNG Schema for Content Dictionaries</h4>


<div class="literal"><pre>
<span style="color:brown;"># *********************************************</span>
<span style="color:brown;"># </span>
<span style="color:brown;"># Relax NG Schema for OpenMath CD</span>
<span style="color:brown;"># </span>
<span style="color:brown;"># *********************************************</span>

<span style="font-weight:bold;">default</span> <span style="font-weight:bold;">namespace</span> = "http://www.openmath.org/OpenMathCD"

<span style="font-weight:bold;">include</span> "openmath2.rnc" {<a name="rncstart" style="color:blue;">start</a> = <a href="#rncCD">CD</a>}

<a name="rncCDComment" style="color:blue;">CDComment</a> = <span style="font-weight:bold;">element</span> CDComment { <span style="font-weight:bold;">text</span> }
<a name="rncCDName" style="color:blue;">CDName</a> = <span style="font-weight:bold;">element</span> CDName { <span style="font-weight:bold;">text</span> }
<a name="rncCDUses" style="color:blue;">CDUses</a> = <span style="font-weight:bold;">element</span> CDUses { <a href="#rncCDName*">CDName*</a> }
<a name="rncCDURL" style="color:blue;">CDURL</a> = <span style="font-weight:bold;">element</span> CDURL { <span style="font-weight:bold;">text</span> }
<a name="rncCDBASE" style="color:blue;">CDBASE</a> = <span style="font-weight:bold;">element</span> CDBASE { <span style="font-weight:bold;">text</span> }
<a name="rnctext-or-om" style="color:blue;">text-or-om</a> = (<span style="font-weight:bold;">text</span> | <a href="#rncOMOBJ">OMOBJ</a>)*
<a name="rncCDReviewDate" style="color:blue;">CDReviewDate</a> = <span style="font-weight:bold;">element</span> CDReviewDate { <span style="font-weight:bold;">text</span> }
<a name="rncCDDate" style="color:blue;">CDDate</a> = <span style="font-weight:bold;">element</span> CDDate { <span style="font-weight:bold;">text</span> }
<a name="rncCDVersion" style="color:blue;">CDVersion</a> = <span style="font-weight:bold;">element</span> CDVersion { <span style="font-weight:bold;">text</span> }
<a name="rncCDRevision" style="color:blue;">CDRevision</a> = <span style="font-weight:bold;">element</span> CDRevision { <span style="font-weight:bold;">text</span> }
<a name="rncCDStatus" style="color:blue;">CDStatus</a> = <span style="font-weight:bold;">element</span> CDStatus { <span style="font-weight:bold;">text</span> }
<a name="rncDescription" style="color:blue;">Description</a> = <span style="font-weight:bold;">element</span> Description { <span style="font-weight:bold;">text</span> }
<a name="rncName" style="color:blue;">Name</a> = <span style="font-weight:bold;">element</span> Name { <span style="font-weight:bold;">text</span> }
<a name="rncRole" style="color:blue;">Role</a> = <span style="font-weight:bold;">element</span> Role { <span style="font-weight:bold;">text</span> }
<a name="rncCMP" style="color:blue;">CMP</a> = <span style="font-weight:bold;">element</span> CMP { <span style="font-weight:bold;">text</span> }
<a name="rncFMP" style="color:blue;">FMP</a> = <span style="font-weight:bold;">element</span> FMP { <a href="#rnctext-or-om">text-or-om</a> }
<span style="color:brown;"># allow embedded OM</span>
<a name="rncExample" style="color:blue;">Example</a> = <span style="font-weight:bold;">element</span> Example { <a href="#rnctext-or-om">text-or-om</a> }
<a name="rncCDDefinition" style="color:blue;">CDDefinition</a> =
  <span style="font-weight:bold;">element</span> CDDefinition {
    (<a href="#rncCDComment">CDComment</a> | <a href="#rncName">Name</a> | <a href="#rncDescription">Description</a> | <a href="#rncExample">Example</a> | <a href="#rncFMP">FMP</a> | <a href="#rncCMP">CMP</a>)*
  }
<a name="rncCD" style="color:blue;">CD</a> =
  <span style="font-weight:bold;">element</span> CD {
    <a href="#rncCDComment*">CDComment*</a>,
    (<a href="#rncCDName">CDName</a> &amp; <a href="#rncCDURL">CDURL</a> &amp; 
     <a href="#rncCDReviewDate">CDReviewDate</a> &amp; <a href="#rncCDDate">CDDate</a> &amp; <a href="#rncCDStatus">CDStatus</a> &amp; 
     <a href="#rncCDUses">CDUses</a> &amp; 
     <a href="#rncCDVersion">CDVersion</a> &amp; <a href="#rncCDRevision">CDRevision</a>),
    (<a href="#rncCDComment">CDComment</a> | <a href="#rncDescription">Description</a> | <a href="#rncCDDefinition">CDDefinition</a> | <a href="#rncExample">Example</a>)*
  }


</pre></div>

</div>


<div><h4 name="sect_pcdata" id="sect_pcdata">5.3.2 Further <span>Description of
the CD Schema</span></h4>





<p>
We now describe the elements used in the above schema in terms of the
abstract description of CDs in <a href="#sect_func">Section 5.2</a>.  Unless
stated otherwise the information is encoded as the content of the
element.
</p>



<dl>
<dt><small><code>CDName</code></small></dt><dd><p>The
 name of the Content Dictionary.
</p>

</dd>


<dt><small><code>Description</code></small></dt>
<dd><p>The text occurring in the <small><code>Description</code></small>
  element is used to give a description of the enclosing element, which
  could be a symbol or the entire Content Dictionary. The content of
  this element can be any <span>xml</span> text.</p>
  
</dd>

<dt><small><code>CDReviewDate</code></small></dt><dd><p>The

review date of the Content
  Dictionary. </p>
  
</dd>

<dt><small><code>CDDate</code></small></dt><dd><p>The

revision date of this version of the Content Dictionary.

</p>
  
</dd>

<dt><small><code>CDVersion</code></small></dt><dd>
   
   

<p>The major version number of the CD.</p>
   







  
</dd>

<dt><small><code>CDRevision</code></small></dt><dd>
    



<p>The minor version number of the
CD.</p>
  
</dd>

<dt><small><code>CDStatus</code></small></dt><dd><p>The

status of the Content Dictionary.

</p>
  
</dd>

<dt><small><code>CDBASE</code></small></dt><dd><p>The
CD base of the CD.

</p>
</dd>

<dt><small><code>CDURL</code></small></dt><dd><p>The
  text occurring in the <small><code>CDURL</code></small> element should
  be a valid URL where the source file for the Content Dictionary
  encoding can be found (if it exists). The filename should conform to
  ISO 9660 <a href="#iso9660">[13]</a>.

</p>

</dd>

<dt><small><code>CDUses</code></small></dt><dd>
    <p>The content of this element should
   be a series of <small><code>CDName</code></small> elements, each
   naming a Content Dictionary used in the
   <small><code>Example</code></small> and <small><code>FMP</code></small>s
   of the current Content Dictionary. <span>This element is optional and deprecated since
the information can easily be extracted automatically.</span></p>
   
 </dd>

<dt><small><code>CDComment</code></small></dt><dd><p>The
   content of this element should be text that does not convey any
   crucial information concerning the current Content Dictionary. It
   can be used in the Content Dictionary header to report the author
   of the Content Dictionary and to log change information. In the
   body of the Content Dictionary, it can be used to attach extra
   remarks to certain symbols.</p> 
   
 </dd>

<dt><small><code>CDDefinition</code></small></dt><dd><p>The
element which contains the definition of an individual symbol.
</p>
  
</dd>

<dt><small><code>Name</code></small></dt><dd><p>The

name of a symbol.

</p>
  
</dd>

<dt><small><code>Example</code></small></dt>
<dd>
 <p>The text occurring in the
<small><code>Example</code></small> element is used to give examples of
the enclosing symbol, and can be any <span>xml</span> text. In addition to text
the element may contain examples as <span>xml</span> encoded <i>OpenMath</i>, inside
<small><code>OMOBJ</code></small> elements.  Note that
<small><code>Examples</code></small> must be with respect to some symbol
and cannot be <span>"loose"</span> in the Content Dictionary.</p>
  
</dd>

<dt><small><code>CMP</code></small></dt>
<dd><p>


<span>
A Commented Mathematical Property.
</span>

</p>
  
</dd>

<dt><small><code>FMP</code></small></dt><dd><p>


<span>
A Formal Mathematical Property.
</span>

</p>
</dd>

</dl>
</div>
</div>


<div><h3 name="addfiles" id="addfiles">5.4 Additional Information</h3>



  <p>Content Dictionaries contain just one part of the
information that can be associated to a symbol in order to  define its meaning and its
functionality. <i>OpenMath</i> Signature <span>dictionaries</span>, CDGroups, and possibly <span>collections</span> of extra mathematical properties, are
used to convey the different aspects that as a whole make up a mathematical
definition.</p>

<div><h4 name="sigfiles" id="sigfiles">5.4.1 Signature
<span>Dictionaries</span>
</h4>





<p><i>OpenMath</i> may be used with any type system. One just needs to produce
a Content Dictionary which gives the constructors of the type system,
and then one may build <i>OpenMath</i> objects representing types in the given
type system. These are typically associated with <i>OpenMath</i> objects via the
<i>OpenMath</i> <b>attribution</b> constructor.</p>

<p>A Small Type System, called STS, has been designed to give
semi-formal signatures to <i>OpenMath</i> symbols and is documented
in <a href="#OM_D132c">[6]</a>.  The signature file given in
<a href="#arith1.sts">Appendix A.3</a> is based on this formalism. Using the
same mechanism, <a href="#OMD132b">[4]</a> shows how pure type
systems can also be employed to assign types to <i>OpenMath</i> symbols.</p>




<div><h5 name="sect_sigpcdata" id="sect_sigpcdata">5.4.1.1 
<span>
Abstract Specification</span>
 of a Signature File</h5>




<p>Signature files have a header which specifies the
type system being used, and the Content
Dictionary which contains the symbols for which the signatures are
being given. Each signature takes the form of an <i>OpenMath</i>
object in an appropriate encoding.</p>






<ol>
<li><p>
A <i>type definition</i>: the
  name of the Content
  Dictionary or of the CDGroup (cfg. <a href="#ssec_cdgroups">Section 5.4.2</a>)
  that represents the type system being used.

</p></li>
<li><p>
A <i>CD name</i>: the name of the CD for which
signatures are being defined.

</p></li>
<li><p>
A <i>review date</i>
as defined in <a href="#sect_func">Section 5.2</a>.
</p></li>
<li><p>
A <i>status</i>:
as defined in <a href="#sect_func">Section 5.2</a>.
</p></li>
<li><p>
A series of <i>signatures</i> which are <i>OpenMath</i> objects in
some encoding.  The objects must represent types as defined by the
type definition.
</p></li>
</ol>

</div>


<div><h5 name="sect_sigschema" id="sect_sigschema">5.4.1.2 A RelaxNG Schema for a Signature File</h5>


<p>
The following is a reference encoding of a signature dictionary,
designed to be used with Content Dictionaries in the <span>xml</span> encoding.
</p>

<div class="literal"><pre>
<span style="color:brown;"># *********************************************</span>
<span style="color:brown;"># </span>
<span style="color:brown;"># Relax NG Schema for OpenMath CD Signatures</span>
<span style="color:brown;"># </span>
<span style="color:brown;"># *********************************************</span>

<span style="font-weight:bold;">default</span> <span style="font-weight:bold;">namespace</span> = "http://www.openmath.org/OpenMathCDS"

<span style="font-weight:bold;">include</span> "openmath2.rnc"
<a name="rncCDSComment" style="color:blue;">CDSComment</a> = <span style="font-weight:bold;">element</span> CDSComment { <span style="font-weight:bold;">text</span> }
<a name="rncCDSReviewDate" style="color:blue;">CDSReviewDate</a> = <span style="font-weight:bold;">element</span> CDSReviewDate { <span style="font-weight:bold;">text</span> }
<a name="rncCDSStatus" style="color:blue;">CDSStatus</a> = <span style="font-weight:bold;">element</span> CDSStatus { <span style="font-weight:bold;">text</span> }
<a name="rncCDSignatures" style="color:blue;">CDSignatures</a> =
  <span style="font-weight:bold;">element</span> CDSignatures {
    <a href="#rncattlist.CDSignatures">attlist.CDSignatures</a>,
    (<a href="#rncCDComment">CDComment</a> | <a href="#rncCDSComment">CDSComment</a>)*,
    (<a href="#rncCDSReviewDate">CDSReviewDate</a>? &amp; <a href="#rncCDSStatus">CDSStatus</a>?),
    (<a href="#rncCDComment">CDComment</a> | <a href="#rncCDSComment">CDSComment</a> | <a href="#rncSignature">Signature</a>)*
  }
<a name="rncattlist.CDSignatures" style="color:blue;">attlist.CDSignatures</a> =
  <span style="font-weight:bold;">attribute</span> cd { <span style="font-weight:bold;">text</span> },
  <span style="font-weight:bold;">attribute</span> type { <span style="font-weight:bold;">text</span> }
<a name="rncSignature" style="color:blue;">Signature</a> = <span style="font-weight:bold;">element</span> Signature { <a href="#rncattlist.Signature">attlist.Signature</a>, <a href="#rncOMOBJ">OMOBJ</a>? }
<a name="rncattlist.Signature" style="color:blue;">attlist.Signature</a> = <span style="font-weight:bold;">attribute</span> name { <span style="font-weight:bold;">text</span> }
<a name="rncstart" style="color:blue;">start</a> = <a href="#rncCDSignatures">CDSignatures</a>

</pre></div>

</div>


<div><h5 name="sect_sigex" id="sect_sigex">5.4.1.3 Examples</h5>


<p>An example of a signature file for the type system STS and the
<small><code>arith1</code></small> Content Dictionary is given in <a href="#arith1.sts">Appendix A.3</a>. Each signature entry is similar to the
following one for the <i>OpenMath</i> symbol <small><code>&lt;OMS cd="arith1"
name="plus"/&gt;</code></small>: <div class="literal"><pre>
&lt;Signature name="plus"&gt;
&lt;OMOBJ&gt;
 &lt;OMA&gt;
  &lt;OMS cdbase="http://www.openmath.org/cd" name="mapsto" cd="sts"/&gt;
  &lt;OMA&gt;
   &lt;OMS cdbase="http://www.openmath.org/cd" name="nassoc" cd="sts"/&gt; 
   &lt;OMV name="AbelianSemiGroup"/&gt;
  &lt;/OMA&gt;
  &lt;OMV name="AbelianSemiGroup"/&gt;
 &lt;/OMA&gt;
&lt;/OMOBJ&gt;
&lt;/Signature&gt;
</pre></div>
</p>
</div>



</div>

<div><h4 name="ssec_cdgroups" id="ssec_cdgroups">5.4.2 CDGroups</h4>




  <p>The CD
Group mechanism is a convenience mechanism for identifying collections
of CDs.  A CD Group file is an <span>xml</span> document used in the (static or
dynamic) negotiation phase where communicating applications declare
and agree on the Content Dictionaries which they process.  It is a
complement, or an alternative, to the individual declaration of
Content Dictionaries understood by an application.  Note that CD
Groups do <i>not</i> affect the <i>OpenMath</i> objects themselves.
Symbols in an object always refer to content dictionaries, not
groups.</p>

 <p>For an application to declare that
it <span>"understands CDGroup G"</span> is exactly equivalent to, and
interchangable with, the declaration that it <span>"understands
Content Dictionaries <m:math><m:msub><m:mi>x</m:mi><m:mn>1</m:mn></m:msub></m:math>,
<m:math><m:msub><m:mi>x</m:mi><m:mn>2</m:mn></m:msub></m:math>, <span>&#8230;</span>
<m:math><m:msub><m:mi>x</m:mi><m:mi>n</m:mi></m:msub></m:math>"</span>, where
<m:math><m:msub><m:mi>x</m:mi><m:mn>1</m:mn></m:msub></m:math>, <span>&#8230;</span>
<m:math><m:msub><m:mi>x</m:mi><m:mi>n</m:mi></m:msub></m:math>  are the members of
CDGroup G.</p>


<div><h5 name="sec_dtd_cdg" id="sec_dtd_cdg">5.4.2.1 The Specification of CDGroups</h5>



<p>CDGroups are <span>xml</span> documents, hence  a valid  CDGroup
 should 
<ul>
<li><p>be valid according to the <span>schema</span> given in
  <a href="#fig_cdgroup.dtd">Figure 5.1</a>,</p></li>
<li><p>adhere to the extra conditions on the content of the elements
  given in <a href="#sect_cdgpcdata">Section 5.4.2.2</a>.</p></li>
</ul>
</p>

<p>Apart from some header information such as <small><code>CDGroupName</code></small> and
<small><code>CDGroup</code></small> version, a CDGroup is simply an unordered list of
CDs, identified by name and optionally version number and URL.</p>


<div class="figure"><a name="fig_cdgroup.dtd" id="fig_cdgroup.dtd"/>
    
<div class="literal"><pre>

<span style="color:brown;"># Schema for OpenMath CD groups</span>

<span style="color:brown;"># info on the CD group itself</span>

<a name="rncCDGroupName" style="color:blue;">CDGroupName</a> = <span style="font-weight:bold;">element</span> CDGroupName { <span style="font-weight:bold;">text</span> }
<a name="rncCDGroupVersion" style="color:blue;">CDGroupVersion</a> = <span style="font-weight:bold;">element</span> CDGroupVersion { <span style="font-weight:bold;">text</span> }
<a href="#rncattlist.CDGroupVersion">attlist.CDGroupVersion</a> &amp;= <a href="#rncempty">empty</a>
<a name="rncCDGroupRevision" style="color:blue;">CDGroupRevision</a> = <span style="font-weight:bold;">element</span> CDGroupRevision { <span style="font-weight:bold;">text</span> }
<a name="rncCDGroupURL" style="color:blue;">CDGroupURL</a> = <span style="font-weight:bold;">element</span> CDGroupURL { <span style="font-weight:bold;">text</span> }
<a name="rncCDGroupDescription" style="color:blue;">CDGroupDescription</a> = <span style="font-weight:bold;">element</span> CDGroupDescription { <span style="font-weight:bold;">text</span> }
<span style="color:brown;"># info on the CDs in the group</span>
<a name="rncCDComment" style="color:blue;">CDComment</a> = <span style="font-weight:bold;">element</span> CDComment { <span style="font-weight:bold;">text</span> }
<a name="rncCDGroupMember" style="color:blue;">CDGroupMember</a> =
  <span style="font-weight:bold;">element</span> CDGroupMember {
    <a href="#rncattlist.CDGroupMember">attlist.CDGroupMember</a>, <a href="#rncCDComment">CDComment</a>?, <a href="#rncCDName">CDName</a>, <a href="#rncCDVersion">CDVersion</a>?, <a href="#rncCDURL">CDURL</a>?
  }
<a name="rncCDName" style="color:blue;">CDName</a> = <span style="font-weight:bold;">element</span> CDName { <span style="font-weight:bold;">text</span> }
<a name="rncCDVersion" style="color:blue;">CDVersion</a> = <span style="font-weight:bold;">element</span> CDVersion { <span style="font-weight:bold;">text</span> }
<a name="rncCDURL" style="color:blue;">CDURL</a> = <span style="font-weight:bold;">element</span> CDURL { <span style="font-weight:bold;">text</span> }
<span style="color:brown;"># structure of the group</span>
<a name="rncCDGroup" style="color:blue;">CDGroup</a> =
  <span style="font-weight:bold;">element</span> CDGroup {
    <a href="#rncCDGroupName">CDGroupName</a>,
    <a href="#rncCDGroupVersion">CDGroupVersion</a>,
    <a href="#rncCDGroupRevision">CDGroupRevision</a>?,
    <a href="#rncCDGroupURL">CDGroupURL</a>,
    <a href="#rncCDGroupDescription">CDGroupDescription</a>,
    (<a href="#rncCDGroupMember">CDGroupMember</a> | <a href="#rncCDComment">CDComment</a>)*
  }
<a name="rncstart" style="color:blue;">start</a> = <a href="#rncCDGroup">CDGroup</a>


</pre></div>

<div>
  Figure 5.1 <span>Relax NG</span> Specification of CDGroups</div></div>
</div>

<div><h5 name="sect_cdgpcdata" id="sect_cdgpcdata">5.4.2.2 Further Requirements of a CDGroup</h5>





<p>The notion of being a valid CDGroup implies that the following
requirements on the content of the elements described by the <span>schema</span> given in
  <a href="#sect_sigschema">Section 5.4.1.2</a> are also met.</p>


<dl>
<dt><small><code>CDGroup</code></small></dt>
<dd><p>The <span>xml</span> element <small><code>CDGroup</code></small> is the outermost
  element in a CDGroup document.</p>
  
</dd>

<dt><small><code>CDGroupName</code></small></dt>
<dd>

<p>The text occurring in the <small><code>CDGroupName</code></small>
  element corresponds to the name of the CDGroup. For the syntactical
  requirements, see <small><code>CDName</code></small> in <a href="#sect_pcdata">Section 5.3.2</a>.</p>
  
</dd>

<dt><small><code>CDGroupVersion</code></small></dt>
<dt><small><code>CDGroupRevision</code></small></dt>
<dd>
<p>The text occurring in these elements contains the major and minor
version numbers of the CDGroup.
</p>
</dd>

<dt><small><code>CDGroupURL</code></small></dt>
<dd><p>The text occurring in the <small><code>CDGroupURL</code></small>
  element identifies the location of the CDGroup file, not necessarily
  of the member Content Dictionaries. For the syntactical
  requirements, see <small><code>CDURL</code></small> in <a href="#sect_pcdata">Section 5.3.2</a>.</p>
  
</dd>

<dt><small><code>CDGroupDescription</code></small></dt>
<dd><p>The text occurring in the
<small><code>CDGroupDescription</code></small> element describes the
mathematical area of the CDGroup.</p>
  
</dd>

<dt><small><code>CDGroupMember</code></small></dt>
<dd><p>The <span>xml</span> element <small><code>CDGroupMember</code></small>
  encloses the data identifying each member of the CDGroup.</p>
  
</dd>

<dt><small><code>CDName</code></small></dt><dd><p>The
  text occurring in the <small><code>CDName</code></small> element
  corresponds to the name of a Content Dictionary in the CDGroup. For
  the syntactical requirements, see <small><code>CDName</code></small> in
  <a href="#sect_pcdata">Section 5.3.2</a>.</p>
  
</dd>

<dt><small><code>CDVersion</code></small></dt><dd><p>The
  text occurring in the <small><code>CDVersion</code></small> element
  identifies which version of the Content Dictionary is to be taken as
  member of the CDGroup. This element is optional. In case it is
  missing, the latest version is the one included in the CDGroup.  For
  the syntactical requirements, see <small><code>CDVersion</code></small>
  in <a href="#sect_pcdata">Section 5.3.2</a>.</p>
  
</dd>

<dt><small><code>CDURL</code></small></dt>
<dd>

<p>The text occurring in the <small><code>CDURL</code></small> element
  identifies the location of the Content Dictionary to be taken as
  member of the CDGroup. This element is optional. In case it is
  missing, the location of the CDGroup identified by the element
  <small><code>CDGroupURL</code></small> is assumed.  For the syntactical
  requirements, see <small><code>CDURL</code></small> in <a href="#sect_pcdata">Section 5.3.2</a>.</p>
  
</dd>

<dt><small><code>CDComment</code></small></dt><dd><p>See
  <small><code>CDComment</code></small> in <a href="#sect_pcdata">Section 5.3.2</a>.</p>



</dd>

</dl>








</div>
</div>
</div>

<div><h3 name="cdapprove" id="cdapprove">5.5 Content Dictionaries Reviewing Process</h3>




<p>The <i>OpenMath</i> Society is responsible  for implementing a
review and referee process to assess the accuracy of the mathematical
content of Content Dictionaries.  The status (see <small><code>CDStatus</code></small>)
and/or the version number (see <small><code>CDVersion</code></small> ) of a Content
Dictionary may change as a result of this review process.</p>
</div>






<h2 name="cha_comp" id="cha_comp">
  Chapter 6<br/><i>OpenMath</i> Compliance</h2>



<p>Applications that meet the requirements specified in this chapter may
label themselves as <i><i>OpenMath</i> compliant</i>. <i>OpenMath</i> compliancy is
defined so as to maximize the potential for interoperability amongst
<i>OpenMath</i> applications.</p>

<div><h3 name="sec_compl_encoding" id="sec_compl_encoding">6.1 Encoding</h3>

<p>This standard defines two reference encodings for <i>OpenMath</i>, the binary
encoding and <span>xml</span> encoding,  defined in <a href="#cha_enco">Chapter 4</a>.</p>

<p>As a minimum, an <i>OpenMath</i> compliant application, which accepts or generates
<i>OpenMath</i> objects, <i>must</i> be capable of doing so using  the <span>xml</span> encoding.
The ability to use other encodings is optional.</p>
</div>

<div><h3 name="sec_compl_cd" id="sec_compl_cd">6.2 Content Dictionaries</h3>


<p>An <i>OpenMath</i> compliant application <i>must</i> be able
to support the error Content Dictionary defined in <a href="#errorcd">Appendix A.5</a>.</p>

<p>A compliant application must declare the names and version numbers of
the Content Dictionaries that it supports. Equivalently it may declare
the Content Dictionary Group (or groups) and major version number (not
revision number), rather than listing individual Content Dictionaries.
Applications that support all Content Dictionaries (e.g. renderers)
should refer to the implicit CD Group <small><code>all</code></small>.</p>

<p>If a compliant application supports a Content Dictionary then it must
explicitly declare any symbols in the Content Dictionaries that are not
supported. Phrasebooks are encouraged to support every symbol in the 
Content Dictionaries.</p>

<p>Symbols which are not listed as unsupported are
<i>supported</i> by the application. The meaning of
<i>supported</i> will depend on the application
domain. For example an <i>OpenMath</i> renderer should provide a default display
for any <i>OpenMath</i> object that only references supported symbols, whereas a
Computer Algebra System will be expected to map such an object to a
suitable internal representation, in this system, of this mathematical
object. It is expected that the application's
<i>phrasebooks</i> for supported Content Dictionaries
will be constructed such that propertes of the symbol expressed in the
Content Dictionary are respected as far as possible for the given
application domain. However <i>OpenMath</i> compliance does
<i>not</i> imply any guarantee by the <i>OpenMath</i> Society on
the accuracy of these representations.</p>


<p>Content Dictionaries available from the official <i>OpenMath</i> repository
at www.openmath.org need only be referenced by name, other Content
Dictionaries <i>should</i> be referenced  <span/> using the
<small><code>CDBASE</code></small> and the
<small><code>CDName</code></small>.  </p>

<p>When receiving an <i>OpenMath</i> symbol, e.g. <m:math><m:mi>s</m:mi></m:math>,
 that is not supported from a supported Content Dictionary, a
 compliant application will act as if it had received the <i>OpenMath</i> object
 <m:math display="block"><m:mi mathvariant="bold">error</m:mi><m:mo>(</m:mo><m:mi>Unhandled_Symbol</m:mi><m:mo separator="true">,</m:mo><m:mi>s</m:mi><m:mo>)</m:mo></m:math> where
 <small><code>Unhandled_Symbol</code></small> is the symbol from the
 error Content Dictionary.</p>


<p>Similarly if it receives a symbol, e.g. <m:math><m:mi>s</m:mi></m:math>,
from an unsupported Content Dictionary, it will act as if it had
received the <i>OpenMath</i> object <m:math display="block"><m:mi mathvariant="bold">error</m:mi><m:mo>(</m:mo><m:mi>Unsupported_CD</m:mi><m:mo separator="true">,</m:mo><m:mi>s</m:mi><m:mo>)</m:mo></m:math></p>

<p>Finally if the compliant application receives a symbol from a
supported Content Dictionary but with an unknown name, then this must
either be an incorrect object, or possibly the object has been built
using a later version of the Content Dictionary. In either case, the
application will act as if it had received the <i>OpenMath</i> object <m:math display="block"><m:mi mathvariant="bold">error</m:mi><m:mo>(</m:mo><m:mi>Unexpected_Symbol</m:mi><m:mo separator="true">,</m:mo><m:mi>s</m:mi><m:mo>)</m:mo></m:math></p>
</div>

<div><h3 name="sec_comp_lex" id="sec_comp_lex">6.3 Lexical Errors</h3>


<p>The previous section defines the behaviour of a compliant
application upon receiving well formed <i>OpenMath</i> objects containing
unexpected symbols.  This standard does not specify any behaviour for
an application upon receiving ill-formed objects.</p>
</div>


<h2 name="cha_conc" id="cha_conc">
  Chapter 7<br/>Conclusion</h2>



<p>The goal of this document is to define the <i>OpenMath</i> 2 standard. The issues
  addressed by the <i>OpenMath</i> 2 standard are:
  <ul>
    <li><p>Informal and formal definition of the <i>OpenMath</i> objects.</p></li>
    <li><p>Informal and formal definition of the notion of Content Dictionaries.</p></li>
  </ul>
  To do this, <i>OpenMath</i> objects are precisely defined and two encodings are described
to represent these objects using <span>xml</span> and binary
code. Furthermore, the Document Type Definition for validating Content
Dictionaries and <i>OpenMath</i> objects is given.</p>



<div><h2 name="app_cdfiles" id="app_cdfiles">
  Appendix A<br/>CD Files</h2>


<div><h3 name="app_cdcd" id="app_cdcd">A.1 The <b>meta</b> Content Dictionary</h3>


<div class="literal"><pre>
&lt;CD&gt;<a xmlns="" name="d0t12995"/>

&lt;CDComment&gt;<a xmlns="" name="d0t12997"/>

     This document is distributed in the hope that it will be useful, 
     but WITHOUT ANY WARRANTY; without even the implied warranty of 
     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

     The copyright holder grants you permission to redistribute this 
     document freely as a verbatim copy. Furthermore, the copyright
     holder permits you to develop any derived work from this document
     provided that the following conditions are met.
       a) The derived work acknowledges the fact that it is derived from
          this document, and maintains a prominent reference in the 
          work to the original source.
       b) The fact that the derived work is not the original OpenMath 
          document is stated prominently in the derived work.  Moreover if
          both this document and the derived work are Content Dictionaries
          then the derived work must include a different CDName element,
          chosen so that it cannot be confused with any works adopted by
          the OpenMath Society.  In particular, if there is a Content 
          Dictionary Group whose name is, for example, `math' containing
          Content Dictionaries named `math1', `math2' etc., then you should 
          not name a derived Content Dictionary `mathN' where N is an integer.
          However you are free to name it `private_mathN' or some such.  This
          is because the names `mathN' may be used by the OpenMath Society
          for future extensions.
       c) The derived work is distributed under terms that allow the
          compilation of derived works, but keep paragraphs a) and b)
          intact.  The simplest way to do this is to distribute the derived
          work under the OpenMath license, but this is not a requirement.
     If you have questions about this license please contact the OpenMath
     society at http://www.openmath.org.
&lt;/CDComment&gt;<a xmlns="" name="d0t12998"/>


&lt;CDName&gt;<a xmlns="" name="d0t13000"/> meta &lt;/CDName&gt;<a xmlns="" name="d0t13001"/>
&lt;CDReviewDate&gt;<a xmlns="" name="d0t13003"/> 2003-04-01 &lt;/CDReviewDate&gt;<a xmlns="" name="d0t13004"/>
&lt;CDDate&gt;<a xmlns="" name="d0t13006"/> 2001-03-12 &lt;/CDDate&gt;<a xmlns="" name="d0t13007"/>
&lt;CDVersion&gt;<a xmlns="" name="d0t13009"/> 2 &lt;/CDVersion&gt;<a xmlns="" name="d0t13010"/>
&lt;CDRevision&gt;<a xmlns="" name="d0t13012"/> 0 &lt;/CDRevision&gt;<a xmlns="" name="d0t13013"/>
&lt;CDStatus&gt;<a xmlns="" name="d0t13015"/> official &lt;/CDStatus&gt;<a xmlns="" name="d0t13016"/>
&lt;CDURL&gt;<a xmlns="" name="d0t13018"/> http://www.openmath.org/cd/meta.ocd &lt;/CDURL&gt;<a xmlns="" name="d0t13019"/>

&lt;Description&gt;<a xmlns="" name="d0t13021"/> 
This is a content dictionary to represent content dictionaries, so
that they may be passed between OpenMath compliant application in a
similar way to mathematical objects.

The information written here is taken from chapter 4 of the current
draft of the "OpenMath Standard".
&lt;/Description&gt;<a xmlns="" name="d0t13022"/>

&lt;CDDefinition&gt;<a xmlns="" name="d0t13024"/>
&lt;Name&gt;<a xmlns="" name="d0t13026"/> CD &lt;/Name&gt;<a xmlns="" name="d0t13027"/>
&lt;Description&gt;<a xmlns="" name="d0t13029"/>
The top level element for the Content Dictionary. It just acts
as a container for the elements described below.
&lt;/Description&gt;<a xmlns="" name="d0t13030"/>
&lt;/CDDefinition&gt;<a xmlns="" name="d0t13031"/>

&lt;CDComment&gt;<a xmlns="" name="d0t13033"/>
For those that do not have access to the DTD, the elements
allowed in a Content Dictionary are the following
(in no particular order):


&amp;lt;CD&amp;gt;

&amp;lt;CDComment&amp;gt;

     This document is distributed in the hope that it will be useful, 
     but WITHOUT ANY WARRANTY; without even the implied warranty of 
     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

     The copyright holder grants you permission to redistribute this 
     document freely as a verbatim copy. Furthermore, the copyright
     holder permits you to develop any derived work from this document
     provided that the following conditions are met.
       a) The derived work acknowledges the fact that it is derived from
          this document, and maintains a prominent reference in the 
          work to the original source.
       b) The fact that the derived work is not the original OpenMath 
          document is stated prominently in the derived work.  Moreover if
          both this document and the derived work are Content Dictionaries
          then the derived work must include a different CDName element,
          chosen so that it cannot be confused with any works adopted by
          the OpenMath Society.  In particular, if there is a Content 
          Dictionary Group whose name is, for example, `math' containing
          Content Dictionaries named `math1', `math2' etc., then you should 
          not name a derived Content Dictionary `mathN' where N is an integer.
          However you are free to name it `private_mathN' or some such.  This
          is because the names `mathN' may be used by the OpenMath Society
          for future extensions.
       c) The derived work is distributed under terms that allow the
          compilation of derived works, but keep paragraphs a) and b)
          intact.  The simplest way to do this is to distribute the derived
          work under the OpenMath license, but this is not a requirement.
     If you have questions about this license please contact the OpenMath
     society at http://www.openmath.org.
&amp;lt;/CDComment&amp;gt;

&amp;lt;CDName&amp;gt; &amp;lt;/CDName&amp;gt;
&amp;lt;Description&amp;gt; &amp;lt;/Description&amp;gt;
&amp;lt;CDReviewDate&amp;gt; &amp;lt;/CDReviewDate&amp;gt;
&amp;lt;CDDate&amp;gt; &amp;lt;/CDDate&amp;gt;
&amp;lt;CDVersion&amp;gt; &amp;lt;/CDVersion&amp;gt;
&amp;lt;CDRevision&amp;gt; &amp;lt;/CDRevision&amp;gt;
&amp;lt;CDStatus&amp;gt; &amp;lt;/CDStatus&amp;gt;
&amp;lt;CDURL&amp;gt;? &amp;lt;/CDURL&amp;gt;
&amp;lt;CDUses&amp;gt;? &amp;lt;CDUses&amp;gt;
&amp;lt;CDDefinition&amp;gt;*
&amp;lt;Name&amp;gt; &amp;lt;/Name&amp;gt;
&amp;lt;Description&amp;gt; &amp;lt;/Description&amp;gt;
&amp;lt;Example&amp;gt;* &amp;lt;/Example&amp;gt;
&amp;lt;FMP&amp;gt;* &amp;lt;/FMP&amp;gt;
&amp;lt;CMP&amp;gt;* &amp;lt;/CMP&amp;gt;
&amp;lt;/CDDefinition&amp;gt;


where a question mark (?) denotes it can be repeated 0 or 1 times, and a star
(*) denotes 0 or more times. &amp;lt;CDComment&amp;gt; &amp;lt;/CDComment&amp;gt;
 can also occur in most places - see the DTD for the precise rules.
&lt;/CDComment&gt;<a xmlns="" name="d0t13034"/>

&lt;CDDefinition&gt;<a xmlns="" name="d0t13036"/>
&lt;Name&gt;<a xmlns="" name="d0t13038"/> CDDefinition &lt;/Name&gt;<a xmlns="" name="d0t13039"/>
&lt;Description&gt;<a xmlns="" name="d0t13041"/>
This symbol is used to represent the element which contains the
definition of each symbol in a content dictionary. That is: it must
contain a 'Name' element and a 'Description' element, and it may contain
an arbitrary number of 'Example', 'FMP' or 'CMP' elements. 
&lt;/Description&gt;<a xmlns="" name="d0t13042"/>
&lt;/CDDefinition&gt;<a xmlns="" name="d0t13043"/>

&lt;CDDefinition&gt;<a xmlns="" name="d0t13045"/>
&lt;Name&gt;<a xmlns="" name="d0t13047"/> CDName &lt;/Name&gt;<a xmlns="" name="d0t13048"/>
&lt;Description&gt;<a xmlns="" name="d0t13050"/>
An element which contains the string corresponding to the name of the CD.
The string  must match the syntax for CD names given in the OpenMath
Standard. Here and elsewhere white space occurring at the beginning or
end of the string will be ignored.
&lt;/Description&gt;<a xmlns="" name="d0t13051"/>
&lt;/CDDefinition&gt;<a xmlns="" name="d0t13052"/>

&lt;CDDefinition&gt;<a xmlns="" name="d0t13054"/>
&lt;Name&gt;<a xmlns="" name="d0t13056"/> CDURL &lt;/Name&gt;<a xmlns="" name="d0t13057"/>
&lt;Description&gt;<a xmlns="" name="d0t13059"/>
An optional element.
If it is used it contains a string representing the URL where the
canonical reference copy of this CD is stored.
&lt;/Description&gt;<a xmlns="" name="d0t13060"/>
&lt;/CDDefinition&gt;<a xmlns="" name="d0t13061"/>

&lt;CDDefinition&gt;<a xmlns="" name="d0t13063"/>
&lt;Name&gt;<a xmlns="" name="d0t13065"/> Example &lt;/Name&gt;<a xmlns="" name="d0t13066"/>
&lt;Description&gt;<a xmlns="" name="d0t13068"/>
An element which contains an arbitrary number of children,
each of which is either a string or an OpenMath Object.

These children give examples in natural language, or in OpenMath, of the
enclosing symbol definition.
&lt;/Description&gt;<a xmlns="" name="d0t13069"/>
&lt;/CDDefinition&gt;<a xmlns="" name="d0t13070"/>

&lt;CDDefinition&gt;<a xmlns="" name="d0t13072"/>
&lt;Name&gt;<a xmlns="" name="d0t13074"/> CDDate &lt;/Name&gt;<a xmlns="" name="d0t13075"/>
&lt;Description&gt;<a xmlns="" name="d0t13077"/>
An element which contains a date as a string in the ISO-8601
YYYY-MM-DD format. This gives the date at which the Content Dictionary
was last edited.
&lt;/Description&gt;<a xmlns="" name="d0t13078"/>
&lt;/CDDefinition&gt;<a xmlns="" name="d0t13079"/>

&lt;CDDefinition&gt;<a xmlns="" name="d0t13081"/>
&lt;Name&gt;<a xmlns="" name="d0t13083"/> CDVersion &lt;/Name&gt;<a xmlns="" name="d0t13084"/>
&lt;Description&gt;<a xmlns="" name="d0t13086"/>
An element which contains a version number for the CD.
This should be a non negative integer. Any change to the CD
that affects existing OpenMath applications that support this CD
should result in an increase in the version number.
&lt;/Description&gt;<a xmlns="" name="d0t13087"/>
&lt;/CDDefinition&gt;<a xmlns="" name="d0t13088"/>

&lt;CDDefinition&gt;<a xmlns="" name="d0t13090"/>
&lt;Name&gt;<a xmlns="" name="d0t13092"/> CDRevision &lt;/Name&gt;<a xmlns="" name="d0t13093"/>
&lt;Description&gt;<a xmlns="" name="d0t13095"/>
An element which contains a revision number (or minor version number)
This should be a non-negative integer starting from zero for each
new version. Additional examples  would be typical changes
to a CD requiring a new revision number.
&lt;/Description&gt;<a xmlns="" name="d0t13096"/>
&lt;/CDDefinition&gt;<a xmlns="" name="d0t13097"/>


&lt;CDDefinition&gt;<a xmlns="" name="d0t13099"/>
&lt;Name&gt;<a xmlns="" name="d0t13101"/> CDReviewDate &lt;/Name&gt;<a xmlns="" name="d0t13102"/>
&lt;Description&gt;<a xmlns="" name="d0t13104"/>
An element which contains a date as a string in the ISO-8601
YYYY-MM-DD format. This gives the date at which the Content Dictionary
is next scheduled for review. It should be expected to be stable
until at least this date.
&lt;/Description&gt;<a xmlns="" name="d0t13105"/>
&lt;/CDDefinition&gt;<a xmlns="" name="d0t13106"/>

&lt;CDDefinition&gt;<a xmlns="" name="d0t13108"/>
&lt;Name&gt;<a xmlns="" name="d0t13110"/> CDStatus &lt;/Name&gt;<a xmlns="" name="d0t13111"/>
&lt;Description&gt;<a xmlns="" name="d0t13113"/>
An element giving information on the status of the CD.
The content of the element must be one of the following strings.

official (approved by the OpenMath Society),

experimental (currently being tested),

private (used by a private group of OpenMath users), or

obsolete (an obsolete CD kept only for archival purposes).
&lt;/Description&gt;<a xmlns="" name="d0t13114"/>
&lt;/CDDefinition&gt;<a xmlns="" name="d0t13115"/>

&lt;CDDefinition&gt;<a xmlns="" name="d0t13117"/>
&lt;Name&gt;<a xmlns="" name="d0t13119"/> CDComment &lt;/Name&gt;<a xmlns="" name="d0t13120"/>
&lt;Description&gt;<a xmlns="" name="d0t13122"/>
This symbol is used to represent the element of a content dictionary which
explains some aspect of that content dictionary. It should have one string
argument which makes that explanation.
&lt;/Description&gt;<a xmlns="" name="d0t13123"/>
&lt;/CDDefinition&gt;<a xmlns="" name="d0t13124"/>



&lt;CDDefinition&gt;<a xmlns="" name="d0t13126"/>
&lt;Name&gt;<a xmlns="" name="d0t13128"/> CDUses &lt;/Name&gt;<a xmlns="" name="d0t13129"/>
&lt;Description&gt;<a xmlns="" name="d0t13131"/>
An element which contains zero or more CDNames which correspond
to the CDs that this CD depends on, i.e. uses in examples and FMPs. If
the CD is dependent on any other CDs they must be present here. 
&lt;/Description&gt;<a xmlns="" name="d0t13132"/>
&lt;/CDDefinition&gt;<a xmlns="" name="d0t13133"/>

&lt;CDDefinition&gt;<a xmlns="" name="d0t13135"/>
&lt;Name&gt;<a xmlns="" name="d0t13137"/> Description &lt;/Name&gt;<a xmlns="" name="d0t13138"/>
&lt;Description&gt;<a xmlns="" name="d0t13140"/>
An element which contains a string corresponding to the
description of either the CD or the symbol
(depending on which is the enclosing element).
&lt;/Description&gt;<a xmlns="" name="d0t13141"/>
&lt;/CDDefinition&gt;<a xmlns="" name="d0t13142"/>

&lt;CDDefinition&gt;<a xmlns="" name="d0t13144"/>
&lt;Name&gt;<a xmlns="" name="d0t13146"/> Name &lt;/Name&gt;<a xmlns="" name="d0t13147"/>
&lt;Description&gt;<a xmlns="" name="d0t13149"/>
An element containing the string  corresponding to the name of
the symbol being defined. This must match the syntax for
symbol names given in the OpenMath Standard. Here and elsewhere white
space occurring at the begining or end of the string will be ignored.
&lt;/Description&gt;<a xmlns="" name="d0t13150"/>
&lt;/CDDefinition&gt;<a xmlns="" name="d0t13151"/>

&lt;CDDefinition&gt;<a xmlns="" name="d0t13153"/>
&lt;Name&gt;<a xmlns="" name="d0t13155"/> CMP &lt;/Name&gt;<a xmlns="" name="d0t13156"/>
&lt;Description&gt;<a xmlns="" name="d0t13158"/>
An optional element (which may be repeated many times) which contains
a string corresponding to a property of the symbol being
defined.
&lt;/Description&gt;<a xmlns="" name="d0t13159"/>
&lt;/CDDefinition&gt;<a xmlns="" name="d0t13160"/>

&lt;CDDefinition&gt;<a xmlns="" name="d0t13162"/>
&lt;Name&gt;<a xmlns="" name="d0t13164"/> FMP &lt;/Name&gt;<a xmlns="" name="d0t13165"/>
&lt;Description&gt;<a xmlns="" name="d0t13167"/>
An optional element which contains an OpenMath Object.
This corresponds to a property of the symbol being defined.
&lt;/Description&gt;<a xmlns="" name="d0t13168"/>
&lt;/CDDefinition&gt;<a xmlns="" name="d0t13169"/>

&lt;/CD&gt;


</pre></div>
</div>

<div><h3 name="arith1.ocd" id="arith1.ocd">A.2 The  <b>arith1</b> Content Dictionary File</h3>
  
  
  
<div class="literal"><pre>
&lt;CD&gt;<a xmlns="" name="d0t13184"/>

&lt;CDComment&gt;<a xmlns="" name="d0t13186"/>

     This document is distributed in the hope that it will be useful, 
     but WITHOUT ANY WARRANTY; without even the implied warranty of 
     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

     The copyright holder grants you permission to redistribute this 
     document freely as a verbatim copy. Furthermore, the copyright
     holder permits you to develop any derived work from this document
     provided that the following conditions are met.
       a) The derived work acknowledges the fact that it is derived from
          this document, and maintains a prominent reference in the 
          work to the original source.
       b) The fact that the derived work is not the original OpenMath 
          document is stated prominently in the derived work.  Moreover if
          both this document and the derived work are Content Dictionaries
          then the derived work must include a different CDName element,
          chosen so that it cannot be confused with any works adopted by
          the OpenMath Society.  In particular, if there is a Content 
      e    Dictionary Group whose name is, for example, `math' containing
          Content Dictionaries named `math1', `math2' etc., then you should 
          not name a derived Content Dictionary `mathN' where N is an integer.
          However you are free to name it `private_mathN' or some such.  This
          is because the names `mathN' may be used by the OpenMath Society
          for future extensions.
       c) The derived work is distributed under terms that allow the
          compilation of derived works, but keep paragraphs a) and b)
          intact.  The simplest way to do this is to distribute the derived
          work under the OpenMath license, but this is not a requirement.
     If you have questions about this license please contact the OpenMath
     society at http://www.openmath.org.
&lt;/CDComment&gt;<a xmlns="" name="d0t13187"/>

&lt;CDName&gt;<a xmlns="" name="d0t13189"/> arith1 &lt;/CDName&gt;<a xmlns="" name="d0t13190"/>
&lt;CDURL&gt;<a xmlns="" name="d0t13192"/> http://www.openmath.org/cd/arith1.ocd &lt;/CDURL&gt;<a xmlns="" name="d0t13193"/>
&lt;CDReviewDate&gt;<a xmlns="" name="d0t13195"/> 2003-04-01 &lt;/CDReviewDate&gt;<a xmlns="" name="d0t13196"/>
&lt;CDStatus&gt;<a xmlns="" name="d0t13198"/> official &lt;/CDStatus&gt;<a xmlns="" name="d0t13199"/>
&lt;CDDate&gt;<a xmlns="" name="d0t13201"/> 2002-05-31 &lt;/CDDate&gt;<a xmlns="" name="d0t13202"/>
&lt;CDVersion&gt;<a xmlns="" name="d0t13204"/> 2 &lt;/CDVersion&gt;<a xmlns="" name="d0t13205"/>
&lt;CDRevision&gt;<a xmlns="" name="d0t13207"/> 1 &lt;/CDRevision&gt;<a xmlns="" name="d0t13208"/>
&lt;CDUses&gt;<a xmlns="" name="d0t13210"/>
  &lt;CDName&gt;<a xmlns="" name="d0t13212"/>alg1&lt;/CDName&gt;<a xmlns="" name="d0t13213"/>
  &lt;CDName&gt;<a xmlns="" name="d0t13215"/>fns1&lt;/CDName&gt;<a xmlns="" name="d0t13216"/>
  &lt;CDName&gt;<a xmlns="" name="d0t13218"/>integer1&lt;/CDName&gt;<a xmlns="" name="d0t13219"/>
  &lt;CDName&gt;<a xmlns="" name="d0t13221"/>interval1&lt;/CDName&gt;<a xmlns="" name="d0t13222"/>
  &lt;CDName&gt;<a xmlns="" name="d0t13224"/>linalg2&lt;/CDName&gt;<a xmlns="" name="d0t13225"/>
  &lt;CDName&gt;<a xmlns="" name="d0t13227"/>logic1&lt;/CDName&gt;<a xmlns="" name="d0t13228"/>
  &lt;CDName&gt;<a xmlns="" name="d0t13230"/>quant1&lt;/CDName&gt;<a xmlns="" name="d0t13231"/>
  &lt;CDName&gt;<a xmlns="" name="d0t13233"/>relation1&lt;/CDName&gt;<a xmlns="" name="d0t13234"/>
  &lt;CDName&gt;<a xmlns="" name="d0t13236"/>set1&lt;/CDName&gt;<a xmlns="" name="d0t13237"/>
  &lt;CDName&gt;<a xmlns="" name="d0t13239"/>setname1&lt;/CDName&gt;<a xmlns="" name="d0t13240"/>
  &lt;CDName&gt;<a xmlns="" name="d0t13242"/>transc1&lt;/CDName&gt;<a xmlns="" name="d0t13243"/>
&lt;/CDUses&gt;<a xmlns="" name="d0t13244"/>

&lt;Description&gt;<a xmlns="" name="d0t13246"/> 
This CD defines symbols for common arithmetic functions.
&lt;/Description&gt;<a xmlns="" name="d0t13247"/>

&lt;CDDefinition&gt;<a xmlns="" name="d0t13249"/>
&lt;Name&gt;<a xmlns="" name="d0t13251"/> lcm &lt;/Name&gt;<a xmlns="" name="d0t13252"/>
&lt;Description&gt;<a xmlns="" name="d0t13254"/> 
The symbol to represent the n-ary function to return the least common
multiple of its arguments.
&lt;/Description&gt;<a xmlns="" name="d0t13255"/>

&lt;CMP&gt;<a xmlns="" name="d0t13257"/> lcm(a,b) = a*b/gcd(a,b) &lt;/CMP&gt;<a xmlns="" name="d0t13258"/>

&lt;FMP&gt;<a xmlns="" name="d0t13260"/>
&lt;OMOBJ&gt;<a xmlns="" name="d0t13262"/>
  &lt;OMA&gt;<a xmlns="" name="d0t13264"/>
    &lt;OMS cd="relation1" name="eq"/&gt;<a xmlns="" name="d0t13266"/>
    &lt;OMA&gt;<a xmlns="" name="d0t13268"/>
      &lt;OMS cd="arith1" name="lcm"/&gt;<a xmlns="" name="d0t13270"/>
      &lt;OMV name="a"/&gt;<a xmlns="" name="d0t13272"/>
      &lt;OMV name="b"/&gt;<a xmlns="" name="d0t13274"/>
    &lt;/OMA&gt;<a xmlns="" name="d0t13275"/>
    &lt;OMA&gt;<a xmlns="" name="d0t13277"/>
      &lt;OMS cd="arith1" name="divide"/&gt;<a xmlns="" name="d0t13279"/>
      &lt;OMA&gt;<a xmlns="" name="d0t13281"/>
        &lt;OMS cd="arith1" name="times"/&gt;<a xmlns="" name="d0t13283"/>
	&lt;OMV name="a"/&gt;<a xmlns="" name="d0t13285"/>
	&lt;OMV name="b"/&gt;<a xmlns="" name="d0t13287"/>
      &lt;/OMA&gt;<a xmlns="" name="d0t13288"/>
      &lt;OMA&gt;<a xmlns="" name="d0t13290"/>
        &lt;OMS cd="arith1" name="gcd"/&gt;<a xmlns="" name="d0t13292"/>
        &lt;OMV name="a"/&gt;<a xmlns="" name="d0t13294"/>
        &lt;OMV name="b"/&gt;<a xmlns="" name="d0t13296"/>
      &lt;/OMA&gt;<a xmlns="" name="d0t13297"/>
    &lt;/OMA&gt;<a xmlns="" name="d0t13298"/>
  &lt;/OMA&gt;<a xmlns="" name="d0t13299"/>
&lt;/OMOBJ&gt;<a xmlns="" name="d0t13300"/>
&lt;/FMP&gt;<a xmlns="" name="d0t13301"/>
&lt;CMP&gt;<a xmlns="" name="d0t13303"/>
for all integers a,b |
There does not exist a c&amp;gt;0 such that c/a is an Integer and c/b is an
Integer and lcm(a,b) &amp;gt; c.
&lt;/CMP&gt;<a xmlns="" name="d0t13304"/>

&lt;FMP&gt;<a xmlns="" name="d0t13306"/>
&lt;OMOBJ&gt;<a xmlns="" name="d0t13308"/>
&lt;OMBIND&gt;<a xmlns="" name="d0t13310"/>
  &lt;OMS cd="quant1" name="forall"/&gt;<a xmlns="" name="d0t13312"/>
  &lt;OMBVAR&gt;<a xmlns="" name="d0t13314"/>
    &lt;OMV name="a"/&gt;<a xmlns="" name="d0t13316"/>
    &lt;OMV name="b"/&gt;<a xmlns="" name="d0t13318"/>
  &lt;/OMBVAR&gt;<a xmlns="" name="d0t13319"/>
  &lt;OMA&gt;<a xmlns="" name="d0t13321"/>
    &lt;OMS cd="logic1" name="implies"/&gt;<a xmlns="" name="d0t13323"/>
    &lt;OMA&gt;<a xmlns="" name="d0t13325"/>
      &lt;OMS cd="logic1" name="and"/&gt;<a xmlns="" name="d0t13327"/>
      &lt;OMA&gt;<a xmlns="" name="d0t13329"/>
        &lt;OMS cd="set1" name="in"/&gt;<a xmlns="" name="d0t13331"/>
	&lt;OMV name="a"/&gt;<a xmlns="" name="d0t13333"/>
	&lt;OMS cd="setname1" name="Z"/&gt;<a xmlns="" name="d0t13335"/>
      &lt;/OMA&gt;<a xmlns="" name="d0t13336"/>
      &lt;OMA&gt;<a xmlns="" name="d0t13338"/>
        &lt;OMS cd="set1" name="in"/&gt;<a xmlns="" name="d0t13340"/>
	&lt;OMV name="b"/&gt;<a xmlns="" name="d0t13342"/>
	&lt;OMS cd="setname1" name="Z"/&gt;<a xmlns="" name="d0t13344"/>
      &lt;/OMA&gt;<a xmlns="" name="d0t13345"/>
    &lt;/OMA&gt;<a xmlns="" name="d0t13346"/>
    &lt;OMA&gt;<a xmlns="" name="d0t13348"/>
      &lt;OMS cd="logic1" name="not"/&gt;<a xmlns="" name="d0t13350"/>
      &lt;OMBIND&gt;<a xmlns="" name="d0t13352"/>
        &lt;OMS cd="quant1" name="exists"/&gt;<a xmlns="" name="d0t13354"/>
        &lt;OMBVAR&gt;<a xmlns="" name="d0t13356"/>
          &lt;OMV name="c"/&gt;<a xmlns="" name="d0t13358"/>
        &lt;/OMBVAR&gt;<a xmlns="" name="d0t13359"/>
        &lt;OMA&gt;<a xmlns="" name="d0t13361"/>
          &lt;OMS cd="logic1" name="and"/&gt;<a xmlns="" name="d0t13363"/>
          &lt;OMA&gt;<a xmlns="" name="d0t13365"/>
            &lt;OMS cd="relation1" name="gt"/&gt;<a xmlns="" name="d0t13367"/>
              &lt;OMV name="c"/&gt;<a xmlns="" name="d0t13369"/>
              &lt;OMI&gt;<a xmlns="" name="d0t13371"/>0&lt;/OMI&gt;<a xmlns="" name="d0t13372"/>
          &lt;/OMA&gt;<a xmlns="" name="d0t13373"/>
          &lt;OMA&gt;<a xmlns="" name="d0t13375"/>
            &lt;OMS cd="integer1" name="factorof"/&gt;<a xmlns="" name="d0t13377"/>
              &lt;OMV name="a"/&gt;<a xmlns="" name="d0t13379"/>
              &lt;OMV name="c"/&gt;<a xmlns="" name="d0t13381"/>
          &lt;/OMA&gt;<a xmlns="" name="d0t13382"/>
          &lt;OMA&gt;<a xmlns="" name="d0t13384"/>
            &lt;OMS cd="integer1" name="factorof"/&gt;<a xmlns="" name="d0t13386"/>
              &lt;OMV name="b"/&gt;<a xmlns="" name="d0t13388"/>
              &lt;OMV name="c"/&gt;<a xmlns="" name="d0t13390"/>
          &lt;/OMA&gt;<a xmlns="" name="d0t13391"/>
          &lt;OMA&gt;<a xmlns="" name="d0t13393"/>
            &lt;OMS cd="relation1" name="lt"/&gt;<a xmlns="" name="d0t13395"/>
            &lt;OMV name="c"/&gt;<a xmlns="" name="d0t13397"/>
            &lt;OMA&gt;<a xmlns="" name="d0t13399"/>
              &lt;OMS cd="arith1" name="lcm"/&gt;<a xmlns="" name="d0t13401"/>
              &lt;OMV name="a"/&gt;<a xmlns="" name="d0t13403"/>
              &lt;OMV name="b"/&gt;<a xmlns="" name="d0t13405"/>
            &lt;/OMA&gt;<a xmlns="" name="d0t13406"/>
          &lt;/OMA&gt;<a xmlns="" name="d0t13407"/>
        &lt;/OMA&gt;<a xmlns="" name="d0t13408"/>
      &lt;/OMBIND&gt;<a xmlns="" name="d0t13409"/>
    &lt;/OMA&gt;<a xmlns="" name="d0t13410"/>
  &lt;/OMA&gt;<a xmlns="" name="d0t13411"/>
&lt;/OMBIND&gt;<a xmlns="" name="d0t13412"/>
&lt;/OMOBJ&gt;<a xmlns="" name="d0t13413"/>
&lt;/FMP&gt;<a xmlns="" name="d0t13414"/>
&lt;/CDDefinition&gt;<a xmlns="" name="d0t13415"/>

&lt;CDDefinition&gt;<a xmlns="" name="d0t13417"/>
&lt;Name&gt;<a xmlns="" name="d0t13419"/> gcd &lt;/Name&gt;<a xmlns="" name="d0t13420"/>
&lt;Description&gt;<a xmlns="" name="d0t13422"/> 
The symbol to represent the n-ary function to return the gcd (greatest
common divisor) of its arguments.
&lt;/Description&gt;<a xmlns="" name="d0t13423"/>

&lt;CMP&gt;<a xmlns="" name="d0t13425"/>
for all integers a,b |
There does not exist a c such that a/c is an Integer and b/c is an
Integer and c &amp;gt; gcd(a,b).

Note that this implies that gcd(a,b) &amp;gt; 0
&lt;/CMP&gt;<a xmlns="" name="d0t13426"/>

&lt;FMP&gt;<a xmlns="" name="d0t13428"/>
&lt;OMOBJ&gt;<a xmlns="" name="d0t13430"/>
&lt;OMBIND&gt;<a xmlns="" name="d0t13432"/>
  &lt;OMS cd="quant1" name="forall"/&gt;<a xmlns="" name="d0t13434"/>
  &lt;OMBVAR&gt;<a xmlns="" name="d0t13436"/>
    &lt;OMV name="a"/&gt;<a xmlns="" name="d0t13438"/>
    &lt;OMV name="b"/&gt;<a xmlns="" name="d0t13440"/>
  &lt;/OMBVAR&gt;<a xmlns="" name="d0t13441"/>
  &lt;OMA&gt;<a xmlns="" name="d0t13443"/>
    &lt;OMS cd="logic1" name="implies"/&gt;<a xmlns="" name="d0t13445"/>
    &lt;OMA&gt;<a xmlns="" name="d0t13447"/>
      &lt;OMS cd="logic1" name="and"/&gt;<a xmlns="" name="d0t13449"/>
      &lt;OMA&gt;<a xmlns="" name="d0t13451"/>
        &lt;OMS cd="set1" name="in"/&gt;<a xmlns="" name="d0t13453"/>
	&lt;OMV name="a"/&gt;<a xmlns="" name="d0t13455"/>
	&lt;OMS cd="setname1" name="Z"/&gt;<a xmlns="" name="d0t13457"/>
      &lt;/OMA&gt;<a xmlns="" name="d0t13458"/>
      &lt;OMA&gt;<a xmlns="" name="d0t13460"/>
        &lt;OMS cd="set1" name="in"/&gt;<a xmlns="" name="d0t13462"/>
	&lt;OMV name="b"/&gt;<a xmlns="" name="d0t13464"/>
	&lt;OMS cd="setname1" name="Z"/&gt;<a xmlns="" name="d0t13466"/>
      &lt;/OMA&gt;<a xmlns="" name="d0t13467"/>
    &lt;/OMA&gt;<a xmlns="" name="d0t13468"/>
    &lt;OMA&gt;<a xmlns="" name="d0t13470"/>
      &lt;OMS cd="logic1" name="not"/&gt;<a xmlns="" name="d0t13472"/>
      &lt;OMBIND&gt;<a xmlns="" name="d0t13474"/>
        &lt;OMS cd="quant1" name="exists"/&gt;<a xmlns="" name="d0t13476"/>
        &lt;OMBVAR&gt;<a xmlns="" name="d0t13478"/>
          &lt;OMV name="c"/&gt;<a xmlns="" name="d0t13480"/>
        &lt;/OMBVAR&gt;<a xmlns="" name="d0t13481"/>
        &lt;OMA&gt;<a xmlns="" name="d0t13483"/>
          &lt;OMS cd="logic1" name="and"/&gt;<a xmlns="" name="d0t13485"/>
          &lt;OMA&gt;<a xmlns="" name="d0t13487"/>
            &lt;OMS cd="set1" name="in"/&gt;<a xmlns="" name="d0t13489"/>
            &lt;OMA&gt;<a xmlns="" name="d0t13491"/>
              &lt;OMS cd="arith1" name="divide"/&gt;<a xmlns="" name="d0t13493"/>
              &lt;OMV name="a"/&gt;<a xmlns="" name="d0t13495"/>
              &lt;OMV name="c"/&gt;<a xmlns="" name="d0t13497"/>
            &lt;/OMA&gt;<a xmlns="" name="d0t13498"/>
            &lt;OMS cd="setname1" name="Z"/&gt;<a xmlns="" name="d0t13500"/>
          &lt;/OMA&gt;<a xmlns="" name="d0t13501"/>
          &lt;OMA&gt;<a xmlns="" name="d0t13503"/>
            &lt;OMS cd="set1" name="in"/&gt;<a xmlns="" name="d0t13505"/>
            &lt;OMA&gt;<a xmlns="" name="d0t13507"/>
              &lt;OMS cd="arith1" name="divide"/&gt;<a xmlns="" name="d0t13509"/>
              &lt;OMV name="b"/&gt;<a xmlns="" name="d0t13511"/>
              &lt;OMV name="c"/&gt;<a xmlns="" name="d0t13513"/>
            &lt;/OMA&gt;<a xmlns="" name="d0t13514"/>
            &lt;OMS cd="setname1" name="Z"/&gt;<a xmlns="" name="d0t13516"/>
          &lt;/OMA&gt;<a xmlns="" name="d0t13517"/>
          &lt;OMA&gt;<a xmlns="" name="d0t13519"/>
            &lt;OMS cd="relation1" name="gt"/&gt;<a xmlns="" name="d0t13521"/>
            &lt;OMV name="c"/&gt;<a xmlns="" name="d0t13523"/>
            &lt;OMA&gt;<a xmlns="" name="d0t13525"/>
              &lt;OMS cd="arith1" name="gcd"/&gt;<a xmlns="" name="d0t13527"/>
              &lt;OMV name="a"/&gt;<a xmlns="" name="d0t13529"/>
              &lt;OMV name="b"/&gt;<a xmlns="" name="d0t13531"/>
            &lt;/OMA&gt;<a xmlns="" name="d0t13532"/>
          &lt;/OMA&gt;<a xmlns="" name="d0t13533"/>
        &lt;/OMA&gt;<a xmlns="" name="d0t13534"/>
      &lt;/OMBIND&gt;<a xmlns="" name="d0t13535"/>
    &lt;/OMA&gt;<a xmlns="" name="d0t13536"/>
  &lt;/OMA&gt;<a xmlns="" name="d0t13537"/>
&lt;/OMBIND&gt;<a xmlns="" name="d0t13538"/>
&lt;/OMOBJ&gt;<a xmlns="" name="d0t13539"/>
&lt;/FMP&gt;<a xmlns="" name="d0t13540"/>

&lt;Example&gt;<a xmlns="" name="d0t13542"/>
gcd(6,9) = 3
&lt;OMOBJ&gt;<a xmlns="" name="d0t13544"/>
  &lt;OMA&gt;<a xmlns="" name="d0t13546"/>
    &lt;OMS cd="relation1" name="eq"/&gt;<a xmlns="" name="d0t13548"/>
    &lt;OMA&gt;<a xmlns="" name="d0t13550"/>
      &lt;OMS cd="arith1" name="gcd"/&gt;<a xmlns="" name="d0t13552"/>
      &lt;OMI&gt;<a xmlns="" name="d0t13554"/> 6 &lt;/OMI&gt;<a xmlns="" name="d0t13555"/>
      &lt;OMI&gt;<a xmlns="" name="d0t13557"/> 9 &lt;/OMI&gt;<a xmlns="" name="d0t13558"/>
    &lt;/OMA&gt;<a xmlns="" name="d0t13559"/>
    &lt;OMI&gt;<a xmlns="" name="d0t13561"/> 3 &lt;/OMI&gt;<a xmlns="" name="d0t13562"/>
  &lt;/OMA&gt;<a xmlns="" name="d0t13563"/>
&lt;/OMOBJ&gt;<a xmlns="" name="d0t13564"/>
&lt;/Example&gt;<a xmlns="" name="d0t13565"/>
&lt;/CDDefinition&gt;<a xmlns="" name="d0t13566"/>

&lt;CDDefinition&gt;<a xmlns="" name="d0t13568"/>
&lt;Name&gt;<a xmlns="" name="d0t13570"/> plus &lt;/Name&gt;<a xmlns="" name="d0t13571"/>
&lt;Description&gt;<a xmlns="" name="d0t13573"/>
The symbol representing an n-ary commutative function plus.
&lt;/Description&gt;<a xmlns="" name="d0t13574"/>
&lt;CMP&gt;<a xmlns="" name="d0t13576"/> for all a,b | a + b = b + a &lt;/CMP&gt;<a xmlns="" name="d0t13577"/>
&lt;FMP&gt;<a xmlns="" name="d0t13579"/>
&lt;OMOBJ&gt;<a xmlns="" name="d0t13581"/>
  &lt;OMBIND&gt;<a xmlns="" name="d0t13583"/>
    &lt;OMS cd="quant1" name="forall"/&gt;<a xmlns="" name="d0t13585"/>
    &lt;OMBVAR&gt;<a xmlns="" name="d0t13587"/>
       &lt;OMV name="a"/&gt;<a xmlns="" name="d0t13589"/>
       &lt;OMV name="b"/&gt;<a xmlns="" name="d0t13591"/>
    &lt;/OMBVAR&gt;<a xmlns="" name="d0t13592"/>
    &lt;OMA&gt;<a xmlns="" name="d0t13594"/>
      &lt;OMS cd="relation1" name="eq"/&gt;<a xmlns="" name="d0t13596"/>
      &lt;OMA&gt;<a xmlns="" name="d0t13598"/>
        &lt;OMS cd="arith1" name="plus"/&gt;<a xmlns="" name="d0t13600"/>
        &lt;OMV name="a"/&gt;<a xmlns="" name="d0t13602"/>
        &lt;OMV name="b"/&gt;<a xmlns="" name="d0t13604"/>
      &lt;/OMA&gt;<a xmlns="" name="d0t13605"/>
      &lt;OMA&gt;<a xmlns="" name="d0t13607"/>
        &lt;OMS cd="arith1" name="plus"/&gt;<a xmlns="" name="d0t13609"/>
        &lt;OMV name="b"/&gt;<a xmlns="" name="d0t13611"/>
        &lt;OMV name="a"/&gt;<a xmlns="" name="d0t13613"/>
      &lt;/OMA&gt;<a xmlns="" name="d0t13614"/>
    &lt;/OMA&gt;<a xmlns="" name="d0t13615"/>
  &lt;/OMBIND&gt;<a xmlns="" name="d0t13616"/>
&lt;/OMOBJ&gt;<a xmlns="" name="d0t13617"/>
&lt;/FMP&gt;<a xmlns="" name="d0t13618"/>
&lt;/CDDefinition&gt;<a xmlns="" name="d0t13619"/>

&lt;CDDefinition&gt;<a xmlns="" name="d0t13621"/>
&lt;Name&gt;<a xmlns="" name="d0t13623"/> unary_minus &lt;/Name&gt;<a xmlns="" name="d0t13624"/>
&lt;Description&gt;<a xmlns="" name="d0t13626"/> 
This symbol denotes unary minus, i.e. the additive inverse.
&lt;/Description&gt;<a xmlns="" name="d0t13627"/>
&lt;CMP&gt;<a xmlns="" name="d0t13629"/> for all a | a + (-a) = 0 &lt;/CMP&gt;<a xmlns="" name="d0t13630"/>
&lt;FMP&gt;<a xmlns="" name="d0t13632"/>
&lt;OMOBJ&gt;<a xmlns="" name="d0t13634"/>
  &lt;OMBIND&gt;<a xmlns="" name="d0t13636"/>
    &lt;OMS cd="quant1" name="forall"/&gt;<a xmlns="" name="d0t13638"/>
    &lt;OMBVAR&gt;<a xmlns="" name="d0t13640"/>
       &lt;OMV name="a"/&gt;<a xmlns="" name="d0t13642"/>
    &lt;/OMBVAR&gt;<a xmlns="" name="d0t13643"/>
    &lt;OMA&gt;<a xmlns="" name="d0t13645"/>
      &lt;OMS cd="relation1" name="eq"/&gt;<a xmlns="" name="d0t13647"/>
      &lt;OMA&gt;<a xmlns="" name="d0t13649"/>
        &lt;OMS cd="arith1" name="plus"/&gt;<a xmlns="" name="d0t13651"/>
        &lt;OMV name="a"/&gt;<a xmlns="" name="d0t13653"/>
        &lt;OMA&gt;<a xmlns="" name="d0t13655"/>
           &lt;OMS cd="arith1" name="unary_minus"/&gt;<a xmlns="" name="d0t13657"/>
           &lt;OMV name="a"/&gt;<a xmlns="" name="d0t13659"/>
        &lt;/OMA&gt;<a xmlns="" name="d0t13660"/>
      &lt;/OMA&gt;<a xmlns="" name="d0t13661"/>
      &lt;OMS cd="alg1" name="zero"/&gt;<a xmlns="" name="d0t13663"/>
    &lt;/OMA&gt;<a xmlns="" name="d0t13664"/>
  &lt;/OMBIND&gt;<a xmlns="" name="d0t13665"/>
&lt;/OMOBJ&gt;<a xmlns="" name="d0t13666"/>
&lt;/FMP&gt;<a xmlns="" name="d0t13667"/>
&lt;/CDDefinition&gt;<a xmlns="" name="d0t13668"/>

&lt;CDDefinition&gt;<a xmlns="" name="d0t13670"/>
&lt;Name&gt;<a xmlns="" name="d0t13672"/> minus &lt;/Name&gt;<a xmlns="" name="d0t13673"/>
&lt;Description&gt;<a xmlns="" name="d0t13675"/> 
The symbol representing a binary minus function. This is equivalent to
adding the additive inverse.
&lt;/Description&gt;<a xmlns="" name="d0t13676"/>
&lt;CMP&gt;<a xmlns="" name="d0t13678"/> for all a,b | a - b = a + (-b) &lt;/CMP&gt;<a xmlns="" name="d0t13679"/>
&lt;FMP&gt;<a xmlns="" name="d0t13681"/>
&lt;OMOBJ&gt;<a xmlns="" name="d0t13683"/>
  &lt;OMBIND&gt;<a xmlns="" name="d0t13685"/>
    &lt;OMS cd="quant1" name="forall"/&gt;<a xmlns="" name="d0t13687"/>
    &lt;OMBVAR&gt;<a xmlns="" name="d0t13689"/>
       &lt;OMV name="a"/&gt;<a xmlns="" name="d0t13691"/>
       &lt;OMV name="b"/&gt;<a xmlns="" name="d0t13693"/>
    &lt;/OMBVAR&gt;<a xmlns="" name="d0t13694"/>
    &lt;OMA&gt;<a xmlns="" name="d0t13696"/>
      &lt;OMS cd="relation1" name="eq"/&gt;<a xmlns="" name="d0t13698"/>
      &lt;OMA&gt;<a xmlns="" name="d0t13700"/>
        &lt;OMS cd="arith1" name="minus"/&gt;<a xmlns="" name="d0t13702"/>
        &lt;OMV name="a"/&gt;<a xmlns="" name="d0t13704"/>
        &lt;OMV name="b"/&gt;<a xmlns="" name="d0t13706"/>
      &lt;/OMA&gt;<a xmlns="" name="d0t13707"/>
      &lt;OMA&gt;<a xmlns="" name="d0t13709"/>
        &lt;OMS cd="arith1" name="plus"/&gt;<a xmlns="" name="d0t13711"/>
        &lt;OMV name="a"/&gt;<a xmlns="" name="d0t13713"/>
        &lt;OMA&gt;<a xmlns="" name="d0t13715"/>
          &lt;OMS cd="arith1" name="unary_minus"/&gt;<a xmlns="" name="d0t13717"/>
          &lt;OMV name="b"/&gt;<a xmlns="" name="d0t13719"/>
        &lt;/OMA&gt;<a xmlns="" name="d0t13720"/>
      &lt;/OMA&gt;<a xmlns="" name="d0t13721"/>
    &lt;/OMA&gt;<a xmlns="" name="d0t13722"/>
  &lt;/OMBIND&gt;<a xmlns="" name="d0t13723"/>
&lt;/OMOBJ&gt;<a xmlns="" name="d0t13724"/>
&lt;/FMP&gt;<a xmlns="" name="d0t13725"/>
&lt;/CDDefinition&gt;<a xmlns="" name="d0t13726"/>

&lt;CDDefinition&gt;<a xmlns="" name="d0t13728"/>
&lt;Name&gt;<a xmlns="" name="d0t13730"/> times &lt;/Name&gt;<a xmlns="" name="d0t13731"/>
&lt;Description&gt;<a xmlns="" name="d0t13733"/> 
The symbol representing an n-ary multiplication function.
&lt;/Description&gt;<a xmlns="" name="d0t13734"/>
&lt;Example&gt;<a xmlns="" name="d0t13736"/>
&lt;OMOBJ&gt;<a xmlns="" name="d0t13738"/>
&lt;OMA&gt;<a xmlns="" name="d0t13740"/>
  &lt;OMS cd="relation1" name="eq"/&gt;<a xmlns="" name="d0t13742"/>
  &lt;OMA&gt;<a xmlns="" name="d0t13744"/>
    &lt;OMS cd="arith1" name="times"/&gt;<a xmlns="" name="d0t13746"/>
    &lt;OMA&gt;<a xmlns="" name="d0t13748"/>
      &lt;OMS cd="linalg2" name="matrix"/&gt;<a xmlns="" name="d0t13750"/>
      &lt;OMA&gt;<a xmlns="" name="d0t13752"/>
        &lt;OMS cd="linalg2" name="matrixrow"/&gt;<a xmlns="" name="d0t13754"/>
        &lt;OMI&gt;<a xmlns="" name="d0t13756"/> 1 &lt;/OMI&gt;<a xmlns="" name="d0t13757"/>
        &lt;OMI&gt;<a xmlns="" name="d0t13759"/> 2 &lt;/OMI&gt;<a xmlns="" name="d0t13760"/>
      &lt;/OMA&gt;<a xmlns="" name="d0t13761"/>
      &lt;OMA&gt;<a xmlns="" name="d0t13763"/>
        &lt;OMS cd="linalg2" name="matrixrow"/&gt;<a xmlns="" name="d0t13765"/>
        &lt;OMI&gt;<a xmlns="" name="d0t13767"/> 3 &lt;/OMI&gt;<a xmlns="" name="d0t13768"/>
        &lt;OMI&gt;<a xmlns="" name="d0t13770"/> 4 &lt;/OMI&gt;<a xmlns="" name="d0t13771"/>
      &lt;/OMA&gt;<a xmlns="" name="d0t13772"/>
    &lt;/OMA&gt;<a xmlns="" name="d0t13773"/>
    &lt;OMA&gt;<a xmlns="" name="d0t13775"/>
      &lt;OMS cd="linalg2" name="matrix"/&gt;<a xmlns="" name="d0t13777"/>
      &lt;OMA&gt;<a xmlns="" name="d0t13779"/>
        &lt;OMS cd="linalg2" name="matrixrow"/&gt;<a xmlns="" name="d0t13781"/>
        &lt;OMI&gt;<a xmlns="" name="d0t13783"/> 5 &lt;/OMI&gt;<a xmlns="" name="d0t13784"/>
        &lt;OMI&gt;<a xmlns="" name="d0t13786"/> 6 &lt;/OMI&gt;<a xmlns="" name="d0t13787"/>
      &lt;/OMA&gt;<a xmlns="" name="d0t13788"/>
      &lt;OMA&gt;<a xmlns="" name="d0t13790"/>
        &lt;OMS cd="linalg2" name="matrixrow"/&gt;<a xmlns="" name="d0t13792"/>
        &lt;OMI&gt;<a xmlns="" name="d0t13794"/> 7 &lt;/OMI&gt;<a xmlns="" name="d0t13795"/>
        &lt;OMI&gt;<a xmlns="" name="d0t13797"/> 8 &lt;/OMI&gt;<a xmlns="" name="d0t13798"/>
      &lt;/OMA&gt;<a xmlns="" name="d0t13799"/>
    &lt;/OMA&gt;<a xmlns="" name="d0t13800"/>
  &lt;/OMA&gt;<a xmlns="" name="d0t13801"/>
  &lt;OMA&gt;<a xmlns="" name="d0t13803"/>
    &lt;OMS cd="linalg2" name="matrix"/&gt;<a xmlns="" name="d0t13805"/>
    &lt;OMA&gt;<a xmlns="" name="d0t13807"/>
      &lt;OMS cd="linalg2" name="matrixrow"/&gt;<a xmlns="" name="d0t13809"/>
      &lt;OMI&gt;<a xmlns="" name="d0t13811"/> 19 &lt;/OMI&gt;<a xmlns="" name="d0t13812"/>
      &lt;OMI&gt;<a xmlns="" name="d0t13814"/> 20 &lt;/OMI&gt;<a xmlns="" name="d0t13815"/>
    &lt;/OMA&gt;<a xmlns="" name="d0t13816"/>
    &lt;OMA&gt;<a xmlns="" name="d0t13818"/>
      &lt;OMS cd="linalg2" name="matrixrow"/&gt;<a xmlns="" name="d0t13820"/>
      &lt;OMI&gt;<a xmlns="" name="d0t13822"/> 43 &lt;/OMI&gt;<a xmlns="" name="d0t13823"/>
      &lt;OMI&gt;<a xmlns="" name="d0t13825"/> 50 &lt;/OMI&gt;<a xmlns="" name="d0t13826"/>
    &lt;/OMA&gt;<a xmlns="" name="d0t13827"/>
  &lt;/OMA&gt;<a xmlns="" name="d0t13828"/>
&lt;/OMA&gt;<a xmlns="" name="d0t13829"/>
&lt;/OMOBJ&gt;<a xmlns="" name="d0t13830"/>
&lt;/Example&gt;<a xmlns="" name="d0t13831"/>
&lt;CMP&gt;<a xmlns="" name="d0t13833"/> for all a,b | a * 0 = 0 and a * b = a * (b - 1) + a &lt;/CMP&gt;<a xmlns="" name="d0t13834"/>

&lt;FMP&gt;&lt;OMOBJ&gt;<a xmlns="" name="d0t13837"/>
&lt;OMBIND&gt;<a xmlns="" name="d0t13839"/>
  &lt;OMS cd="quant1" name="forall"/&gt;<a xmlns="" name="d0t13841"/>
  &lt;OMBVAR&gt;<a xmlns="" name="d0t13843"/>
    &lt;OMV name="a"/&gt;<a xmlns="" name="d0t13845"/>
    &lt;OMV name="b"/&gt;<a xmlns="" name="d0t13847"/>
  &lt;/OMBVAR&gt;<a xmlns="" name="d0t13848"/>
  &lt;OMA&gt;<a xmlns="" name="d0t13850"/>
    &lt;OMS cd="logic1" name="and"/&gt;<a xmlns="" name="d0t13852"/>
    &lt;OMA&gt;<a xmlns="" name="d0t13854"/>
      &lt;OMS cd="relation1" name="eq"/&gt;<a xmlns="" name="d0t13856"/>
      &lt;OMA&gt;<a xmlns="" name="d0t13858"/>
        &lt;OMS cd="arith1" name="times"/&gt;<a xmlns="" name="d0t13860"/>
        &lt;OMV name="a"/&gt;<a xmlns="" name="d0t13862"/>
        &lt;OMS cd="alg1" name="zero"/&gt;<a xmlns="" name="d0t13864"/>
      &lt;/OMA&gt;<a xmlns="" name="d0t13865"/>
      &lt;OMS cd="alg1" name="zero"/&gt;<a xmlns="" name="d0t13867"/>
    &lt;/OMA&gt;<a xmlns="" name="d0t13868"/>
    &lt;OMA&gt;<a xmlns="" name="d0t13870"/>
      &lt;OMS cd="relation1" name="eq"/&gt;<a xmlns="" name="d0t13872"/>
      &lt;OMA&gt;<a xmlns="" name="d0t13874"/>
        &lt;OMS cd="arith1" name="times"/&gt;<a xmlns="" name="d0t13876"/>
	&lt;OMV name="a"/&gt;<a xmlns="" name="d0t13878"/>
	&lt;OMV name="b"/&gt;<a xmlns="" name="d0t13880"/>
      &lt;/OMA&gt;<a xmlns="" name="d0t13881"/>
      &lt;OMA&gt;<a xmlns="" name="d0t13883"/>
        &lt;OMS cd="arith1" name="plus"/&gt;<a xmlns="" name="d0t13885"/>
	&lt;OMA&gt;<a xmlns="" name="d0t13887"/>
	  &lt;OMS cd="arith1" name="times"/&gt;<a xmlns="" name="d0t13889"/>
	  &lt;OMV name="a"/&gt;<a xmlns="" name="d0t13891"/>
	  &lt;OMA&gt;<a xmlns="" name="d0t13893"/>
	    &lt;OMS cd="arith1" name="minus"/&gt;<a xmlns="" name="d0t13895"/>
	    &lt;OMV name="b"/&gt;<a xmlns="" name="d0t13897"/>
	    &lt;OMS cd="alg1" name="one"/&gt;<a xmlns="" name="d0t13899"/>
	  &lt;/OMA&gt;<a xmlns="" name="d0t13900"/>
	&lt;/OMA&gt;<a xmlns="" name="d0t13901"/>
	&lt;OMV name="a"/&gt;<a xmlns="" name="d0t13903"/>
      &lt;/OMA&gt;<a xmlns="" name="d0t13904"/>
    &lt;/OMA&gt;<a xmlns="" name="d0t13905"/>
  &lt;/OMA&gt;<a xmlns="" name="d0t13906"/>
&lt;/OMBIND&gt;<a xmlns="" name="d0t13907"/>
&lt;/OMOBJ&gt;&lt;/FMP&gt;<a xmlns="" name="d0t13908"/>

&lt;CMP&gt;<a xmlns="" name="d0t13910"/> for all a,b,c | a*(b+c) = a*b + a*c &lt;/CMP&gt;<a xmlns="" name="d0t13911"/>
&lt;FMP&gt;&lt;OMOBJ&gt;<a xmlns="" name="d0t13914"/>
&lt;OMBIND&gt;<a xmlns="" name="d0t13916"/>
  &lt;OMS cd="quant1" name="forall"/&gt;<a xmlns="" name="d0t13918"/>
  &lt;OMBVAR&gt;<a xmlns="" name="d0t13920"/>
    &lt;OMV name="a"/&gt;<a xmlns="" name="d0t13922"/>
    &lt;OMV name="b"/&gt;<a xmlns="" name="d0t13924"/>
    &lt;OMV name="c"/&gt;<a xmlns="" name="d0t13926"/>
  &lt;/OMBVAR&gt;<a xmlns="" name="d0t13927"/>
  &lt;OMA&gt;<a xmlns="" name="d0t13929"/>
    &lt;OMS cd="relation1" name="eq"/&gt;<a xmlns="" name="d0t13931"/>
    &lt;OMA&gt;<a xmlns="" name="d0t13933"/>
      &lt;OMS cd="arith1" name="times"/&gt;<a xmlns="" name="d0t13935"/>
      &lt;OMV name="a"/&gt;<a xmlns="" name="d0t13937"/>
      &lt;OMA&gt;<a xmlns="" name="d0t13939"/>
        &lt;OMS cd="arith1" name="plus"/&gt;<a xmlns="" name="d0t13941"/>
	&lt;OMV name="b"/&gt;<a xmlns="" name="d0t13943"/>
	&lt;OMV name="c"/&gt;<a xmlns="" name="d0t13945"/>
      &lt;/OMA&gt;<a xmlns="" name="d0t13946"/>
    &lt;/OMA&gt;<a xmlns="" name="d0t13947"/>
    &lt;OMA&gt;<a xmlns="" name="d0t13949"/>
      &lt;OMS cd="arith1" name="plus"/&gt;<a xmlns="" name="d0t13951"/>
      &lt;OMA&gt;<a xmlns="" name="d0t13953"/>
        &lt;OMS cd="arith1" name="times"/&gt;<a xmlns="" name="d0t13955"/>
	&lt;OMV name="a"/&gt;<a xmlns="" name="d0t13957"/>
	&lt;OMV name="b"/&gt;<a xmlns="" name="d0t13959"/>
      &lt;/OMA&gt;<a xmlns="" name="d0t13960"/>
      &lt;OMA&gt;<a xmlns="" name="d0t13962"/>
        &lt;OMS cd="arith1" name="times"/&gt;<a xmlns="" name="d0t13964"/>
	&lt;OMV name="a"/&gt;<a xmlns="" name="d0t13966"/>
	&lt;OMV name="c"/&gt;<a xmlns="" name="d0t13968"/>
      &lt;/OMA&gt;<a xmlns="" name="d0t13969"/>
    &lt;/OMA&gt;<a xmlns="" name="d0t13970"/>
  &lt;/OMA&gt;<a xmlns="" name="d0t13971"/>
&lt;/OMBIND&gt;<a xmlns="" name="d0t13972"/>
&lt;/OMOBJ&gt;&lt;/FMP&gt;<a xmlns="" name="d0t13973"/>
&lt;/CDDefinition&gt;<a xmlns="" name="d0t13974"/>

&lt;CDDefinition&gt;<a xmlns="" name="d0t13976"/>
&lt;Name&gt;<a xmlns="" name="d0t13978"/> divide &lt;/Name&gt;<a xmlns="" name="d0t13979"/>
&lt;Description&gt;<a xmlns="" name="d0t13981"/>
This symbol represents a (binary) division function denoting the first argument
right-divided by the second, i.e. divide(a,b)=a*inverse(b). It is the
inverse of the multiplication function defined by the symbol times in this CD.
&lt;/Description&gt;<a xmlns="" name="d0t13982"/>
&lt;CMP&gt;<a xmlns="" name="d0t13984"/> whenever not(a=0) then a/a = 1 &lt;/CMP&gt;<a xmlns="" name="d0t13985"/>
&lt;FMP&gt;<a xmlns="" name="d0t13987"/>
&lt;OMOBJ&gt;<a xmlns="" name="d0t13989"/>
  &lt;OMBIND&gt;<a xmlns="" name="d0t13991"/>
    &lt;OMS cd="quant1" name="forall"/&gt;<a xmlns="" name="d0t13993"/>
    &lt;OMBVAR&gt;<a xmlns="" name="d0t13995"/>
       &lt;OMV name="a"/&gt;<a xmlns="" name="d0t13997"/>
    &lt;/OMBVAR&gt;<a xmlns="" name="d0t13998"/>
    &lt;OMA&gt;<a xmlns="" name="d0t14000"/>
      &lt;OMS cd="logic1" name="implies"/&gt;<a xmlns="" name="d0t14002"/>
      &lt;OMA&gt;<a xmlns="" name="d0t14004"/>
        &lt;OMS cd="relation1" name="neq"/&gt;<a xmlns="" name="d0t14006"/>
        &lt;OMV name="a"/&gt;<a xmlns="" name="d0t14008"/>
        &lt;OMS cd="alg1" name="zero"/&gt;<a xmlns="" name="d0t14010"/>
      &lt;/OMA&gt;<a xmlns="" name="d0t14011"/>
      &lt;OMA&gt;<a xmlns="" name="d0t14013"/>
        &lt;OMS cd="relation1" name="eq"/&gt;<a xmlns="" name="d0t14015"/>
        &lt;OMA&gt;<a xmlns="" name="d0t14017"/>
          &lt;OMS cd="arith1" name="divide"/&gt;<a xmlns="" name="d0t14019"/>
          &lt;OMV name="a"/&gt;<a xmlns="" name="d0t14021"/>
          &lt;OMV name="a"/&gt;<a xmlns="" name="d0t14023"/>
        &lt;/OMA&gt;<a xmlns="" name="d0t14024"/>
        &lt;OMS cd="alg1" name="one"/&gt;<a xmlns="" name="d0t14026"/>
      &lt;/OMA&gt;<a xmlns="" name="d0t14027"/>
    &lt;/OMA&gt;<a xmlns="" name="d0t14028"/>
  &lt;/OMBIND&gt;<a xmlns="" name="d0t14029"/>
&lt;/OMOBJ&gt;<a xmlns="" name="d0t14030"/>
&lt;/FMP&gt;<a xmlns="" name="d0t14031"/>
&lt;/CDDefinition&gt;<a xmlns="" name="d0t14032"/>

&lt;CDDefinition&gt;<a xmlns="" name="d0t14034"/>
&lt;Name&gt;<a xmlns="" name="d0t14036"/> power &lt;/Name&gt;<a xmlns="" name="d0t14037"/>
&lt;Description&gt;<a xmlns="" name="d0t14039"/>
This symbol represents a power function. The first argument is raised
to the power of the second argument. When the second argument is not
an integer, powering is defined in terms of exponentials and 
logarithms for the complex and real numbers.
This operator can represent general powering.
&lt;/Description&gt;<a xmlns="" name="d0t14040"/>

&lt;CMP&gt;<a xmlns="" name="d0t14042"/>
x\in C implies x^a = exp(a ln x)
&lt;/CMP&gt;<a xmlns="" name="d0t14043"/>

&lt;FMP&gt;<a xmlns="" name="d0t14045"/>
&lt;OMOBJ&gt;<a xmlns="" name="d0t14047"/>
  &lt;OMA&gt;<a xmlns="" name="d0t14049"/>
    &lt;OMS cd="logic1" name="implies"/&gt;<a xmlns="" name="d0t14051"/>
    &lt;OMA&gt;<a xmlns="" name="d0t14053"/>
      &lt;OMS cd="set1" name="in"/&gt;<a xmlns="" name="d0t14055"/>
      &lt;OMV name="x"/&gt;<a xmlns="" name="d0t14057"/>
      &lt;OMS cd="setname1" name="C"/&gt;<a xmlns="" name="d0t14059"/>
    &lt;/OMA&gt;<a xmlns="" name="d0t14060"/>
    &lt;OMA&gt;<a xmlns="" name="d0t14062"/>
      &lt;OMS cd="relation1" name="eq"/&gt;<a xmlns="" name="d0t14064"/>
      &lt;OMA&gt;<a xmlns="" name="d0t14066"/>
        &lt;OMS name="power" cd="arith1"/&gt;<a xmlns="" name="d0t14068"/>
        &lt;OMV name="x"/&gt;<a xmlns="" name="d0t14070"/>
        &lt;OMV name="a"/&gt;<a xmlns="" name="d0t14072"/>
      &lt;/OMA&gt;<a xmlns="" name="d0t14073"/>
      &lt;OMA&gt;<a xmlns="" name="d0t14075"/>
        &lt;OMS name="exp" cd="transc1"/&gt;<a xmlns="" name="d0t14077"/>
        &lt;OMA&gt;<a xmlns="" name="d0t14079"/>
          &lt;OMS name="times" cd="arith1"/&gt;<a xmlns="" name="d0t14081"/>
          &lt;OMV name="a"/&gt;<a xmlns="" name="d0t14083"/>
          &lt;OMA&gt;<a xmlns="" name="d0t14085"/>
            &lt;OMS name="ln" cd="transc1"/&gt;<a xmlns="" name="d0t14087"/>
            &lt;OMV name="x"/&gt;<a xmlns="" name="d0t14089"/>
          &lt;/OMA&gt;<a xmlns="" name="d0t14090"/>
        &lt;/OMA&gt;<a xmlns="" name="d0t14091"/>
      &lt;/OMA&gt;<a xmlns="" name="d0t14092"/>
    &lt;/OMA&gt;<a xmlns="" name="d0t14093"/>
  &lt;/OMA&gt;<a xmlns="" name="d0t14094"/>
&lt;/OMOBJ&gt;<a xmlns="" name="d0t14095"/>
&lt;/FMP&gt;<a xmlns="" name="d0t14096"/>

&lt;CMP&gt;<a xmlns="" name="d0t14098"/>
  if n is an integer then
  x^0 = 1,
  x^n = x * x^(n-1)
&lt;/CMP&gt;<a xmlns="" name="d0t14099"/>
&lt;FMP&gt;<a xmlns="" name="d0t14101"/>
&lt;OMOBJ&gt;<a xmlns="" name="d0t14103"/>
  &lt;OMA&gt;<a xmlns="" name="d0t14105"/>
    &lt;OMS cd="logic1" name="implies"/&gt;<a xmlns="" name="d0t14107"/>
    &lt;OMA&gt;<a xmlns="" name="d0t14109"/>
      &lt;OMS cd="set1" name="in"/&gt;<a xmlns="" name="d0t14111"/>
      &lt;OMV name="n"/&gt;<a xmlns="" name="d0t14113"/>
      &lt;OMS cd="setname1" name="Z"/&gt;<a xmlns="" name="d0t14115"/>
    &lt;/OMA&gt;<a xmlns="" name="d0t14116"/>
    &lt;OMA&gt;<a xmlns="" name="d0t14118"/>
      &lt;OMS cd="logic1" name="and"/&gt;<a xmlns="" name="d0t14120"/>
      &lt;OMA&gt;<a xmlns="" name="d0t14122"/>
        &lt;OMS cd="relation1" name="eq"/&gt;<a xmlns="" name="d0t14124"/>
        &lt;OMA&gt;<a xmlns="" name="d0t14126"/>
          &lt;OMS cd="arith1" name="power"/&gt;<a xmlns="" name="d0t14128"/>
          &lt;OMV name="x"/&gt;<a xmlns="" name="d0t14130"/>
          &lt;OMI&gt;<a xmlns="" name="d0t14132"/>0&lt;/OMI&gt;<a xmlns="" name="d0t14133"/>
        &lt;/OMA&gt;<a xmlns="" name="d0t14134"/>
        &lt;OMS cd="alg1" name="one"/&gt;<a xmlns="" name="d0t14136"/>
      &lt;/OMA&gt;<a xmlns="" name="d0t14137"/>
      &lt;OMA&gt;<a xmlns="" name="d0t14139"/>
        &lt;OMS cd="relation1" name="eq"/&gt;<a xmlns="" name="d0t14141"/>
        &lt;OMA&gt;<a xmlns="" name="d0t14143"/>
          &lt;OMS cd="arith1" name="power"/&gt;<a xmlns="" name="d0t14145"/>
          &lt;OMV name="x"/&gt;<a xmlns="" name="d0t14147"/>
          &lt;OMV name="n"/&gt;<a xmlns="" name="d0t14149"/>
        &lt;/OMA&gt;<a xmlns="" name="d0t14150"/>
        &lt;OMA&gt;<a xmlns="" name="d0t14152"/>
          &lt;OMS cd="arith1" name="times"/&gt;<a xmlns="" name="d0t14154"/>
          &lt;OMV name="x"/&gt;<a xmlns="" name="d0t14156"/>
          &lt;OMA&gt;<a xmlns="" name="d0t14158"/>
            &lt;OMS cd="arith1" name="power"/&gt;<a xmlns="" name="d0t14160"/>
            &lt;OMV name="x"/&gt;<a xmlns="" name="d0t14162"/>
            &lt;OMA&gt;<a xmlns="" name="d0t14164"/>
              &lt;OMS cd="arith1" name="minus"/&gt;<a xmlns="" name="d0t14166"/>
              &lt;OMV name="n"/&gt;<a xmlns="" name="d0t14168"/>
              &lt;OMI&gt;<a xmlns="" name="d0t14170"/>1&lt;/OMI&gt;<a xmlns="" name="d0t14171"/>
            &lt;/OMA&gt;<a xmlns="" name="d0t14172"/>
          &lt;/OMA&gt;<a xmlns="" name="d0t14173"/>
        &lt;/OMA&gt;<a xmlns="" name="d0t14174"/>
      &lt;/OMA&gt;<a xmlns="" name="d0t14175"/>
    &lt;/OMA&gt;<a xmlns="" name="d0t14176"/>
  &lt;/OMA&gt;<a xmlns="" name="d0t14177"/>
&lt;/OMOBJ&gt;<a xmlns="" name="d0t14178"/>
&lt;/FMP&gt;<a xmlns="" name="d0t14179"/>
&lt;Example&gt;<a xmlns="" name="d0t14181"/>
&lt;OMOBJ&gt;<a xmlns="" name="d0t14183"/>
&lt;OMA&gt;<a xmlns="" name="d0t14185"/>
  &lt;OMS cd="relation1" name="eq"/&gt;<a xmlns="" name="d0t14187"/>
  &lt;OMA&gt;<a xmlns="" name="d0t14189"/>
    &lt;OMS cd="arith1" name="power"/&gt;<a xmlns="" name="d0t14191"/>
    &lt;OMA&gt;<a xmlns="" name="d0t14193"/>
      &lt;OMS cd="linalg2" name="matrix"/&gt;<a xmlns="" name="d0t14195"/>
      &lt;OMA&gt;<a xmlns="" name="d0t14197"/>
        &lt;OMS cd="linalg2" name="matrixrow"/&gt;<a xmlns="" name="d0t14199"/>
        &lt;OMI&gt;<a xmlns="" name="d0t14201"/> 1 &lt;/OMI&gt;<a xmlns="" name="d0t14202"/>
        &lt;OMI&gt;<a xmlns="" name="d0t14204"/> 2 &lt;/OMI&gt;<a xmlns="" name="d0t14205"/>
      &lt;/OMA&gt;<a xmlns="" name="d0t14206"/>
      &lt;OMA&gt;<a xmlns="" name="d0t14208"/>
        &lt;OMS cd="linalg2" name="matrixrow"/&gt;<a xmlns="" name="d0t14210"/>
        &lt;OMI&gt;<a xmlns="" name="d0t14212"/> 3 &lt;/OMI&gt;<a xmlns="" name="d0t14213"/>
        &lt;OMI&gt;<a xmlns="" name="d0t14215"/> 4 &lt;/OMI&gt;<a xmlns="" name="d0t14216"/>
      &lt;/OMA&gt;<a xmlns="" name="d0t14217"/>
    &lt;/OMA&gt;<a xmlns="" name="d0t14218"/>
    &lt;OMI&gt;<a xmlns="" name="d0t14220"/>3&lt;/OMI&gt;<a xmlns="" name="d0t14221"/>
  &lt;/OMA&gt;<a xmlns="" name="d0t14222"/>
  &lt;OMA&gt;<a xmlns="" name="d0t14224"/>
    &lt;OMS cd="linalg2" name="matrix"/&gt;<a xmlns="" name="d0t14226"/>
    &lt;OMA&gt;<a xmlns="" name="d0t14228"/>
      &lt;OMS cd="linalg2" name="matrixrow"/&gt;<a xmlns="" name="d0t14230"/>
      &lt;OMI&gt;<a xmlns="" name="d0t14232"/> 37 &lt;/OMI&gt;<a xmlns="" name="d0t14233"/>
      &lt;OMI&gt;<a xmlns="" name="d0t14235"/> 54 &lt;/OMI&gt;<a xmlns="" name="d0t14236"/>
    &lt;/OMA&gt;<a xmlns="" name="d0t14237"/>
    &lt;OMA&gt;<a xmlns="" name="d0t14239"/>
      &lt;OMS cd="linalg2" name="matrixrow"/&gt;<a xmlns="" name="d0t14241"/>
      &lt;OMI&gt;<a xmlns="" name="d0t14243"/> 81 &lt;/OMI&gt;<a xmlns="" name="d0t14244"/>
      &lt;OMI&gt;<a xmlns="" name="d0t14246"/> 118 &lt;/OMI&gt;<a xmlns="" name="d0t14247"/>
    &lt;/OMA&gt;<a xmlns="" name="d0t14248"/>
  &lt;/OMA&gt;<a xmlns="" name="d0t14249"/>
&lt;/OMA&gt;<a xmlns="" name="d0t14250"/>
&lt;/OMOBJ&gt;<a xmlns="" name="d0t14251"/>
&lt;/Example&gt;<a xmlns="" name="d0t14252"/>
&lt;Example&gt;<a xmlns="" name="d0t14254"/>
&lt;OMOBJ&gt;<a xmlns="" name="d0t14256"/>
&lt;OMA&gt;<a xmlns="" name="d0t14258"/>
  &lt;OMS cd="relation1" name="eq"/&gt;<a xmlns="" name="d0t14260"/>
  &lt;OMA&gt;<a xmlns="" name="d0t14262"/>
    &lt;OMS cd="arith1" name="power"/&gt;<a xmlns="" name="d0t14264"/>
    &lt;OMS cd="nums1" name="e"/&gt;<a xmlns="" name="d0t14266"/>
    &lt;OMA&gt;<a xmlns="" name="d0t14268"/>
      &lt;OMS cd="arith1" name="times"/&gt;<a xmlns="" name="d0t14270"/>
      &lt;OMS cd="nums1" name="i"/&gt;<a xmlns="" name="d0t14272"/>
      &lt;OMS cd="nums1" name="pi"/&gt;<a xmlns="" name="d0t14274"/>
    &lt;/OMA&gt;<a xmlns="" name="d0t14275"/>
  &lt;/OMA&gt;<a xmlns="" name="d0t14276"/>
  &lt;OMA&gt;<a xmlns="" name="d0t14278"/>
    &lt;OMS cd="arith1" name="unary_minus"/&gt;<a xmlns="" name="d0t14280"/>
    &lt;OMS cd="alg1" name="one"/&gt;<a xmlns="" name="d0t14282"/>
  &lt;/OMA&gt;<a xmlns="" name="d0t14283"/>
&lt;/OMA&gt;<a xmlns="" name="d0t14284"/>
&lt;/OMOBJ&gt;<a xmlns="" name="d0t14285"/>
&lt;/Example&gt;<a xmlns="" name="d0t14286"/>
&lt;/CDDefinition&gt;<a xmlns="" name="d0t14287"/>

&lt;CDDefinition&gt;<a xmlns="" name="d0t14289"/>
&lt;Name&gt;<a xmlns="" name="d0t14291"/> abs &lt;/Name&gt;<a xmlns="" name="d0t14292"/>
&lt;Description&gt;<a xmlns="" name="d0t14294"/> 
A unary operator which represents the absolute value of its
argument. The argument should be numerically valued.
In the complex case this is often referred to as the modulus.
&lt;/Description&gt;<a xmlns="" name="d0t14295"/>
&lt;CMP&gt;<a xmlns="" name="d0t14297"/> for all x,y | abs(x) + abs(y) &amp;gt;= abs(x+y) &lt;/CMP&gt;<a xmlns="" name="d0t14298"/>
&lt;FMP&gt;<a xmlns="" name="d0t14300"/>
&lt;OMOBJ&gt;<a xmlns="" name="d0t14302"/>
  &lt;OMBIND&gt;<a xmlns="" name="d0t14304"/>
    &lt;OMS cd="quant1" name="forall"/&gt;<a xmlns="" name="d0t14306"/>
    &lt;OMBVAR&gt;<a xmlns="" name="d0t14308"/>
      &lt;OMV name="x"/&gt;<a xmlns="" name="d0t14310"/>
      &lt;OMV name="y"/&gt;<a xmlns="" name="d0t14312"/>
    &lt;/OMBVAR&gt;<a xmlns="" name="d0t14313"/>
    &lt;OMA&gt;<a xmlns="" name="d0t14315"/>
      &lt;OMS cd="relation1" name="geq"/&gt;<a xmlns="" name="d0t14317"/>
      &lt;OMA&gt;<a xmlns="" name="d0t14319"/>
        &lt;OMS cd="arith1" name="plus"/&gt;<a xmlns="" name="d0t14321"/>
        &lt;OMA&gt;<a xmlns="" name="d0t14323"/>
          &lt;OMS cd="arith1" name="abs"/&gt;<a xmlns="" name="d0t14325"/>
            &lt;OMV name="x"/&gt;<a xmlns="" name="d0t14327"/>
        &lt;/OMA&gt;<a xmlns="" name="d0t14328"/>
        &lt;OMA&gt;<a xmlns="" name="d0t14330"/>
          &lt;OMS cd="arith1" name="abs"/&gt;<a xmlns="" name="d0t14332"/>
            &lt;OMV name="y"/&gt;<a xmlns="" name="d0t14334"/>
        &lt;/OMA&gt;<a xmlns="" name="d0t14335"/>
      &lt;/OMA&gt;<a xmlns="" name="d0t14336"/>
      &lt;OMA&gt;<a xmlns="" name="d0t14338"/>
        &lt;OMS cd="arith1" name="abs"/&gt;<a xmlns="" name="d0t14340"/>
        &lt;OMA&gt;<a xmlns="" name="d0t14342"/>
          &lt;OMS cd="arith1" name="plus"/&gt;<a xmlns="" name="d0t14344"/>
          &lt;OMV name="x"/&gt;<a xmlns="" name="d0t14346"/>
          &lt;OMV name="y"/&gt;<a xmlns="" name="d0t14348"/>
        &lt;/OMA&gt;<a xmlns="" name="d0t14349"/>
      &lt;/OMA&gt;<a xmlns="" name="d0t14350"/>
    &lt;/OMA&gt;<a xmlns="" name="d0t14351"/>
  &lt;/OMBIND&gt;<a xmlns="" name="d0t14352"/>
&lt;/OMOBJ&gt;<a xmlns="" name="d0t14353"/>
&lt;/FMP&gt;<a xmlns="" name="d0t14354"/>
&lt;/CDDefinition&gt;<a xmlns="" name="d0t14355"/>

&lt;CDDefinition&gt;<a xmlns="" name="d0t14357"/>
&lt;Name&gt;<a xmlns="" name="d0t14359"/> root &lt;/Name&gt;<a xmlns="" name="d0t14360"/>
&lt;Description&gt;<a xmlns="" name="d0t14362"/> 
A binary operator which represents its first argument "lowered" to its
n'th root where n is the second argument. This is the inverse of the operation
represented by the power symbol defined in this CD.

Care should be taken as to the precise meaning of this operator, in
particular which root is represented, however it is here to represent
the general notion of taking n'th roots. As inferred by the signature
relevant to this symbol, the function represented by this symbol is
the single valued function, the specific root returned is the one
indicated by the first CMP. Note also that the converse of the second
CMP is not valid in general.
&lt;/Description&gt;<a xmlns="" name="d0t14363"/>

&lt;CMP&gt;<a xmlns="" name="d0t14365"/> x\in C implies root(x,n) = exp(ln(x)/n) &lt;/CMP&gt;<a xmlns="" name="d0t14366"/>
&lt;FMP&gt;<a xmlns="" name="d0t14368"/>
  &lt;OMOBJ&gt;<a xmlns="" name="d0t14370"/>
    &lt;OMA&gt;<a xmlns="" name="d0t14372"/>
      &lt;OMS cd="logic1" name="implies"/&gt;<a xmlns="" name="d0t14374"/>
      &lt;OMA&gt;<a xmlns="" name="d0t14376"/>
        &lt;OMS cd="set1" name="in"/&gt;<a xmlns="" name="d0t14378"/>
        &lt;OMV name="x"/&gt;<a xmlns="" name="d0t14380"/>
        &lt;OMS cd="setname1" name="C"/&gt;<a xmlns="" name="d0t14382"/>
      &lt;/OMA&gt;<a xmlns="" name="d0t14383"/>
      &lt;OMA&gt;<a xmlns="" name="d0t14385"/>
        &lt;OMS cd="relation1" name="eq"/&gt;<a xmlns="" name="d0t14387"/>
        &lt;OMA&gt;<a xmlns="" name="d0t14389"/>
          &lt;OMS cd="arith1" name="root"/&gt;<a xmlns="" name="d0t14391"/>
          &lt;OMV name="x"/&gt;<a xmlns="" name="d0t14393"/>
          &lt;OMV name="n"/&gt;<a xmlns="" name="d0t14395"/>          
        &lt;/OMA&gt;<a xmlns="" name="d0t14396"/>
        &lt;OMA&gt;<a xmlns="" name="d0t14398"/>
          &lt;OMS name="exp" cd="transc1"/&gt;<a xmlns="" name="d0t14400"/>
          &lt;OMA&gt;<a xmlns="" name="d0t14402"/>
            &lt;OMS name="divide" cd="arith1"/&gt;<a xmlns="" name="d0t14404"/>
            &lt;OMA&gt;<a xmlns="" name="d0t14406"/>
              &lt;OMS name="ln" cd="transc1"/&gt;<a xmlns="" name="d0t14408"/>
              &lt;OMV name="x"/&gt;<a xmlns="" name="d0t14410"/>
            &lt;/OMA&gt;<a xmlns="" name="d0t14411"/>
            &lt;OMV name="n"/&gt;<a xmlns="" name="d0t14413"/>          
          &lt;/OMA&gt;<a xmlns="" name="d0t14414"/>
        &lt;/OMA&gt;<a xmlns="" name="d0t14415"/>
      &lt;/OMA&gt;<a xmlns="" name="d0t14416"/>
    &lt;/OMA&gt;<a xmlns="" name="d0t14417"/>
  &lt;/OMOBJ&gt;<a xmlns="" name="d0t14418"/>
&lt;/FMP&gt;<a xmlns="" name="d0t14419"/>

&lt;CMP&gt;<a xmlns="" name="d0t14421"/> for all a,n | power(root(a,n),n) = a (if the root exists!) &lt;/CMP&gt;<a xmlns="" name="d0t14422"/>
&lt;FMP&gt;<a xmlns="" name="d0t14424"/>
  &lt;OMOBJ&gt;<a xmlns="" name="d0t14426"/>
    &lt;OMBIND&gt;<a xmlns="" name="d0t14428"/>
      &lt;OMS cd="quant1" name="forall"/&gt;<a xmlns="" name="d0t14430"/>
      &lt;OMBVAR&gt;<a xmlns="" name="d0t14432"/>
         &lt;OMV name="a"/&gt;<a xmlns="" name="d0t14434"/>
         &lt;OMV name="n"/&gt;<a xmlns="" name="d0t14436"/>
      &lt;/OMBVAR&gt;<a xmlns="" name="d0t14437"/>
      &lt;OMA&gt;<a xmlns="" name="d0t14439"/>
        &lt;OMS cd="relation1" name="eq"/&gt;<a xmlns="" name="d0t14441"/>
        &lt;OMA&gt;<a xmlns="" name="d0t14443"/>
          &lt;OMS cd="arith1" name="power"/&gt;<a xmlns="" name="d0t14445"/>
          &lt;OMA&gt;<a xmlns="" name="d0t14447"/>
            &lt;OMS cd="arith1" name="root"/&gt;<a xmlns="" name="d0t14449"/>
            &lt;OMV name="a"/&gt;<a xmlns="" name="d0t14451"/>
            &lt;OMV name="n"/&gt;<a xmlns="" name="d0t14453"/>
          &lt;/OMA&gt;<a xmlns="" name="d0t14454"/>
          &lt;OMV name="n"/&gt;<a xmlns="" name="d0t14456"/>
        &lt;/OMA&gt;<a xmlns="" name="d0t14457"/>
        &lt;OMV name="a"/&gt;<a xmlns="" name="d0t14459"/>
      &lt;/OMA&gt;<a xmlns="" name="d0t14460"/>
    &lt;/OMBIND&gt;<a xmlns="" name="d0t14461"/>
  &lt;/OMOBJ&gt;<a xmlns="" name="d0t14462"/>
&lt;/FMP&gt;<a xmlns="" name="d0t14463"/>
&lt;/CDDefinition&gt;<a xmlns="" name="d0t14464"/>




&lt;CDDefinition&gt;<a xmlns="" name="d0t14466"/>
&lt;Name&gt;<a xmlns="" name="d0t14468"/> sum &lt;/Name&gt;<a xmlns="" name="d0t14469"/>
&lt;Description&gt;<a xmlns="" name="d0t14471"/>
An operator taking two arguments, the first being the range of summation,
e.g. an integral interval, the second being the function to be
summed. Note that the sum may be over an infinite interval.
&lt;/Description&gt;<a xmlns="" name="d0t14472"/>
&lt;Example&gt;<a xmlns="" name="d0t14474"/>
  This represents the summation of the reciprocals of all the integers between
  1 and 10 inclusive.
&lt;OMOBJ&gt;<a xmlns="" name="d0t14476"/>
  &lt;OMA&gt;<a xmlns="" name="d0t14478"/>
    &lt;OMS cd="arith1" name="sum"/&gt;<a xmlns="" name="d0t14480"/>
      &lt;OMA&gt;<a xmlns="" name="d0t14482"/>
        &lt;OMS cd="interval1" name="integer_interval"/&gt;<a xmlns="" name="d0t14484"/>
        &lt;OMI&gt;<a xmlns="" name="d0t14486"/> 1 &lt;/OMI&gt;<a xmlns="" name="d0t14487"/>
        &lt;OMI&gt;<a xmlns="" name="d0t14489"/> 10 &lt;/OMI&gt;<a xmlns="" name="d0t14490"/>
      &lt;/OMA&gt;<a xmlns="" name="d0t14491"/>
    &lt;OMBIND&gt;<a xmlns="" name="d0t14493"/>
      &lt;OMS cd="fns1" name="lambda"/&gt;<a xmlns="" name="d0t14495"/>
        &lt;OMBVAR&gt;<a xmlns="" name="d0t14497"/>
          &lt;OMV name="x"/&gt;<a xmlns="" name="d0t14499"/>
        &lt;/OMBVAR&gt;<a xmlns="" name="d0t14500"/>
        &lt;OMA&gt;<a xmlns="" name="d0t14502"/>
          &lt;OMS cd="arith1" name="divide"/&gt;<a xmlns="" name="d0t14504"/>
          &lt;OMI&gt;<a xmlns="" name="d0t14506"/> 1 &lt;/OMI&gt;<a xmlns="" name="d0t14507"/>
          &lt;OMV name="x"/&gt;<a xmlns="" name="d0t14509"/>
        &lt;/OMA&gt;<a xmlns="" name="d0t14510"/>
    &lt;/OMBIND&gt;<a xmlns="" name="d0t14511"/>
  &lt;/OMA&gt;<a xmlns="" name="d0t14512"/>
&lt;/OMOBJ&gt;<a xmlns="" name="d0t14513"/>
&lt;/Example&gt;<a xmlns="" name="d0t14514"/>
&lt;/CDDefinition&gt;<a xmlns="" name="d0t14515"/>

&lt;CDDefinition&gt;<a xmlns="" name="d0t14517"/>
&lt;Name&gt;<a xmlns="" name="d0t14519"/> product &lt;/Name&gt;<a xmlns="" name="d0t14520"/>
&lt;Description&gt;<a xmlns="" name="d0t14522"/>
An operator taking two arguments, the first being the range of multiplication
e.g. an integral interval, the second being the function to
be multiplied. Note that the product may be over an infinite interval. 
&lt;/Description&gt;<a xmlns="" name="d0t14523"/>
&lt;Example&gt;<a xmlns="" name="d0t14525"/>
This represents the statement that the factorial of n is equal to the product
of all the integers between 1 and n inclusive.
&lt;OMOBJ&gt;<a xmlns="" name="d0t14527"/>
  &lt;OMA&gt;<a xmlns="" name="d0t14529"/>
    &lt;OMS cd="relation1" name="eq"/&gt;<a xmlns="" name="d0t14531"/>
    &lt;OMA&gt;<a xmlns="" name="d0t14533"/>
      &lt;OMS cd="integer1" name="factorial"/&gt;<a xmlns="" name="d0t14535"/>
      &lt;OMV name="n"/&gt;<a xmlns="" name="d0t14537"/>
    &lt;/OMA&gt;<a xmlns="" name="d0t14538"/>
    &lt;OMA&gt;<a xmlns="" name="d0t14540"/>
      &lt;OMS cd="arith1" name="product"/&gt;<a xmlns="" name="d0t14542"/>
        &lt;OMA&gt;<a xmlns="" name="d0t14544"/>
          &lt;OMS cd="interval1" name="integer_interval"/&gt;<a xmlns="" name="d0t14546"/>
          &lt;OMI&gt;<a xmlns="" name="d0t14548"/> 1 &lt;/OMI&gt;<a xmlns="" name="d0t14549"/>
          &lt;OMV name="n"/&gt;<a xmlns="" name="d0t14551"/>
        &lt;/OMA&gt;<a xmlns="" name="d0t14552"/>
      &lt;OMBIND&gt;<a xmlns="" name="d0t14554"/>
        &lt;OMS cd="fns1" name="lambda"/&gt;<a xmlns="" name="d0t14556"/>
          &lt;OMBVAR&gt;<a xmlns="" name="d0t14558"/>
            &lt;OMV name="i"/&gt;<a xmlns="" name="d0t14560"/>
          &lt;/OMBVAR&gt;<a xmlns="" name="d0t14561"/>
          &lt;OMV name="i"/&gt;<a xmlns="" name="d0t14563"/>
      &lt;/OMBIND&gt;<a xmlns="" name="d0t14564"/>
    &lt;/OMA&gt;<a xmlns="" name="d0t14565"/>
  &lt;/OMA&gt;<a xmlns="" name="d0t14566"/>
&lt;/OMOBJ&gt;<a xmlns="" name="d0t14567"/>
&lt;/Example&gt;<a xmlns="" name="d0t14568"/>
&lt;/CDDefinition&gt;<a xmlns="" name="d0t14569"/>

&lt;/CD&gt;


</pre></div>

</div>

<div><h3 name="arith1.sts" id="arith1.sts">A.3 The  <b>arith1</b> STS Signature File</h3>
  
  
  
  
  <div class="literal"><pre>&lt;CDSignatures type="sts" cd="arith1"&gt;
    
  &lt;CDSComment&gt;
    Date:  1999-11-26
    Author: David Carlisle
  &lt;/CDSComment&gt;
  
  &lt;Signature name="lcm" &gt;
    &lt;OMOBJ&gt;
      &lt;OMA&gt;
        &lt;OMS name="mapsto" cd="sts" /&gt;
        &lt;OMA&gt;
          &lt;OMS name="nassoc" cd="sts"/&gt;
          &lt;OMV name="SemiGroup"/&gt;
        &lt;/OMA&gt;
        &lt;OMV name="SemiGroup" /&gt;
      &lt;/OMA&gt;
    &lt;/OMOBJ&gt;
  &lt;/Signature&gt;
  
  &lt;Signature name="gcd" &gt;
    &lt;OMOBJ&gt;
      &lt;OMA&gt;
        &lt;OMS name="mapsto" cd="sts" /&gt;
        &lt;OMA&gt;
          &lt;OMS name="nassoc" cd="sts"/&gt;
          &lt;OMV name="SemiGroup"/&gt;
        &lt;/OMA&gt;
        &lt;OMV name="SemiGroup" /&gt;
      &lt;/OMA&gt;
    &lt;/OMOBJ&gt;
  &lt;/Signature&gt;
  
  &lt;Signature name="plus"&gt;
    &lt;OMOBJ&gt;
      &lt;OMA&gt;
        &lt;OMS name="mapsto" cd="sts"/&gt;
        &lt;OMA&gt;
          &lt;OMS name="nassoc" cd="sts"/&gt; 
          &lt;OMV name="AbelianSemiGroup"/&gt;
        &lt;/OMA&gt;
        &lt;OMV name="AbelianSemiGroup"/&gt;
      &lt;/OMA&gt;
    &lt;/OMOBJ&gt;
  &lt;/Signature&gt;
  
  &lt;Signature name="unary_minus"&gt;
    &lt;OMOBJ&gt;
      &lt;OMA&gt;
        &lt;OMS name="mapsto" cd="sts"/&gt;
        &lt;OMV name="AbelianGroup"/&gt; 
        &lt;OMV name="AbelianGroup"/&gt; 
      &lt;/OMA&gt;
    &lt;/OMOBJ&gt;
  &lt;/Signature&gt;
  
  &lt;Signature name="minus"&gt;
    &lt;OMOBJ&gt;
      &lt;OMA&gt;
        &lt;OMS name="mapsto" cd="sts"/&gt;
        &lt;OMV name="AbelianGroup"/&gt; 
        &lt;OMV name="AbelianGroup"/&gt; 
        &lt;OMV name="AbelianGroup"/&gt; 
      &lt;/OMA&gt;
    &lt;/OMOBJ&gt;
  &lt;/Signature&gt;
  
  &lt;Signature name="times"&gt;
    &lt;OMOBJ&gt;
      &lt;OMA&gt;
        &lt;OMS name="mapsto" cd="sts"/&gt;
        &lt;OMA&gt;
          &lt;OMS name="nassoc" cd="sts"/&gt; 
          &lt;OMV name="SemiGroup"/&gt;
        &lt;/OMA&gt;
        &lt;OMV name="SemiGroup"/&gt;
      &lt;/OMA&gt;
    &lt;/OMOBJ&gt;
  &lt;/Signature&gt;
  
  &lt;Signature name="divide"&gt;
    &lt;OMOBJ&gt;
      &lt;OMA&gt;
        &lt;OMS name="mapsto" cd="sts"/&gt;
        &lt;OMV name="AbelianGroup"/&gt; 
        &lt;OMV name="AbelianGroup"/&gt; 
        &lt;OMV name="AbelianGroup"/&gt; 
      &lt;/OMA&gt;
    &lt;/OMOBJ&gt;
  &lt;/Signature&gt;
  
  &lt;Signature name="power"&gt;
    &lt;OMOBJ&gt;
      &lt;OMA&gt;
        &lt;OMS name="mapsto" cd="sts"/&gt;
        &lt;OMS name="NumericalValue" cd="sts"/&gt; 
        &lt;OMS name="NumericalValue" cd="sts"/&gt; 
        &lt;OMS name="NumericalValue" cd="sts"/&gt; 
      &lt;/OMA&gt;
    &lt;/OMOBJ&gt;
  &lt;/Signature&gt;
  
  &lt;Signature name="abs"&gt;
    &lt;OMOBJ&gt;
      &lt;OMA&gt;
        &lt;OMS name="mapsto" cd="sts"/&gt;
        &lt;OMS name="C" cd="setname1"/&gt; 
        &lt;OMS name="R" cd="setname1"/&gt; 
      &lt;/OMA&gt;
    &lt;/OMOBJ&gt;
  &lt;/Signature&gt;
  
  &lt;Signature name="root"&gt;
    &lt;OMOBJ&gt;
      &lt;OMA&gt;
        &lt;OMS name="mapsto" cd="sts"/&gt;
        &lt;OMS name="NumericalValue" cd="sts"/&gt; 
        &lt;OMS name="NumericalValue" cd="sts"/&gt; 
        &lt;OMS name="NumericalValue" cd="sts"/&gt; 
      &lt;/OMA&gt;
    &lt;/OMOBJ&gt;
  &lt;/Signature&gt;
  
  
  &lt;Signature name="sum" &gt;
    &lt;OMOBJ&gt;
      &lt;OMA&gt;
        &lt;OMS name="mapsto" cd="sts" /&gt;
        &lt;OMV name="IntegerRange" /&gt;
        &lt;OMA&gt;
          &lt;OMS name="mapsto" cd="sts" /&gt;
          &lt;OMS name="Z" cd="setname1" /&gt;
          &lt;OMV name="AbelianMonoid" /&gt;
        &lt;/OMA&gt;
        &lt;OMV name="AbelianMonoid" /&gt;
      &lt;/OMA&gt;
    &lt;/OMOBJ&gt;
  &lt;/Signature&gt;
  
  &lt;Signature name="product" &gt;
    &lt;OMOBJ&gt;
      &lt;OMA&gt;
        &lt;OMS name="mapsto" cd="sts" /&gt;
        &lt;OMV name="IntegerRange" /&gt;
        &lt;OMA&gt;
          &lt;OMS name="mapsto" cd="sts" /&gt;
          &lt;OMS name="Z" cd="setname1" /&gt;
          &lt;OMV name="AbelianMonoid" /&gt;
        &lt;/OMA&gt;
        &lt;OMV name="AbelianMonoid" /&gt;
      &lt;/OMA&gt;
    &lt;/OMOBJ&gt;
  &lt;/Signature&gt;
  
&lt;/CDSignatures&gt;
</pre></div>

</div>

<div><h3 name="mathml.cdg" id="mathml.cdg">A.4 The  <b>MathML</b> CDGroup</h3>
  
  
  
  <div class="literal"><pre>&lt;CDGroup&gt;
  &lt;CDGroupName&gt;mathml&lt;/CDGroupName&gt;
    &lt;CDGroupVersion&gt; 2 &lt;/CDGroupVersion&gt;
    &lt;CDGroupRevision&gt; 0 &lt;/CDGroupRevision&gt;
    &lt;CDGroupURL&gt;
      http://www.openmath.org/cdfiles/cdgroups/mathml.ocd&lt;/CDGroupURL&gt;
    &lt;CDGroupDescription&gt; MathML compatibility CD Group &lt;/CDGroupDescription&gt;
    &lt;CDComment&gt;This is the first version of the Core CD group.
      It was created by D Carlisle based on MathML CD Group.&lt;/CDComment&gt;
    &lt;CDComment&gt;Algebra&lt;/CDComment&gt;
    &lt;CDGroupMember&gt;
      &lt;CDName&gt;alg1&lt;/CDName&gt;
      &lt;CDURL&gt;http://www.openmath.org/cd/alg1.ocd&lt;/CDURL&gt;&lt;/CDGroupMember&gt;
    &lt;CDComment&gt;Arithmetic&lt;/CDComment&gt;
    &lt;CDGroupMember&gt;
      &lt;CDName&gt;arith1&lt;/CDName&gt;
      &lt;CDURL&gt;http://www.openmath.org/cd/arith1.ocd&lt;/CDURL&gt;&lt;/CDGroupMember&gt;
    &lt;CDComment&gt;Constructor for Floating Point Numbers&lt;/CDComment&gt;
    &lt;CDGroupMember&gt;
      &lt;CDName&gt;bigfloat1&lt;/CDName&gt;
      &lt;CDURL&gt;http://www.openmath.org/cd/bigfloat1.ocd&lt;/CDURL&gt;&lt;/CDGroupMember&gt;
    &lt;CDComment&gt;Calculus&lt;/CDComment&gt;
    &lt;CDGroupMember&gt;
      &lt;CDName&gt;calculus1&lt;/CDName&gt;
      &lt;CDURL&gt;http://www.openmath.org/cd/calculus1.ocd&lt;/CDURL&gt;&lt;/CDGroupMember&gt;
    &lt;CDComment&gt;Operations on and constructors for complex numbers&lt;/CDComment&gt;
    &lt;CDGroupMember&gt;
      &lt;CDName&gt;complex1&lt;/CDName&gt;
      &lt;CDURL&gt;http://www.openmath.org/cd/complex1.ocd&lt;/CDURL&gt;&lt;/CDGroupMember&gt;
    &lt;CDComment&gt;Functions on functions&lt;/CDComment&gt;
    &lt;CDGroupMember&gt;
      &lt;CDName&gt;fns1&lt;/CDName&gt;
      &lt;CDURL&gt;http://www.openmath.org/cd/fns1.ocd&lt;/CDURL&gt;&lt;/CDGroupMember&gt;
    &lt;CDComment&gt;Integer arithmetic&lt;/CDComment&gt;
    &lt;CDGroupMember&gt;
      &lt;CDName&gt;integer1&lt;/CDName&gt;
      &lt;CDURL&gt;http://www.openmath.org/cd/integer1.ocd&lt;/CDURL&gt;&lt;/CDGroupMember&gt;
    &lt;CDComment&gt;Intervals&lt;/CDComment&gt;
    &lt;CDGroupMember&gt;
      &lt;CDName&gt;interval1&lt;/CDName&gt;
      &lt;CDURL&gt;http://www.openmath.org/cd/interval1.ocd&lt;/CDURL&gt;&lt;/CDGroupMember&gt;
    &lt;CDComment&gt;Linear Algebra - vector &amp;amp; matrix constructors, those symbols which are independant of orientation, but in MathML&lt;/CDComment&gt;
    &lt;CDGroupMember&gt;
      &lt;CDName&gt;linalg1&lt;/CDName&gt;
      &lt;CDURL&gt;http://www.openmath.org/cd/linalg1.ocd&lt;/CDURL&gt;&lt;/CDGroupMember&gt;
    &lt;CDComment&gt;Linear Algebra - vector &amp;amp; matrix constructors, those symbols which are dependant of orientation, and in MathML&lt;/CDComment&gt;
    &lt;CDGroupMember&gt;
      &lt;CDName&gt;linalg2&lt;/CDName&gt;
      &lt;CDURL&gt;http://www.openmath.org/cd/linalg2.ocd&lt;/CDURL&gt;&lt;/CDGroupMember&gt;
    &lt;CDComment&gt;Limits of unary functions&lt;/CDComment&gt;
    &lt;CDGroupMember&gt;
      &lt;CDName&gt;limit1&lt;/CDName&gt;
      &lt;CDURL&gt;http://www.openmath.org/cd/limit1.ocd&lt;/CDURL&gt;&lt;/CDGroupMember&gt;
    &lt;CDComment&gt;List constructors&lt;/CDComment&gt;
    &lt;CDGroupMember&gt;
      &lt;CDName&gt;list1&lt;/CDName&gt;
      &lt;CDURL&gt;http://www.openmath.org/cd/list1.ocd&lt;/CDURL&gt;&lt;/CDGroupMember&gt;
    &lt;CDComment&gt;Basic logical operators&lt;/CDComment&gt;
    &lt;CDGroupMember&gt;
      &lt;CDName&gt;logic1&lt;/CDName&gt;
      &lt;CDURL&gt;http://www.openmath.org/cd/logic1.ocd&lt;/CDURL&gt;&lt;/CDGroupMember&gt;
    &lt;CDComment&gt;
      MathML Numerical Types
    &lt;/CDComment&gt;
    &lt;CDGroupMember&gt;
      &lt;CDName&gt;mathmltypes&lt;/CDName&gt;
      &lt;CDURL&gt;http://www.openmath.org/cd/mathmltypes.ocd&lt;/CDURL&gt;
    &lt;/CDGroupMember&gt;
    &lt;CDComment&gt;Minima and maxima&lt;/CDComment&gt;
    &lt;CDGroupMember&gt;
      &lt;CDName&gt;minmax1&lt;/CDName&gt;
      &lt;CDURL&gt;http://www.openmath.org/cd/minmax1.ocd&lt;/CDURL&gt;&lt;/CDGroupMember&gt;
    &lt;CDComment&gt;Multset-theoretic operators and constructors&lt;/CDComment&gt;
    &lt;CDGroupMember&gt;
      &lt;CDName&gt;multiset1&lt;/CDName&gt;
      &lt;CDURL&gt;http://www.openmath.org/cd/multiset1.ocd&lt;/CDURL&gt;&lt;/CDGroupMember&gt;
    &lt;CDComment&gt;Symbols for creating numbers, including some defined constants
      (which can be seen as nullary constructors)&lt;/CDComment&gt;
    &lt;CDGroupMember&gt;
      &lt;CDName&gt;nums1&lt;/CDName&gt;
      &lt;CDURL&gt;http://www.openmath.org/cd/nums1.ocd&lt;/CDURL&gt;&lt;/CDGroupMember&gt;
    &lt;CDComment&gt;Symbols for creating piecewise definitions&lt;/CDComment&gt;
    &lt;CDGroupMember&gt;
      &lt;CDName&gt;piece1&lt;/CDName&gt;
      &lt;CDURL&gt;http://www.openmath.org/cd/piece1.ocd&lt;/CDURL&gt;&lt;/CDGroupMember&gt;
    &lt;CDComment&gt;The basic quantifiers forall and exists.&lt;/CDComment&gt;
    &lt;CDGroupMember&gt;
      &lt;CDName&gt;quant1&lt;/CDName&gt;
      &lt;CDURL&gt;http://www.openmath.org/cd/quant1.ocd&lt;/CDURL&gt;&lt;/CDGroupMember&gt;
    &lt;CDComment&gt;Common arithmetic relations&lt;/CDComment&gt;
    &lt;CDGroupMember&gt;
      &lt;CDName&gt;relation1&lt;/CDName&gt;
      &lt;CDURL&gt;http://www.openmath.org/cd/relation1.ocd&lt;/CDURL&gt;&lt;/CDGroupMember&gt;
    &lt;CDComment&gt;Number sets&lt;/CDComment&gt;
    &lt;CDGroupMember&gt;
      &lt;CDName&gt;setname1&lt;/CDName&gt;
      &lt;CDURL&gt;http://www.openmath.org/cd/setname1.ocd&lt;/CDURL&gt;&lt;/CDGroupMember&gt;
    &lt;CDComment&gt;Rounding&lt;/CDComment&gt;
    &lt;CDGroupMember&gt;
      &lt;CDName&gt;rounding1&lt;/CDName&gt;
      &lt;CDURL&gt;http://www.openmath.org/cd/rounding1.ocd&lt;/CDURL&gt;&lt;/CDGroupMember&gt;
    &lt;CDComment&gt;Set-theoretic operators and constructors&lt;/CDComment&gt;
    &lt;CDGroupMember&gt;
      &lt;CDName&gt;set1&lt;/CDName&gt;
      &lt;CDURL&gt;http://www.openmath.org/cd/set1.ocd&lt;/CDURL&gt;&lt;/CDGroupMember&gt;
    &lt;CDComment&gt;Basic data orientated statistical operators&lt;/CDComment&gt;
    &lt;CDGroupMember&gt;
      &lt;CDName&gt;s_data1&lt;/CDName&gt;
      &lt;CDURL&gt;http://www.openmath.org/cd/s_data1.ocd&lt;/CDURL&gt;&lt;/CDGroupMember&gt;
    &lt;CDComment&gt;Basic random variable orientated statistical operators&lt;/CDComment&gt;
    &lt;CDGroupMember&gt;
      &lt;CDName&gt;s_dist1&lt;/CDName&gt;
      &lt;CDURL&gt;http://www.openmath.org/cd/s_dist1.ocd&lt;/CDURL&gt;&lt;/CDGroupMember&gt;
    &lt;CDComment&gt;Basic transcendental functions&lt;/CDComment&gt;
    &lt;CDGroupMember&gt;
      &lt;CDName&gt;transc1&lt;/CDName&gt;
      &lt;CDURL&gt;http://www.openmath.org/cd/transc1.ocd&lt;/CDURL&gt;&lt;/CDGroupMember&gt;
    &lt;CDComment&gt;Vector calculus functions&lt;/CDComment&gt;
    &lt;CDGroupMember&gt;
      &lt;CDName&gt;veccalc1&lt;/CDName&gt;
      &lt;CDURL&gt;http://www.openmath.org/cd/veccalc1.ocd&lt;/CDURL&gt;&lt;/CDGroupMember&gt;
    &lt;CDComment&gt;Alternative encoding symbols for compatibility with the MathML
      Semantic mapping constructs.&lt;/CDComment&gt;
    &lt;CDGroupMember&gt;
      &lt;CDName&gt;altenc&lt;/CDName&gt;
      &lt;CDURL&gt;http://www.openmath.org/cd/altenc.ocd&lt;/CDURL&gt;&lt;/CDGroupMember&gt;
  &lt;/CDGroup&gt;
</pre></div>



</div>

<div><h3 name="errorcd" id="errorcd">A.5 The <b>error</b> Content Dictionary</h3>
  
  
<div class="literal"><pre>
&lt;CD&gt;<a xmlns="" name="d0t14616"/>

&lt;CDComment&gt;<a xmlns="" name="d0t14618"/>

     This document is distributed in the hope that it will be useful, 
     but WITHOUT ANY WARRANTY; without even the implied warranty of 
     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

     The copyright holder grants you permission to redistribute this 
     document freely as a verbatim copy. Furthermore, the copyright
     holder permits you to develop any derived work from this document
     provided that the following conditions are met.
       a) The derived work acknowledges the fact that it is derived from
          this document, and maintains a prominent reference in the 
          work to the original source.
       b) The fact that the derived work is not the original OpenMath 
          document is stated prominently in the derived work.  Moreover if
          both this document and the derived work are Content Dictionaries
          then the derived work must include a different CDName element,
          chosen so that it cannot be confused with any works adopted by
          the OpenMath Society.  In particular, if there is a Content 
          Dictionary Group whose name is, for example, `math' containing
          Content Dictionaries named `math1', `math2' etc., then you should 
          not name a derived Content Dictionary `mathN' where N is an integer.
          However you are free to name it `private_mathN' or some such.  This
          is because the names `mathN' may be used by the OpenMath Society
          for future extensions.
       c) The derived work is distributed under terms that allow the
          compilation of derived works, but keep paragraphs a) and b)
          intact.  The simplest way to do this is to distribute the derived
          work under the OpenMath license, but this is not a requirement.
     If you have questions about this license please contact the OpenMath
     society at http://www.openmath.org.
&lt;/CDComment&gt;<a xmlns="" name="d0t14619"/>

&lt;CDName&gt;<a xmlns="" name="d0t14621"/> error &lt;/CDName&gt;<a xmlns="" name="d0t14622"/>
&lt;CDURL&gt;<a xmlns="" name="d0t14624"/> http://www.openmath.org/cd/error.ocd &lt;/CDURL&gt;<a xmlns="" name="d0t14625"/>
&lt;CDReviewDate&gt;<a xmlns="" name="d0t14627"/> 2003-04-01 &lt;/CDReviewDate&gt;<a xmlns="" name="d0t14628"/>
&lt;CDStatus&gt;<a xmlns="" name="d0t14630"/> official &lt;/CDStatus&gt;<a xmlns="" name="d0t14631"/>
&lt;CDDate&gt;<a xmlns="" name="d0t14633"/> 2001-03-12 &lt;/CDDate&gt;<a xmlns="" name="d0t14634"/>
&lt;CDVersion&gt;<a xmlns="" name="d0t14636"/> 2 &lt;/CDVersion&gt;<a xmlns="" name="d0t14637"/>
&lt;CDRevision&gt;<a xmlns="" name="d0t14639"/> 0 &lt;/CDRevision&gt;<a xmlns="" name="d0t14640"/>
&lt;CDUses&gt;<a xmlns="" name="d0t14642"/>
&lt;CDName&gt;<a xmlns="" name="d0t14644"/> arith1 &lt;/CDName&gt;<a xmlns="" name="d0t14645"/>
&lt;CDName&gt;<a xmlns="" name="d0t14647"/> specfun1 &lt;/CDName&gt;<a xmlns="" name="d0t14648"/>
&lt;/CDUses&gt;<a xmlns="" name="d0t14649"/>

&lt;CDDefinition&gt;<a xmlns="" name="d0t14651"/>
&lt;Name&gt;<a xmlns="" name="d0t14653"/> unhandled_symbol &lt;/Name&gt;<a xmlns="" name="d0t14654"/>
&lt;Description&gt;<a xmlns="" name="d0t14656"/>
This symbol represents the error which is raised when an application
reads a symbol which is present in the mentioned content
dictionary, but which it has not implemented.

When receiving such a symbol, the application should act as if it had
received the OpenMath error object constructed from unhandled_symbol
and the unhandled symbol as in the example below.
&lt;/Description&gt;<a xmlns="" name="d0t14657"/>

&lt;Example&gt;<a xmlns="" name="d0t14659"/>
The application does not implement the Complex numbers:
&lt;OMOBJ&gt;<a xmlns="" name="d0t14661"/>
  &lt;OME&gt;<a xmlns="" name="d0t14663"/>
    &lt;OMS cd="error" name="unhandled_symbol"/&gt;<a xmlns="" name="d0t14665"/>
    &lt;OMS cd="setname1" name="C"/&gt;<a xmlns="" name="d0t14667"/>
  &lt;/OME&gt;<a xmlns="" name="d0t14668"/>
&lt;/OMOBJ&gt;<a xmlns="" name="d0t14669"/>
&lt;/Example&gt;<a xmlns="" name="d0t14670"/>
&lt;/CDDefinition&gt;<a xmlns="" name="d0t14671"/>

&lt;CDDefinition&gt;<a xmlns="" name="d0t14673"/>
&lt;Name&gt;<a xmlns="" name="d0t14675"/> unexpected_symbol &lt;/Name&gt;<a xmlns="" name="d0t14676"/>
&lt;Description&gt;<a xmlns="" name="d0t14678"/>
This symbol represents the error which is raised when an application
reads a symbol which is not present in the mentioned content dictionary.

When receiving such a symbol, the application should act as if it had
received the OpenMath error object constructed from unexpected_symbol
and the unexpected symbol as in the example below.
&lt;/Description&gt;<a xmlns="" name="d0t14679"/>
&lt;Example&gt;<a xmlns="" name="d0t14681"/>
The application received a mistyped symbol
&lt;OMOBJ&gt;<a xmlns="" name="d0t14683"/>
  &lt;OME&gt;<a xmlns="" name="d0t14685"/>
    &lt;OMS cd="error" name="unexpected_symbol"/&gt;<a xmlns="" name="d0t14687"/>
    &lt;OMS cd="arith1" name="plurse"/&gt;<a xmlns="" name="d0t14689"/>
  &lt;/OME&gt;<a xmlns="" name="d0t14690"/>
&lt;/OMOBJ&gt;<a xmlns="" name="d0t14691"/>
&lt;/Example&gt;<a xmlns="" name="d0t14692"/>
&lt;/CDDefinition&gt;<a xmlns="" name="d0t14693"/>

&lt;CDDefinition&gt;<a xmlns="" name="d0t14695"/>
&lt;Name&gt;<a xmlns="" name="d0t14697"/> unsupported_CD &lt;/Name&gt;<a xmlns="" name="d0t14698"/>
&lt;Description&gt;<a xmlns="" name="d0t14700"/>
This symbol represents the error which is raised when an application
reads a symbol where the mentioned content dictionary is not
present.

When receiving such a symbol, the application should act as if it had
received the OpenMath error object constructed from unsupported_CD and
the symbol from the unsupported Content Dictionary as in the example
below.
&lt;/Description&gt;<a xmlns="" name="d0t14701"/>
&lt;Example&gt;<a xmlns="" name="d0t14703"/>
The application does not know about the CD specfun1
&lt;OMOBJ&gt;<a xmlns="" name="d0t14705"/>
  &lt;OME&gt;<a xmlns="" name="d0t14707"/>
    &lt;OMS cd="error" name="unsupported_CD"/&gt;<a xmlns="" name="d0t14709"/>
    &lt;OMS cd="specfun1" name="BesselJ"/&gt;<a xmlns="" name="d0t14711"/>
  &lt;/OME&gt;<a xmlns="" name="d0t14712"/>
&lt;/OMOBJ&gt;<a xmlns="" name="d0t14713"/>
&lt;/Example&gt;<a xmlns="" name="d0t14714"/>
&lt;/CDDefinition&gt;<a xmlns="" name="d0t14715"/>

&lt;/CD&gt;


</pre></div>

</div>

</div>


<div><h2 name="app_openmath.rng" id="app_openmath.rng">
  Appendix B<br/><i>OpenMath</i> Schema in Relax NG XML Syntax (Normative)</h2>
  
  
  <p>This is the Relax NG Schema described in <a href="#sec_xml">Section 4.1</a>
    expressed according to the Relax NG XML Syntax.
  </p>
  <div class="literal"><pre>
    

&lt;grammar ns="http://www.openmath.org/OpenMath" datatypeLibrary="http://www.w3.org/2001/XMLSchema-datatypes"&gt;<a xmlns="" name="d0t14737"/>
  &lt;!-- OM2: allow OMR --&gt;<a xmlns="" name="d0t14739"/>
  &lt;define name="omel"&gt;<a xmlns="" name="d0t14741"/>
    &lt;choice&gt;<a xmlns="" name="d0t14743"/>
      &lt;ref name="OMS"/&gt;<a xmlns="" name="d0t14745"/>
      &lt;ref name="OMV"/&gt;<a xmlns="" name="d0t14747"/>
      &lt;ref name="OMI"/&gt;<a xmlns="" name="d0t14749"/>
      &lt;ref name="OMB"/&gt;<a xmlns="" name="d0t14751"/>
      &lt;ref name="OMSTR"/&gt;<a xmlns="" name="d0t14753"/>
      &lt;ref name="OMF"/&gt;<a xmlns="" name="d0t14755"/>
      &lt;ref name="OMA"/&gt;<a xmlns="" name="d0t14757"/>
      &lt;ref name="OMBIND"/&gt;<a xmlns="" name="d0t14759"/>
      &lt;ref name="OME"/&gt;<a xmlns="" name="d0t14761"/>
      &lt;ref name="OMATTR"/&gt;<a xmlns="" name="d0t14763"/>
      &lt;ref name="OMR"/&gt;<a xmlns="" name="d0t14765"/>
    &lt;/choice&gt;<a xmlns="" name="d0t14766"/>
  &lt;/define&gt;<a xmlns="" name="d0t14767"/>
  &lt;!-- things which can be variables --&gt;<a xmlns="" name="d0t14769"/>
  &lt;define name="omvar"&gt;<a xmlns="" name="d0t14771"/>
    &lt;choice&gt;<a xmlns="" name="d0t14773"/>
      &lt;ref name="OMV"/&gt;<a xmlns="" name="d0t14775"/>
      &lt;ref name="attvar"/&gt;<a xmlns="" name="d0t14777"/>
    &lt;/choice&gt;<a xmlns="" name="d0t14778"/>
  &lt;/define&gt;<a xmlns="" name="d0t14779"/>
  &lt;define name="attvar"&gt;<a xmlns="" name="d0t14781"/>
    &lt;element name="OMATTR"&gt;<a xmlns="" name="d0t14783"/>
      &lt;ref name="common.attributes"/&gt;<a xmlns="" name="d0t14785"/>
      &lt;group&gt;<a xmlns="" name="d0t14787"/>
        &lt;ref name="OMATP"/&gt;<a xmlns="" name="d0t14789"/>
        &lt;choice&gt;<a xmlns="" name="d0t14791"/>
          &lt;ref name="OMV"/&gt;<a xmlns="" name="d0t14793"/>
          &lt;ref name="attvar"/&gt;<a xmlns="" name="d0t14795"/>
        &lt;/choice&gt;<a xmlns="" name="d0t14796"/>
      &lt;/group&gt;<a xmlns="" name="d0t14797"/>
    &lt;/element&gt;<a xmlns="" name="d0t14798"/>
  &lt;/define&gt;<a xmlns="" name="d0t14799"/>
  &lt;!-- OM2: common attributes --&gt;<a xmlns="" name="d0t14801"/>
  &lt;define name="cdbase"&gt;<a xmlns="" name="d0t14803"/>
    &lt;optional&gt;<a xmlns="" name="d0t14805"/>
      &lt;attribute name="cdbase"&gt;<a xmlns="" name="d0t14807"/>
        &lt;data type="anyURI"/&gt;<a xmlns="" name="d0t14809"/>
      &lt;/attribute&gt;<a xmlns="" name="d0t14810"/>
    &lt;/optional&gt;<a xmlns="" name="d0t14811"/>
  &lt;/define&gt;<a xmlns="" name="d0t14812"/>
  &lt;define name="common.attributes"&gt;<a xmlns="" name="d0t14814"/>
    &lt;optional&gt;<a xmlns="" name="d0t14816"/>
      &lt;attribute name="id"&gt;<a xmlns="" name="d0t14818"/>
        &lt;data type="ID"/&gt;<a xmlns="" name="d0t14820"/>
      &lt;/attribute&gt;<a xmlns="" name="d0t14821"/>
    &lt;/optional&gt;<a xmlns="" name="d0t14822"/>
  &lt;/define&gt;<a xmlns="" name="d0t14823"/>
  &lt;define name="compound.attributes"&gt;<a xmlns="" name="d0t14825"/>
    &lt;ref name="common.attributes"/&gt;<a xmlns="" name="d0t14827"/>
    &lt;ref name="cdbase"/&gt;<a xmlns="" name="d0t14829"/>
  &lt;/define&gt;<a xmlns="" name="d0t14830"/>
  &lt;!-- symbol --&gt;<a xmlns="" name="d0t14832"/>
  &lt;define name="OMS"&gt;<a xmlns="" name="d0t14834"/>
    &lt;element name="OMS"&gt;<a xmlns="" name="d0t14836"/>
      &lt;ref name="common.attributes"/&gt;<a xmlns="" name="d0t14838"/>
      &lt;ref name="attlist.OMS"/&gt;<a xmlns="" name="d0t14840"/>
    &lt;/element&gt;<a xmlns="" name="d0t14841"/>
  &lt;/define&gt;<a xmlns="" name="d0t14842"/>
  &lt;define name="attlist.OMS"&gt;<a xmlns="" name="d0t14844"/>
    &lt;attribute name="name"&gt;<a xmlns="" name="d0t14846"/>
      &lt;data type="NCName"/&gt;<a xmlns="" name="d0t14848"/>
    &lt;/attribute&gt;<a xmlns="" name="d0t14849"/>
    &lt;attribute name="cd"&gt;<a xmlns="" name="d0t14851"/>
      &lt;data type="NCName"/&gt;<a xmlns="" name="d0t14853"/>
    &lt;/attribute&gt;<a xmlns="" name="d0t14854"/>
    &lt;ref name="cdbase"/&gt;<a xmlns="" name="d0t14856"/>
  &lt;/define&gt;<a xmlns="" name="d0t14857"/>
  &lt;!-- variable --&gt;<a xmlns="" name="d0t14859"/>
  &lt;define name="OMV"&gt;<a xmlns="" name="d0t14861"/>
    &lt;element name="OMV"&gt;<a xmlns="" name="d0t14863"/>
      &lt;ref name="common.attributes"/&gt;<a xmlns="" name="d0t14865"/>
      &lt;ref name="attlist.OMV"/&gt;<a xmlns="" name="d0t14867"/>
      &lt;optional&gt;<a xmlns="" name="d0t14869"/>
        &lt;ref name="omel"/&gt;<a xmlns="" name="d0t14871"/>
      &lt;/optional&gt;<a xmlns="" name="d0t14872"/>
    &lt;/element&gt;<a xmlns="" name="d0t14873"/>
  &lt;/define&gt;<a xmlns="" name="d0t14874"/>
  &lt;define name="attlist.OMV"&gt;<a xmlns="" name="d0t14876"/>
    &lt;attribute name="name"&gt;<a xmlns="" name="d0t14878"/>
      &lt;data type="NCName"/&gt;<a xmlns="" name="d0t14880"/>
    &lt;/attribute&gt;<a xmlns="" name="d0t14881"/>
  &lt;/define&gt;<a xmlns="" name="d0t14882"/>
  &lt;!-- integer --&gt;<a xmlns="" name="d0t14884"/>
  &lt;define name="OMI"&gt;<a xmlns="" name="d0t14886"/>
    &lt;element name="OMI"&gt;<a xmlns="" name="d0t14888"/>
      &lt;ref name="common.attributes"/&gt;<a xmlns="" name="d0t14890"/>
      &lt;data type="string"&gt;<a xmlns="" name="d0t14892"/>
        &lt;param name="pattern"&gt;<a xmlns="" name="d0t14894"/>\s*(-\s?)?[0-9]+(\s[0-9]+)*\s*&lt;/param&gt;<a xmlns="" name="d0t14895"/>
      &lt;/data&gt;<a xmlns="" name="d0t14896"/>
    &lt;/element&gt;<a xmlns="" name="d0t14897"/>
  &lt;/define&gt;<a xmlns="" name="d0t14898"/>
  &lt;!-- byte array --&gt;<a xmlns="" name="d0t14900"/>
  &lt;define name="OMB"&gt;<a xmlns="" name="d0t14902"/>
    &lt;element name="OMB"&gt;<a xmlns="" name="d0t14904"/>
      &lt;ref name="common.attributes"/&gt;<a xmlns="" name="d0t14906"/>
      &lt;data type="base64Binary"/&gt;<a xmlns="" name="d0t14908"/>
    &lt;/element&gt;<a xmlns="" name="d0t14909"/>
  &lt;/define&gt;<a xmlns="" name="d0t14910"/>
  &lt;!-- string --&gt;<a xmlns="" name="d0t14912"/>
  &lt;define name="OMSTR"&gt;<a xmlns="" name="d0t14914"/>
    &lt;element name="OMSTR"&gt;<a xmlns="" name="d0t14916"/>
      &lt;ref name="common.attributes"/&gt;<a xmlns="" name="d0t14918"/>
      &lt;text/&gt;<a xmlns="" name="d0t14920"/>
    &lt;/element&gt;<a xmlns="" name="d0t14921"/>
  &lt;/define&gt;<a xmlns="" name="d0t14922"/>
  &lt;!-- floating point --&gt;<a xmlns="" name="d0t14924"/>
  &lt;define name="OMF"&gt;<a xmlns="" name="d0t14926"/>
    &lt;element name="OMF"&gt;<a xmlns="" name="d0t14928"/>
      &lt;ref name="common.attributes"/&gt;<a xmlns="" name="d0t14930"/>
      &lt;ref name="attlist.OMF"/&gt;<a xmlns="" name="d0t14932"/>
    &lt;/element&gt;<a xmlns="" name="d0t14933"/>
  &lt;/define&gt;<a xmlns="" name="d0t14934"/>
  &lt;define name="attlist.OMF"&gt;<a xmlns="" name="d0t14936"/>
    &lt;choice&gt;<a xmlns="" name="d0t14938"/>
      &lt;attribute name="dec"&gt;<a xmlns="" name="d0t14940"/>
        &lt;data type="string"&gt;<a xmlns="" name="d0t14942"/>
          &lt;param name="pattern"&gt;<a xmlns="" name="d0t14944"/>(-?)([0-9]+)?(\.[0-9]+)?(e([+\-]?)[0-9]+)?&lt;/param&gt;<a xmlns="" name="d0t14945"/>
        &lt;/data&gt;<a xmlns="" name="d0t14946"/>
      &lt;/attribute&gt;<a xmlns="" name="d0t14947"/>
      &lt;attribute name="hex"&gt;<a xmlns="" name="d0t14949"/>
        &lt;data type="string"&gt;<a xmlns="" name="d0t14951"/>
          &lt;param name="pattern"&gt;<a xmlns="" name="d0t14953"/>[0-9A-F]+&lt;/param&gt;<a xmlns="" name="d0t14954"/>
        &lt;/data&gt;<a xmlns="" name="d0t14955"/>
      &lt;/attribute&gt;<a xmlns="" name="d0t14956"/>
    &lt;/choice&gt;<a xmlns="" name="d0t14957"/>
  &lt;/define&gt;<a xmlns="" name="d0t14958"/>
  &lt;!-- apply constructor --&gt;<a xmlns="" name="d0t14960"/>
  &lt;define name="OMA"&gt;<a xmlns="" name="d0t14962"/>
    &lt;element name="OMA"&gt;<a xmlns="" name="d0t14964"/>
      &lt;ref name="compound.attributes"/&gt;<a xmlns="" name="d0t14966"/>
      &lt;oneOrMore&gt;<a xmlns="" name="d0t14968"/>
        &lt;ref name="omel"/&gt;<a xmlns="" name="d0t14970"/>
      &lt;/oneOrMore&gt;<a xmlns="" name="d0t14971"/>
    &lt;/element&gt;<a xmlns="" name="d0t14972"/>
  &lt;/define&gt;<a xmlns="" name="d0t14973"/>
  &lt;!-- binding constructor and variable --&gt;<a xmlns="" name="d0t14975"/>
  &lt;define name="OMBIND"&gt;<a xmlns="" name="d0t14977"/>
    &lt;element name="OMBIND"&gt;<a xmlns="" name="d0t14979"/>
      &lt;ref name="compound.attributes"/&gt;<a xmlns="" name="d0t14981"/>
      &lt;ref name="omel"/&gt;<a xmlns="" name="d0t14983"/>
      &lt;ref name="OMBVAR"/&gt;<a xmlns="" name="d0t14985"/>
      &lt;ref name="omel"/&gt;<a xmlns="" name="d0t14987"/>
    &lt;/element&gt;<a xmlns="" name="d0t14988"/>
  &lt;/define&gt;<a xmlns="" name="d0t14989"/>
  &lt;define name="OMBVAR"&gt;<a xmlns="" name="d0t14991"/>
    &lt;element name="OMBVAR"&gt;<a xmlns="" name="d0t14993"/>
      &lt;ref name="common.attributes"/&gt;<a xmlns="" name="d0t14995"/>
      &lt;oneOrMore&gt;<a xmlns="" name="d0t14997"/>
        &lt;ref name="omvar"/&gt;<a xmlns="" name="d0t14999"/>
      &lt;/oneOrMore&gt;<a xmlns="" name="d0t15000"/>
    &lt;/element&gt;<a xmlns="" name="d0t15001"/>
  &lt;/define&gt;<a xmlns="" name="d0t15002"/>
  &lt;!-- error --&gt;<a xmlns="" name="d0t15004"/>
  &lt;define name="OME"&gt;<a xmlns="" name="d0t15006"/>
    &lt;element name="OME"&gt;<a xmlns="" name="d0t15008"/>
      &lt;ref name="common.attributes"/&gt;<a xmlns="" name="d0t15010"/>
      &lt;ref name="OMS"/&gt;<a xmlns="" name="d0t15012"/>
      &lt;zeroOrMore&gt;<a xmlns="" name="d0t15014"/>
        &lt;ref name="omel"/&gt;<a xmlns="" name="d0t15016"/>
      &lt;/zeroOrMore&gt;<a xmlns="" name="d0t15017"/>
    &lt;/element&gt;<a xmlns="" name="d0t15018"/>
  &lt;/define&gt;<a xmlns="" name="d0t15019"/>
  &lt;!-- attribution constructor and attribute pair constructor --&gt;<a xmlns="" name="d0t15021"/>
  &lt;define name="OMATTR"&gt;<a xmlns="" name="d0t15023"/>
    &lt;element name="OMATTR"&gt;<a xmlns="" name="d0t15025"/>
      &lt;ref name="compound.attributes"/&gt;<a xmlns="" name="d0t15027"/>
      &lt;ref name="OMATP"/&gt;<a xmlns="" name="d0t15029"/>
      &lt;ref name="omel"/&gt;<a xmlns="" name="d0t15031"/>
    &lt;/element&gt;<a xmlns="" name="d0t15032"/>
  &lt;/define&gt;<a xmlns="" name="d0t15033"/>
  &lt;!-- OM2: allow OMFOREIGN --&gt;<a xmlns="" name="d0t15035"/>
  &lt;define name="OMATP"&gt;<a xmlns="" name="d0t15037"/>
    &lt;element name="OMATP"&gt;<a xmlns="" name="d0t15039"/>
      &lt;ref name="compound.attributes"/&gt;<a xmlns="" name="d0t15041"/>
      &lt;oneOrMore&gt;<a xmlns="" name="d0t15043"/>
        &lt;ref name="OMS"/&gt;<a xmlns="" name="d0t15045"/>
        &lt;choice&gt;<a xmlns="" name="d0t15047"/>
          &lt;ref name="omel"/&gt;<a xmlns="" name="d0t15049"/>
          &lt;ref name="OMFOREIGN"/&gt;<a xmlns="" name="d0t15051"/>
        &lt;/choice&gt;<a xmlns="" name="d0t15052"/>
      &lt;/oneOrMore&gt;<a xmlns="" name="d0t15053"/>
    &lt;/element&gt;<a xmlns="" name="d0t15054"/>
  &lt;/define&gt;<a xmlns="" name="d0t15055"/>
  &lt;!-- OM2: OMFOREIGN --&gt;<a xmlns="" name="d0t15057"/>
  &lt;define name="OMFOREIGN"&gt;<a xmlns="" name="d0t15059"/>
    &lt;element name="OMFOREIGN"&gt;<a xmlns="" name="d0t15061"/>
      &lt;ref name="compound.attributes"/&gt;<a xmlns="" name="d0t15063"/>
      &lt;zeroOrMore&gt;<a xmlns="" name="d0t15065"/>
        &lt;choice&gt;<a xmlns="" name="d0t15067"/>
          &lt;ref name="omel"/&gt;<a xmlns="" name="d0t15069"/>
          &lt;ref name="notom"/&gt;<a xmlns="" name="d0t15071"/>
        &lt;/choice&gt;<a xmlns="" name="d0t15072"/>
      &lt;/zeroOrMore&gt;<a xmlns="" name="d0t15073"/>
    &lt;/element&gt;<a xmlns="" name="d0t15074"/>
  &lt;/define&gt;<a xmlns="" name="d0t15075"/>
  &lt;!-- Any elements not in the om namespace (valid om is allowed as a descendant) --&gt;<a xmlns="" name="d0t15077"/>
  &lt;define name="notom"&gt;<a xmlns="" name="d0t15079"/>
    &lt;choice&gt;<a xmlns="" name="d0t15081"/>
      &lt;element&gt;<a xmlns="" name="d0t15083"/>
        &lt;anyName&gt;<a xmlns="" name="d0t15085"/>
          &lt;except&gt;<a xmlns="" name="d0t15087"/>
            &lt;nsName/&gt;<a xmlns="" name="d0t15089"/>
          &lt;/except&gt;<a xmlns="" name="d0t15090"/>
        &lt;/anyName&gt;<a xmlns="" name="d0t15091"/>
        &lt;zeroOrMore&gt;<a xmlns="" name="d0t15093"/>
          &lt;attribute&gt;<a xmlns="" name="d0t15095"/>
            &lt;anyName/&gt;<a xmlns="" name="d0t15097"/>
          &lt;/attribute&gt;<a xmlns="" name="d0t15098"/>
        &lt;/zeroOrMore&gt;<a xmlns="" name="d0t15099"/>
        &lt;zeroOrMore&gt;<a xmlns="" name="d0t15101"/>
          &lt;choice&gt;<a xmlns="" name="d0t15103"/>
            &lt;ref name="omel"/&gt;<a xmlns="" name="d0t15105"/>
            &lt;ref name="notom"/&gt;<a xmlns="" name="d0t15107"/>
          &lt;/choice&gt;<a xmlns="" name="d0t15108"/>
        &lt;/zeroOrMore&gt;<a xmlns="" name="d0t15109"/>
      &lt;/element&gt;<a xmlns="" name="d0t15110"/>
      &lt;text/&gt;<a xmlns="" name="d0t15112"/>
    &lt;/choice&gt;<a xmlns="" name="d0t15113"/>
  &lt;/define&gt;<a xmlns="" name="d0t15114"/>
  &lt;!-- OM object constructor --&gt;<a xmlns="" name="d0t15116"/>
  &lt;define name="OMOBJ"&gt;<a xmlns="" name="d0t15118"/>
    &lt;element name="OMOBJ"&gt;<a xmlns="" name="d0t15120"/>
      &lt;ref name="compound.attributes"/&gt;<a xmlns="" name="d0t15122"/>
      &lt;ref name="omel"/&gt;<a xmlns="" name="d0t15124"/>
    &lt;/element&gt;<a xmlns="" name="d0t15125"/>
  &lt;/define&gt;<a xmlns="" name="d0t15126"/>
  &lt;define name="attlist.OMOBJ"&gt;<a xmlns="" name="d0t15128"/>
    &lt;attribute name="version"&gt;<a xmlns="" name="d0t15130"/>
      &lt;choice&gt;<a xmlns="" name="d0t15132"/>
        &lt;value&gt;<a xmlns="" name="d0t15134"/>1.0&lt;/value&gt;<a xmlns="" name="d0t15135"/>
        &lt;value&gt;<a xmlns="" name="d0t15137"/>1.2&lt;/value&gt;<a xmlns="" name="d0t15138"/>
        &lt;value&gt;<a xmlns="" name="d0t15140"/>2.0&lt;/value&gt;<a xmlns="" name="d0t15141"/>
      &lt;/choice&gt;<a xmlns="" name="d0t15142"/>
    &lt;/attribute&gt;<a xmlns="" name="d0t15143"/>
  &lt;/define&gt;<a xmlns="" name="d0t15144"/>
  &lt;!-- OM2: OMR --&gt;<a xmlns="" name="d0t15146"/>
  &lt;define name="OMR"&gt;<a xmlns="" name="d0t15148"/>
    &lt;element name="OMR"&gt;<a xmlns="" name="d0t15150"/>
      &lt;ref name="common.attributes"/&gt;<a xmlns="" name="d0t15152"/>
      &lt;ref name="attlist.OMR"/&gt;<a xmlns="" name="d0t15154"/>
    &lt;/element&gt;<a xmlns="" name="d0t15155"/>
  &lt;/define&gt;<a xmlns="" name="d0t15156"/>
  &lt;define name="attlist.OMR"&gt;<a xmlns="" name="d0t15158"/>
    &lt;attribute name="xlink:href"/&gt;<a xmlns="" name="d0t15160"/>
    &lt;attribute name="xlink:type"&gt;<a xmlns="" name="d0t15162"/>
      &lt;value&gt;<a xmlns="" name="d0t15164"/>simple&lt;/value&gt;<a xmlns="" name="d0t15165"/>
    &lt;/attribute&gt;<a xmlns="" name="d0t15166"/>
    &lt;attribute name="xlink:show"&gt;<a xmlns="" name="d0t15168"/>
      &lt;value&gt;<a xmlns="" name="d0t15170"/>embed&lt;/value&gt;<a xmlns="" name="d0t15171"/>
    &lt;/attribute&gt;<a xmlns="" name="d0t15172"/>
  &lt;/define&gt;<a xmlns="" name="d0t15173"/>
  &lt;start&gt;<a xmlns="" name="d0t15175"/>
    &lt;ref name="OMOBJ"/&gt;<a xmlns="" name="d0t15177"/>
  &lt;/start&gt;<a xmlns="" name="d0t15178"/>
&lt;/grammar&gt;

  </pre></div>
</div>

<div><h2 name="app_relaxrestricted" id="app_relaxrestricted">
  Appendix C<br/>Restricting the <i>OpenMath</i> Schema (Non-Normative)</h2>
  
  
  <p> Relax NG allows one to state constraints such as <i>
      if the cd attribute of OMS is arith1 then the name attribute must be
      one of lcm, gcd, plus etc.</i> Thus it is easy to use a
    stylesheet to generate for any given CD, a Relax NG schema that
    expresses the constraint that an <small><code>OMS</code></small> naming
    that CD must only use symbols defined in the specified dictionary.
    Similarly it is possible to use the <i>role</i>
    information contained in the CD to restrict which symbols can be the
    first child of an <small><code>OMBIND</code></small> or the odd-numbered
    children of an <small><code>OMATP</code></small>. 
  </p>
  
  <p> The modularisation mechanisms of Relax NG then allow one to
    include these schema for all the CDs that you want to allow and, for
    example, to replace the regexp-based validation of the
    <small><code>OMS</code></small> attributes by explicit lists of allowed
    CD names, and for each CD Name, a list of allowed symbol names.
  </p>
  
  <p>
    For example, a CD-specific Relax NG Schema for the arith1 CD shown in
    <a href="#arith1.ocd">Appendix A.2</a> would look like:
    <div class="literal"><pre>
&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;grammar xmlns="http://relaxng.org/ns/structure/1.0" datatypeLibrary=""&gt;
  &lt;define name="cd.attlist.OMS" combine="choice"&gt;
    &lt;attribute name="cd"&gt;
      &lt;value type="string"&gt;arith1&lt;/value&gt;
    &lt;/attribute&gt;
    &lt;attribute name="name"&gt;
      &lt;choice&gt;
        &lt;value type="string"&gt;lcm&lt;/value&gt;
        &lt;value type="string"&gt;gcd&lt;/value&gt;
        &lt;value type="string"&gt;plus&lt;/value&gt;
        &lt;value type="string"&gt;unary_minus&lt;/value&gt;
        &lt;value type="string"&gt;minus&lt;/value&gt;
        &lt;value type="string"&gt;times&lt;/value&gt;
        &lt;value type="string"&gt;divide&lt;/value&gt;
        &lt;value type="string"&gt;power&lt;/value&gt;
        &lt;value type="string"&gt;abs&lt;/value&gt;
        &lt;value type="string"&gt;root&lt;/value&gt;
        &lt;value type="string"&gt;sum&lt;/value&gt;
        &lt;value type="string"&gt;product&lt;/value&gt;
      &lt;/choice&gt;
    &lt;/attribute&gt;
  &lt;/define&gt;
&lt;/grammar&gt;
</pre></div>
or, using the Relax NG compact syntax:
<div class="literal"><pre>
  cd.attlist.OMS |= 
  attribute cd {string "arith1" },
  attribute name {
  string "lcm" |
  string "gcd" |
  string "plus" |
  string "unary_minus" |
  string "minus" |
  string "times" |
  string "divide" |
  string "power" |
  string "abs" |
  string "root" |
  string "sum" |
  string "product" }
</pre></div>
</p>

<p> To build a schema that allows only symbols from arith1 we just
  need to include the <i>OpenMath</i> schema described in <a href="#ssec_xml">Section 4.1.1</a>, override the attribute declarations for
  OMS, and then include the schema for arith1.  For example:
  <div class="literal"><pre>
    &lt;?xml version="1.0" encoding="UTF-8"?&gt;
    &lt;grammar xmlns="http://relaxng.org/ns/structure/1.0"&gt;
      &lt;include href="openmath.rng"&gt;
        &lt;define name="attlist.OMS"&gt;
          &lt;ref name="cd.attlist.OMS"/&gt;
        &lt;/define&gt;
      &lt;/include&gt;
      &lt;include href="arith1.rng"/&gt;
    &lt;/grammar&gt;
  </pre></div>
  or, in the compact syntax:
  <div class="literal"><pre>
    include "openmath.rnc" {
    attlist.OMS = cd.attlist.OMS}
    
    include "arith1.rnc"
  </pre></div>
  Using this approach it is possible to include as many files as
  required.
</p>

</div>

<div><h2 name="app_xsd" id="app_xsd">
  Appendix D<br/><i>OpenMath</i> Schema in XSD Syntax (Non-Normative)</h2>
  
  
  <p>This is an XSD Schema generated from the Relax NG Schema described in 
    <a href="#sec_xml">Section 4.1</a>.
  </p>
  <div class="literal"><pre>
    

&lt;schema elementFormDefault="qualified" targetNamespace="http://www.openmath.org/OpenMath"&gt;<a xmlns="" name="d0t15257"/>
  &lt;import namespace="http://www.w3.org/1999/xlink" schemaLocation="xlink.xsd"/&gt;<a xmlns="" name="d0t15259"/>
  &lt;!-- OM2: allow OMR --&gt;<a xmlns="" name="d0t15261"/>
  &lt;group name="omel"&gt;<a xmlns="" name="d0t15263"/>
    &lt;choice&gt;<a xmlns="" name="d0t15265"/>
      &lt;element ref="om:OMS"/&gt;<a xmlns="" name="d0t15267"/>
      &lt;element ref="om:OMV"/&gt;<a xmlns="" name="d0t15269"/>
      &lt;element ref="om:OMI"/&gt;<a xmlns="" name="d0t15271"/>
      &lt;element ref="om:OMB"/&gt;<a xmlns="" name="d0t15273"/>
      &lt;element ref="om:OMSTR"/&gt;<a xmlns="" name="d0t15275"/>
      &lt;element ref="om:OMF"/&gt;<a xmlns="" name="d0t15277"/>
      &lt;element ref="om:OMA"/&gt;<a xmlns="" name="d0t15279"/>
      &lt;element ref="om:OMBIND"/&gt;<a xmlns="" name="d0t15281"/>
      &lt;element ref="om:OME"/&gt;<a xmlns="" name="d0t15283"/>
      &lt;group ref="om:OMATTR"/&gt;<a xmlns="" name="d0t15285"/>
      &lt;element ref="om:OMR"/&gt;<a xmlns="" name="d0t15287"/>
    &lt;/choice&gt;<a xmlns="" name="d0t15288"/>
  &lt;/group&gt;<a xmlns="" name="d0t15289"/>
  &lt;!-- things which can be variables --&gt;<a xmlns="" name="d0t15291"/>
  &lt;group name="omvar"&gt;<a xmlns="" name="d0t15293"/>
    &lt;choice&gt;<a xmlns="" name="d0t15295"/>
      &lt;element ref="om:OMV"/&gt;<a xmlns="" name="d0t15297"/>
      &lt;group ref="om:attvar"/&gt;<a xmlns="" name="d0t15299"/>
    &lt;/choice&gt;<a xmlns="" name="d0t15300"/>
  &lt;/group&gt;<a xmlns="" name="d0t15301"/>
  &lt;group name="attvar"&gt;<a xmlns="" name="d0t15303"/>
    &lt;sequence&gt;<a xmlns="" name="d0t15305"/>
      &lt;element name="OMATTR"&gt;<a xmlns="" name="d0t15307"/>
        &lt;complexType&gt;<a xmlns="" name="d0t15309"/>
          &lt;sequence&gt;<a xmlns="" name="d0t15311"/>
            &lt;element ref="om:OMATP"/&gt;<a xmlns="" name="d0t15313"/>
            &lt;choice&gt;<a xmlns="" name="d0t15315"/>
              &lt;element ref="om:OMV"/&gt;<a xmlns="" name="d0t15317"/>
              &lt;group ref="om:attvar"/&gt;<a xmlns="" name="d0t15319"/>
            &lt;/choice&gt;<a xmlns="" name="d0t15320"/>
          &lt;/sequence&gt;<a xmlns="" name="d0t15321"/>
          &lt;attributeGroup ref="om:common.attributes"/&gt;<a xmlns="" name="d0t15323"/>
        &lt;/complexType&gt;<a xmlns="" name="d0t15324"/>
      &lt;/element&gt;<a xmlns="" name="d0t15325"/>
    &lt;/sequence&gt;<a xmlns="" name="d0t15326"/>
  &lt;/group&gt;<a xmlns="" name="d0t15327"/>
  &lt;!-- OM2: common attributes --&gt;<a xmlns="" name="d0t15329"/>
  &lt;attributeGroup name="cdbase"&gt;<a xmlns="" name="d0t15331"/>
    &lt;attribute name="cdbase" type="xs:anyURI"/&gt;<a xmlns="" name="d0t15333"/>
  &lt;/attributeGroup&gt;<a xmlns="" name="d0t15334"/>
  &lt;attributeGroup name="common.attributes"&gt;<a xmlns="" name="d0t15336"/>
    &lt;attribute name="id" type="xs:ID"/&gt;<a xmlns="" name="d0t15338"/>
  &lt;/attributeGroup&gt;<a xmlns="" name="d0t15339"/>
  &lt;attributeGroup name="compound.attributes"&gt;<a xmlns="" name="d0t15341"/>
    &lt;attributeGroup ref="om:common.attributes"/&gt;<a xmlns="" name="d0t15343"/>
    &lt;attributeGroup ref="om:cdbase"/&gt;<a xmlns="" name="d0t15345"/>
  &lt;/attributeGroup&gt;<a xmlns="" name="d0t15346"/>
  &lt;!-- symbol --&gt;<a xmlns="" name="d0t15348"/>
  &lt;element name="OMS"&gt;<a xmlns="" name="d0t15350"/>
    &lt;complexType&gt;<a xmlns="" name="d0t15352"/>
      &lt;attributeGroup ref="om:common.attributes"/&gt;<a xmlns="" name="d0t15354"/>
      &lt;attributeGroup ref="om:attlist.OMS"/&gt;<a xmlns="" name="d0t15356"/>
    &lt;/complexType&gt;<a xmlns="" name="d0t15357"/>
  &lt;/element&gt;<a xmlns="" name="d0t15358"/>
  &lt;attributeGroup name="attlist.OMS"&gt;<a xmlns="" name="d0t15360"/>
    &lt;attribute name="name" use="required" type="xs:NCName"/&gt;<a xmlns="" name="d0t15362"/>
    &lt;attribute name="cd" use="required" type="xs:NCName"/&gt;<a xmlns="" name="d0t15364"/>
    &lt;attributeGroup ref="om:cdbase"/&gt;<a xmlns="" name="d0t15366"/>
  &lt;/attributeGroup&gt;<a xmlns="" name="d0t15367"/>
  &lt;!-- variable --&gt;<a xmlns="" name="d0t15369"/>
  &lt;element name="OMV"&gt;<a xmlns="" name="d0t15371"/>
    &lt;complexType&gt;<a xmlns="" name="d0t15373"/>
      &lt;group minOccurs="0" ref="om:omel"/&gt;<a xmlns="" name="d0t15375"/>
      &lt;attributeGroup ref="om:common.attributes"/&gt;<a xmlns="" name="d0t15377"/>
      &lt;attributeGroup ref="om:attlist.OMV"/&gt;<a xmlns="" name="d0t15379"/>
    &lt;/complexType&gt;<a xmlns="" name="d0t15380"/>
  &lt;/element&gt;<a xmlns="" name="d0t15381"/>
  &lt;attributeGroup name="attlist.OMV"&gt;<a xmlns="" name="d0t15383"/>
    &lt;attribute name="name" use="required" type="xs:NCName"/&gt;<a xmlns="" name="d0t15385"/>
  &lt;/attributeGroup&gt;<a xmlns="" name="d0t15386"/>
  &lt;!-- integer --&gt;<a xmlns="" name="d0t15388"/>
  &lt;element name="OMI"&gt;<a xmlns="" name="d0t15390"/>
    &lt;complexType&gt;<a xmlns="" name="d0t15392"/>
      &lt;simpleContent&gt;<a xmlns="" name="d0t15394"/>
        &lt;restriction base="xs:anyType"&gt;<a xmlns="" name="d0t15396"/>
          &lt;simpleType&gt;<a xmlns="" name="d0t15398"/>
            &lt;restriction base="xs:string"&gt;<a xmlns="" name="d0t15400"/>
              &lt;pattern value="\s*(-\s?)?[0-9]+(\s[0-9]+)*\s*"/&gt;<a xmlns="" name="d0t15402"/>
            &lt;/restriction&gt;<a xmlns="" name="d0t15403"/>
          &lt;/simpleType&gt;<a xmlns="" name="d0t15404"/>
          &lt;attributeGroup ref="om:common.attributes"/&gt;<a xmlns="" name="d0t15406"/>
        &lt;/restriction&gt;<a xmlns="" name="d0t15407"/>
      &lt;/simpleContent&gt;<a xmlns="" name="d0t15408"/>
    &lt;/complexType&gt;<a xmlns="" name="d0t15409"/>
  &lt;/element&gt;<a xmlns="" name="d0t15410"/>
  &lt;!-- byte array --&gt;<a xmlns="" name="d0t15412"/>
  &lt;element name="OMB"&gt;<a xmlns="" name="d0t15414"/>
    &lt;complexType&gt;<a xmlns="" name="d0t15416"/>
      &lt;simpleContent&gt;<a xmlns="" name="d0t15418"/>
        &lt;extension base="xs:base64Binary"&gt;<a xmlns="" name="d0t15420"/>
          &lt;attributeGroup ref="om:common.attributes"/&gt;<a xmlns="" name="d0t15422"/>
        &lt;/extension&gt;<a xmlns="" name="d0t15423"/>
      &lt;/simpleContent&gt;<a xmlns="" name="d0t15424"/>
    &lt;/complexType&gt;<a xmlns="" name="d0t15425"/>
  &lt;/element&gt;<a xmlns="" name="d0t15426"/>
  &lt;!-- string --&gt;<a xmlns="" name="d0t15428"/>
  &lt;element name="OMSTR"&gt;<a xmlns="" name="d0t15430"/>
    &lt;complexType mixed="true"&gt;<a xmlns="" name="d0t15432"/>
      &lt;attributeGroup ref="om:common.attributes"/&gt;<a xmlns="" name="d0t15434"/>
    &lt;/complexType&gt;<a xmlns="" name="d0t15435"/>
  &lt;/element&gt;<a xmlns="" name="d0t15436"/>
  &lt;!-- floating point --&gt;<a xmlns="" name="d0t15438"/>
  &lt;element name="OMF"&gt;<a xmlns="" name="d0t15440"/>
    &lt;complexType&gt;<a xmlns="" name="d0t15442"/>
      &lt;attributeGroup ref="om:common.attributes"/&gt;<a xmlns="" name="d0t15444"/>
      &lt;attributeGroup ref="om:attlist.OMF"/&gt;<a xmlns="" name="d0t15446"/>
    &lt;/complexType&gt;<a xmlns="" name="d0t15447"/>
  &lt;/element&gt;<a xmlns="" name="d0t15448"/>
  &lt;attributeGroup name="attlist.OMF"&gt;<a xmlns="" name="d0t15450"/>
    &lt;attribute name="dec"&gt;<a xmlns="" name="d0t15452"/>
      &lt;simpleType&gt;<a xmlns="" name="d0t15454"/>
        &lt;restriction base="xs:string"&gt;<a xmlns="" name="d0t15456"/>
          &lt;pattern value="(-?)([0-9]+)?(\.[0-9]+)?(e([+\-]?)[0-9]+)?"/&gt;<a xmlns="" name="d0t15458"/>
        &lt;/restriction&gt;<a xmlns="" name="d0t15459"/>
      &lt;/simpleType&gt;<a xmlns="" name="d0t15460"/>
    &lt;/attribute&gt;<a xmlns="" name="d0t15461"/>
    &lt;attribute name="hex"&gt;<a xmlns="" name="d0t15463"/>
      &lt;simpleType&gt;<a xmlns="" name="d0t15465"/>
        &lt;restriction base="xs:string"&gt;<a xmlns="" name="d0t15467"/>
          &lt;pattern value="[0-9A-F]+"/&gt;<a xmlns="" name="d0t15469"/>
        &lt;/restriction&gt;<a xmlns="" name="d0t15470"/>
      &lt;/simpleType&gt;<a xmlns="" name="d0t15471"/>
    &lt;/attribute&gt;<a xmlns="" name="d0t15472"/>
  &lt;/attributeGroup&gt;<a xmlns="" name="d0t15473"/>
  &lt;!-- apply constructor --&gt;<a xmlns="" name="d0t15475"/>
  &lt;element name="OMA"&gt;<a xmlns="" name="d0t15477"/>
    &lt;complexType&gt;<a xmlns="" name="d0t15479"/>
      &lt;group maxOccurs="unbounded" ref="om:omel"/&gt;<a xmlns="" name="d0t15481"/>
      &lt;attributeGroup ref="om:compound.attributes"/&gt;<a xmlns="" name="d0t15483"/>
    &lt;/complexType&gt;<a xmlns="" name="d0t15484"/>
  &lt;/element&gt;<a xmlns="" name="d0t15485"/>
  &lt;!-- binding constructor and variable --&gt;<a xmlns="" name="d0t15487"/>
  &lt;element name="OMBIND"&gt;<a xmlns="" name="d0t15489"/>
    &lt;complexType&gt;<a xmlns="" name="d0t15491"/>
      &lt;sequence&gt;<a xmlns="" name="d0t15493"/>
        &lt;group ref="om:omel"/&gt;<a xmlns="" name="d0t15495"/>
        &lt;element ref="om:OMBVAR"/&gt;<a xmlns="" name="d0t15497"/>
        &lt;group ref="om:omel"/&gt;<a xmlns="" name="d0t15499"/>
      &lt;/sequence&gt;<a xmlns="" name="d0t15500"/>
      &lt;attributeGroup ref="om:compound.attributes"/&gt;<a xmlns="" name="d0t15502"/>
    &lt;/complexType&gt;<a xmlns="" name="d0t15503"/>
  &lt;/element&gt;<a xmlns="" name="d0t15504"/>
  &lt;element name="OMBVAR"&gt;<a xmlns="" name="d0t15506"/>
    &lt;complexType&gt;<a xmlns="" name="d0t15508"/>
      &lt;group maxOccurs="unbounded" ref="om:omvar"/&gt;<a xmlns="" name="d0t15510"/>
      &lt;attributeGroup ref="om:common.attributes"/&gt;<a xmlns="" name="d0t15512"/>
    &lt;/complexType&gt;<a xmlns="" name="d0t15513"/>
  &lt;/element&gt;<a xmlns="" name="d0t15514"/>
  &lt;!-- error --&gt;<a xmlns="" name="d0t15516"/>
  &lt;element name="OME"&gt;<a xmlns="" name="d0t15518"/>
    &lt;complexType&gt;<a xmlns="" name="d0t15520"/>
      &lt;sequence&gt;<a xmlns="" name="d0t15522"/>
        &lt;element ref="om:OMS"/&gt;<a xmlns="" name="d0t15524"/>
        &lt;group minOccurs="0" maxOccurs="unbounded" ref="om:omel"/&gt;<a xmlns="" name="d0t15526"/>
      &lt;/sequence&gt;<a xmlns="" name="d0t15527"/>
      &lt;attributeGroup ref="om:common.attributes"/&gt;<a xmlns="" name="d0t15529"/>
    &lt;/complexType&gt;<a xmlns="" name="d0t15530"/>
  &lt;/element&gt;<a xmlns="" name="d0t15531"/>
  &lt;!-- attribution constructor and attribute pair constructor --&gt;<a xmlns="" name="d0t15533"/>
  &lt;group name="OMATTR"&gt;<a xmlns="" name="d0t15535"/>
    &lt;sequence&gt;<a xmlns="" name="d0t15537"/>
      &lt;element name="OMATTR"&gt;<a xmlns="" name="d0t15539"/>
        &lt;complexType&gt;<a xmlns="" name="d0t15541"/>
          &lt;sequence&gt;<a xmlns="" name="d0t15543"/>
            &lt;element ref="om:OMATP"/&gt;<a xmlns="" name="d0t15545"/>
            &lt;group ref="om:omel"/&gt;<a xmlns="" name="d0t15547"/>
          &lt;/sequence&gt;<a xmlns="" name="d0t15548"/>
          &lt;attributeGroup ref="om:compound.attributes"/&gt;<a xmlns="" name="d0t15550"/>
        &lt;/complexType&gt;<a xmlns="" name="d0t15551"/>
      &lt;/element&gt;<a xmlns="" name="d0t15552"/>
    &lt;/sequence&gt;<a xmlns="" name="d0t15553"/>
  &lt;/group&gt;<a xmlns="" name="d0t15554"/>
  &lt;!-- OM2: allow OMFOREIGN --&gt;<a xmlns="" name="d0t15556"/>
  &lt;element name="OMATP"&gt;<a xmlns="" name="d0t15558"/>
    &lt;complexType&gt;<a xmlns="" name="d0t15560"/>
      &lt;sequence maxOccurs="unbounded"&gt;<a xmlns="" name="d0t15562"/>
        &lt;element ref="om:OMS"/&gt;<a xmlns="" name="d0t15564"/>
        &lt;choice&gt;<a xmlns="" name="d0t15566"/>
          &lt;group ref="om:omel"/&gt;<a xmlns="" name="d0t15568"/>
          &lt;element ref="om:OMFOREIGN"/&gt;<a xmlns="" name="d0t15570"/>
        &lt;/choice&gt;<a xmlns="" name="d0t15571"/>
      &lt;/sequence&gt;<a xmlns="" name="d0t15572"/>
      &lt;attributeGroup ref="om:compound.attributes"/&gt;<a xmlns="" name="d0t15574"/>
    &lt;/complexType&gt;<a xmlns="" name="d0t15575"/>
  &lt;/element&gt;<a xmlns="" name="d0t15576"/>
  &lt;!-- OM2: OMFOREIGN --&gt;<a xmlns="" name="d0t15578"/>
  &lt;element name="OMFOREIGN"&gt;<a xmlns="" name="d0t15580"/>
    &lt;complexType mixed="true"&gt;<a xmlns="" name="d0t15582"/>
      &lt;choice minOccurs="0" maxOccurs="unbounded"&gt;<a xmlns="" name="d0t15584"/>
        &lt;group ref="om:omel"/&gt;<a xmlns="" name="d0t15586"/>
        &lt;group ref="om:notom"/&gt;<a xmlns="" name="d0t15588"/>
      &lt;/choice&gt;<a xmlns="" name="d0t15589"/>
      &lt;attributeGroup ref="om:compound.attributes"/&gt;<a xmlns="" name="d0t15591"/>
    &lt;/complexType&gt;<a xmlns="" name="d0t15592"/>
  &lt;/element&gt;<a xmlns="" name="d0t15593"/>
  &lt;!-- Any elements not in the om namespace (valid om is allowed as a descendant) --&gt;<a xmlns="" name="d0t15595"/>
  &lt;group name="notom"&gt;<a xmlns="" name="d0t15597"/>
    &lt;sequence&gt;<a xmlns="" name="d0t15599"/>
      &lt;choice minOccurs="0"&gt;<a xmlns="" name="d0t15601"/>
        &lt;any namespace="##other" processContents="skip"/&gt;<a xmlns="" name="d0t15603"/>
        &lt;any namespace="##local" processContents="skip"/&gt;<a xmlns="" name="d0t15605"/>
      &lt;/choice&gt;<a xmlns="" name="d0t15606"/>
    &lt;/sequence&gt;<a xmlns="" name="d0t15607"/>
  &lt;/group&gt;<a xmlns="" name="d0t15608"/>
  &lt;!-- OM object constructor --&gt;<a xmlns="" name="d0t15610"/>
  &lt;element name="OMOBJ"&gt;<a xmlns="" name="d0t15612"/>
    &lt;complexType&gt;<a xmlns="" name="d0t15614"/>
      &lt;group ref="om:omel"/&gt;<a xmlns="" name="d0t15616"/>
      &lt;attributeGroup ref="om:compound.attributes"/&gt;<a xmlns="" name="d0t15618"/>
    &lt;/complexType&gt;<a xmlns="" name="d0t15619"/>
  &lt;/element&gt;<a xmlns="" name="d0t15620"/>
  &lt;attributeGroup name="attlist.OMOBJ"&gt;<a xmlns="" name="d0t15622"/>
    &lt;attribute name="version" use="required"&gt;<a xmlns="" name="d0t15624"/>
      &lt;simpleType&gt;<a xmlns="" name="d0t15626"/>
        &lt;restriction base="xs:token"&gt;<a xmlns="" name="d0t15628"/>
          &lt;enumeration value="1.0"/&gt;<a xmlns="" name="d0t15630"/>
          &lt;enumeration value="1.2"/&gt;<a xmlns="" name="d0t15632"/>
          &lt;enumeration value="2.0"/&gt;<a xmlns="" name="d0t15634"/>
        &lt;/restriction&gt;<a xmlns="" name="d0t15635"/>
      &lt;/simpleType&gt;<a xmlns="" name="d0t15636"/>
    &lt;/attribute&gt;<a xmlns="" name="d0t15637"/>
  &lt;/attributeGroup&gt;<a xmlns="" name="d0t15638"/>
  &lt;!-- OM2: OMR --&gt;<a xmlns="" name="d0t15640"/>
  &lt;element name="OMR"&gt;<a xmlns="" name="d0t15642"/>
    &lt;complexType&gt;<a xmlns="" name="d0t15644"/>
      &lt;attributeGroup ref="om:common.attributes"/&gt;<a xmlns="" name="d0t15646"/>
      &lt;attributeGroup ref="om:attlist.OMR"/&gt;<a xmlns="" name="d0t15648"/>
    &lt;/complexType&gt;<a xmlns="" name="d0t15649"/>
  &lt;/element&gt;<a xmlns="" name="d0t15650"/>
  &lt;attributeGroup name="attlist.OMR"&gt;<a xmlns="" name="d0t15652"/>
    &lt;attribute ref="xlink:href" use="required"/&gt;<a xmlns="" name="d0t15654"/>
    &lt;attribute ref="xlink:type" use="required"/&gt;<a xmlns="" name="d0t15656"/>
    &lt;attribute ref="xlink:show" use="required"/&gt;<a xmlns="" name="d0t15658"/>
  &lt;/attributeGroup&gt;<a xmlns="" name="d0t15659"/>
&lt;/schema&gt;

  </pre></div>
</div>

<div><h2 name="app_dtd" id="app_dtd">
  Appendix E<br/><i>OpenMath</i> DTD (Non-Normative)</h2>
  
  
  <p>This is a DTD generated from the Relax NG Schema described in 
    <a href="#sec_xml">Section 4.1</a>.  Note that we cannot express the 
    fact that the <small><code>OMFOREIGN</code></small> element can
    contain any well-formed XML, so we have simply restricted it to
    contain any XML defined in the DTD.
  </p>
  <div class="literal"><pre>
    &lt;?xml encoding="UTF-8"?&gt;

&lt;!-- RELAX NG Schema for OpenMath 2 --&gt;

&lt;!-- default namespace om = "http://www.openmath.org/OpenMath" --&gt;

&lt;!-- OM2: allow OMR --&gt;

&lt;!ENTITY % omel "OMS|OMV|OMI|OMB|OMSTR|OMF|OMA|OMBIND|OME|OMATTR|OMR"&gt;

&lt;!ENTITY % attvar "OMATTR"&gt;

&lt;!-- things which can be variables --&gt;

&lt;!ENTITY % omvar "OMV|%attvar;"&gt;

&lt;!-- OM2: common attributes --&gt;

&lt;!ENTITY % cdbase "
  cdbase CDATA #IMPLIED"&gt;

&lt;!ENTITY % common.attributes "
  id ID #IMPLIED"&gt;

&lt;!ENTITY % compound.attributes "
  %common.attributes;
  %cdbase;"&gt;

&lt;!ENTITY % attlist.OMS "
  name NMTOKEN #REQUIRED
  cd NMTOKEN #REQUIRED
  %cdbase;"&gt;

&lt;!-- symbol --&gt;

&lt;!ELEMENT OMS EMPTY&gt;
&lt;!ATTLIST OMS
  %common.attributes;
  %attlist.OMS;&gt;

&lt;!ENTITY % attlist.OMV "
  name NMTOKEN #REQUIRED"&gt;

&lt;!-- variable --&gt;

&lt;!ELEMENT OMV (%omel;)?&gt;
&lt;!ATTLIST OMV
  %common.attributes;
  %attlist.OMV;&gt;

&lt;!-- integer --&gt;

&lt;!ELEMENT OMI (#PCDATA)&gt;
&lt;!ATTLIST OMI
  %common.attributes;&gt;

&lt;!-- byte array --&gt;

&lt;!ELEMENT OMB (#PCDATA)&gt;
&lt;!ATTLIST OMB
  %common.attributes;&gt;

&lt;!-- string --&gt;

&lt;!ELEMENT OMSTR (#PCDATA)&gt;
&lt;!ATTLIST OMSTR
  %common.attributes;&gt;

&lt;!ENTITY % attlist.OMF "
  dec CDATA #IMPLIED
  hex CDATA #IMPLIED"&gt;

&lt;!-- floating point --&gt;

&lt;!ELEMENT OMF EMPTY&gt;
&lt;!ATTLIST OMF
  %common.attributes;
  %attlist.OMF;&gt;

&lt;!-- apply constructor --&gt;

&lt;!ELEMENT OMA (%omel;)+&gt;
&lt;!ATTLIST OMA
  %compound.attributes;&gt;

&lt;!-- binding constructor and variable --&gt;

&lt;!ELEMENT OMBIND ((%omel;),OMBVAR,(%omel;))&gt;
&lt;!ATTLIST OMBIND
  %compound.attributes;&gt;

&lt;!ELEMENT OMBVAR (%omvar;)+&gt;
&lt;!ATTLIST OMBVAR
  %common.attributes;&gt;

&lt;!-- error --&gt;

&lt;!ELEMENT OME (OMS,(%omel;)*)&gt;
&lt;!ATTLIST OME
  %common.attributes;&gt;

&lt;!-- attribution constructor and attribute pair constructor --&gt;

&lt;!ELEMENT OMATTR (OMATP,(%omel;))&gt;
&lt;!ATTLIST OMATTR
  %compound.attributes;&gt;

&lt;!-- OM2: allow OMFOREIGN  --&gt;

&lt;!ELEMENT OMATP (OMS,(%omel;|OMFOREIGN))+&gt;
&lt;!ATTLIST OMATP
  %compound.attributes;&gt;

&lt;!-- OM2: OMFOREIGN  --&gt;

&lt;!ELEMENT OMFOREIGN ANY&gt;
&lt;!ATTLIST OMFOREIGN
  %compound.attributes;&gt;

&lt;!-- Any elements not in the om namespace (valid om is allowed as a descendant) --&gt;

&lt;!-- OM object constructor --&gt;

&lt;!ELEMENT OMOBJ (%omel;)&gt;
&lt;!ATTLIST OMOBJ
  %compound.attributes;&gt;

&lt;!ENTITY % attlist.OMOBJ "
  version (1.0|1.2|2.0) #REQUIRED"&gt;

&lt;!ENTITY % attlist.OMR "
  xlink:href CDATA #REQUIRED
  xlink:type (simple) #REQUIRED
  xlink:show (embed) #REQUIRED"&gt;

&lt;!-- OM2: OMR --&gt;

&lt;!ELEMENT OMR EMPTY&gt;
&lt;!ATTLIST OMR
  xmlns:xlink CDATA #FIXED 'http://www.w3.org/1999/xlink'
  %common.attributes;
  %attlist.OMR;&gt;

  </pre></div>
</div>

<div><h2 name="app_whats_new" id="app_whats_new">
  Appendix F<br/>Changes between <i>OpenMath</i> 1.1 and <i>OpenMath</i> 2 (Non-Normative)</h2>
  
  
  
  <p>In this appendix we describe the major changes that occurred
    between version 1.1 and version 2 of the <i>OpenMath</i> standard. All changes to
    the encodings and content dictionaries have been designed to be
    backward compatibile, in other words all existing <i>OpenMath</i> objects and
    Content Dictionaries are still valid in <i>OpenMath</i> 2.  On the other hand an
    existing  <i>OpenMath</i> 1.1 application may not be able to process <i>OpenMath</i> 2
    objects.
  </p>
  
  <div><h3 name="chgformal" id="chgformal">F.1 Changes to the Formal Definition of Objects</h3>
    
    
    <p>Additional features of abstract objects have been
      introduced:</p>
    <ul>
      <li><p><i>OpenMath</i> symbols have an optional rôle qualifier which restricts the
          place where they may occur within compound objects.
          Although part of the abstract description of a symbol this information
          is intended to be stored in the CD.  In the <span>xml</span> encoding it may be
          used to provide a more restricted schema leading to tighter
          validation.
        </p></li>
      <li><p>
          In addition to their <i>name</i> and
          <i>cd</i> properties, symbols now have an optional
          <i>cdbase</i> property.  This can be used to
          disambiguate between two CDs which are produced independently but have
          the same name, and can also be used to produce a canonical URI for any
          <i>OpenMath</i> symbol for use in frameworks such as RDFS or MathML which
          need one.
        </p></li>
      <li><p><i>OpenMath</i> variables can be indexed, in which case they
          carry information about their enumerator.  Since <i>OpenMath</i> only
          allows variables and not objects to be bound, it was not possible to
          produce indexed variables by defining an appropriate symbol in a CD.
          Also, although it would be possible to produce an indexed variable
          using the new <i>semantic-attribute</i> role, it was
          felt that attributes describe or modify an object, whereas in this
          case we were constructing an atomic object.
        </p></li>
      <li><p>An <i>OpenMath</i> object may be attributed with a non-<i>OpenMath</i> object
          using the new
          <i>foreign</i>constructor.  This allows an
          <span>xml</span>-encoded <i>OpenMath</i> object to be attributed with appropriate
          Presentation MathML, for example, or a base-64 encoded MPEG file of
          its aural rendering.
        </p></li>
      <li><p>the new role property can be used to indicate that a
          symbol is an <i>attribution</i>, in which case an
          application may ignore or remove it, or a <i>semantic
            attribution</i> in which case removing it is no longer
          guarenteed to produce an equivalent object.  
        </p></li>
      <li><p>restrictions on the names of symbols, variables and
          content dictionaries have been relaxed to be compatible with XML and
          to be less Anglo-Saxon.
        </p></li>
    </ul>
    
  </div>
  
  <div><h3 name="chgenc" id="chgenc">F.2 Changes to the encodings</h3>
    
    
    <p>The <i>OpenMath</i> version 2 standard still mandantes two encodings:
      <span>xml</span> and binary. The <span>xml</span> encoding in particular has been
      updated to reflect the latest development of <span>xml</span> and is now a
      full <span>xml</span> application.  Version 2
      encodings are backward compatible with version 1.1 encodings.
    </p>
    <ul>
      <li><p>both encodings have been updated to support the
          changes to the model of abstract objects described above.
        </p></li>
      <li><p>encodings support internal and external sharing of
          objects</p></li>
      <li><p>the <span>xml</span> encoding in version 2 is defined by a Relax
          NG schema and the mandated character-based grammar of
          version 1 has been removed, while the DTD has been relegated
          to an Appendix.
        </p></li>
      <li><p>an optional attribute defining the version of the
          encoding can be specified for the encoded object</p></li>
    </ul>
    
    
  </div>
  
  
  <div><h3 name="chgcd" id="chgcd">F.3 Changes to Content Dictionaries</h3>
    
    
    <ul>
      <li><p>In <i>OpenMath</i> version 2 Content Dictionaries are defined in
          terms of 
          the abstract information content that needs
          to be specified for defining <i>OpenMath</i> symbols. The current
          implementation is thus just one possible encoding of this abstract model.
        </p></li>
      <li><p> The <i>CDUses</i> element is not part of this
          information model and has been made optional and deprecated in the reference encoding
          since it is trivial to extract its content automatically from the CD.
        </p></li>
      <li><p>
          A CD may now, optionally, define its cdbase.
        </p></li>
      <li><p>
          A CD symbol definition may now, optionally, define its role.
        </p></li>
    </ul>
    
  </div>
  
</div>


<h2 name="bibliography" id="bibliography">
  Appendix G<br/>Bibliography</h2><p><a name="Abbott_Leeuwen_Strotmann_98" id="Abbott_Leeuwen_Strotmann_98"/><b>[1]</b>  John A. Abbott, André van Leeuwen and Andreas Strotmann <i><i>OpenMath</i>: Communicating Mathematical Information 
      between Co-operating Agents in a Knowledge Network</i>, 1998.</p><p><a name="rfc1521" id="rfc1521"/><b>[2]</b>  N. Borenstein and N Freed <i>MIME (Multipurpose Internet Mail Extensions) Part One: Mechanism for Specifying and Describing the Format of Internet Message Bodies</i>, September 1993.</p><p><a name="OM_D131b" id="OM_D131b"/><b>[3]</b>  O. Caprotti and A. M. Cohen <i>A Type System for <i>OpenMath</i></i>, September 1998.</p><p><a name="OMD132b" id="OMD132b"/><b>[4]</b>  Olga Caprotti and Arjeh M. Cohen <i>A Type System for <i>OpenMath</i></i>, February 1999.</p><p><a name="Dalmas_Gaetano_Watt_97" id="Dalmas_Gaetano_Watt_97"/><b>[5]</b>  S. Dalmas, M. Gaëtano and S. Watt <i>An <i>OpenMath</i> 1.0 Implementation</i>, 1997.</p><p><a name="OM_D132c" id="OM_D132c"/><b>[6]</b>  J. Davenport <i>A Small <i>OpenMath</i> Type System</i>, April 1999.</p><p><a name="POSIX" id="POSIX"/><b>[7]</b>  IEEE <i>Std 1003.1-2001 (Open Group Technical Standard, Issue 6),
      Standard for Information Technology-Portable Operating System Interface (POSIX)</i>, 2001.</p><p><a name="ieee754_85" id="ieee754_85"/><b>[8]</b>   <i>IEEE Standard for binary Floating-Point Arithmetic</i>.</p><p><a name="IETF2396" id="IETF2396"/><b>[9]</b>  IETF <i>RFC 2396 - Uniform Resource Identifiers (URI): Generic Syntax</i>, August 1998.</p><p><a name="iso646_83" id="iso646_83"/><b>[10]</b>   <i>ISO 7-bit coded character set for information interchange</i>, 1983.</p><p><a name="RELAX" id="RELAX"/><b>[11]</b>  OASIS Committee Specification <i>RELAX NG Specification</i>, December 2001.</p><p><a name="OM_98" id="OM_98"/><b>[12]</b>  OpenMath Consortium <i><i>OpenMath</i> Version 1 - Draft</i>, June 1998.</p><p><a name="iso9660" id="iso9660"/><b>[13]</b>  Technical committee / subcommittee: JTC 1 <i>ISO 9660:1988 Information processing &#8211; Volume and File Structure of CDROM for Information Interchange</i>, 1988.</p><p><a name="UNICODE" id="UNICODE"/><b>[14]</b>  Unicode Consortium <i>The Unicode Standard: Version <span>4.0</span></i>, 19962003.</p><p><a name="XSD" id="XSD"/><b>[15]</b>  World Wide Web Consortium <i>XSD Schema Parts 1 &amp; 2</i>, May 2001.</p><p><a name="xmlns" id="xmlns"/><b>[16]</b>  World Wide Web Consortium <i>Namespaces in XML</i>, January 1999.</p><p><a name="xml" id="xml"/><b>[17]</b>  World Wide Web Consortium <i>Extensible Markup Language XML 1.0</i>, February 1998.</p><p><a name="MathML_2000" id="MathML_2000"/><b>[18]</b>  World Wide Web Consortium <i>Mathematical Markup Language (MathML) 2.0 Specification</i>, February 2001.</p><p><a name="XSL_99" id="XSL_99"/><b>[19]</b>  World Wide Web Consortium <i>Extensible Stylesheet Language (XSL) Specification</i>, 21 Apr 1999.</p><p><a name="utf8" id="utf8"/><b>[20]</b>  F. Yergeau <i>UTF-8, a transformation format of ISO 10646</i>, January 1998.</p>

</body>

</html>