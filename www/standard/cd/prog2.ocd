<CD xmlns="http://www.openmath.org/OpenMathCD">
<CDName> prog2 </CDName>
<CDURL> </CDURL>
<CDReviewDate> 2006-06-01 </CDReviewDate>
<CDStatus> experimental </CDStatus>
<CDDate> 2004-06-01 </CDDate>
<CDVersion> 0 </CDVersion>
<CDRevision> 1 </CDRevision>


<Description>
A CD for basic algorithmic concepts. We define the minimal machinery
to write small programs in OpenMath encoding. Note that "functions" in
the programming language sense can be implemented with the help of the
openmath "lambda" symbol from fns1.ocd .
</Description>

<CDDefinition>
<Name> assignment </Name>
<Description>
This symbol is used to assign values to variables. The syntax is
assignment(variable, value), where variable is the encoding of an 
OpenMath variable (OMV) and value is an OpenMath object.
</Description>
<CDComment>
Perhaps we should also have a "lazy_assignment" (like "SetDelayed" in
Mathematica)?
</CDComment>
<Example> The assignment a := 125 is encoded as
<OMOBJ xmlns="http://www.openmath.org/OpenMath" version="2.0">
 <OMA>
  <OMS cd="prog2" name="assignment"/>
  <OMV name="a"/>
  <OMI> 125 </OMI>
 </OMA>
</OMOBJ>
</Example>
</CDDefinition>

<CDDefinition>
<Name> block </Name>
<Description>
This symbol is meant to represent an arbitray block of code. A block of code 
can be empty. The syntax is

        block(obj1, obj2,...,objN)

where obji is the OpenMath encoding of the ith sentence (or action)
inside the body.
</Description>
<Example> The following block of code
{
 a := 153;
 a := a+1;
}
is encoded as
<OMOBJ xmlns="http://www.openmath.org/OpenMath" version="2.0">
 <OMA>
  <OMS cd="prog2" name="block"/>
  <OMA>
   <OMS cd="prog2" name="assignment"/>
   <OMV name="a"/>
   <OMI> 153 </OMI>
  </OMA>
  <OMA>
   <OMS cd="prog2" name="assignment"/>
   <OMV name="a"/>
   <OMA>
    <OMS cd="arith1" name="plus"/>
    <OMV name="a"/>
    <OMI> 1 </OMI>
   </OMA>
  </OMA>
 </OMA>
</OMOBJ>
</Example>
</CDDefinition>

<CDDefinition>
<Name>return</Name>
<Description>
This symbol can be used to return values from fuctions.
</Description>
</CDDefinition>

<CDDefinition>
<Name> for </Name>
<Description>
This symbol can be used to encode the for loop. The syntax is

      for(init, test, increment, body)

</Description>
</CDDefinition>

<CDDefinition>
<Name> while </Name>
<Description>
The symbol for the while loop. The syntax is

      while(test, body)

</Description>
</CDDefinition>

<CDDefinition>
<Name> if </Name>
<Description>
The symbol can be used to encode the if, then, else construct. The syntax is

      if(test, true_case, false_case)

or

      if(test, true_case)

</Description>
</CDDefinition>

<CDDefinition>
<Name> procedure </Name>
<Description>
The symbol can be used to encode a block of code having its own local
variables. The syntax is

      procedure(localvars, body)

</Description>
<CDComment>
How should local variables behave (dynamically or lexically scoped) ?
</CDComment>
</CDDefinition>

<CDDefinition>
<Name> localvars </Name>
<Description>
This symbol lists the local variables in a procedure. The syntax is

      localvars(var1, var2, ..., varN)

</Description>

<Example>
The following Mathematica code defines an operator named diffn with two
arguments which represents n-fold differentiation of a function.
 
diffn[f_,n_]:=Module[{g,i},g=f;For[i=0,i&lt;n,i=i+1,g=g'];Return[g]]

And this is the openmath translation:

<OMOBJ xmlns="http://www.openmath.org/OpenMath" version="2.0">
  <OMA>
    <OMS cd="prog2" name="assignment"/>
    <OMV name="diffn"/>
    <OMBIND>
      <OMS cd="fns1" name="lambda"/>
      <OMBVAR>
        <OMV name="f"/>
        <OMV name="n"/>
      </OMBVAR>
      <OMA>
        <OMS cd="prog2" name="procedure"/>
        <OMA>
          <OMS cd="prog2" name="localvars"/>
          <OMV name="g"/>
          <OMV name="i"/>
        </OMA>
        <OMA>
          <OMS cd="prog2" name="block"/>
          <OMA>
            <OMS cd="prog2" name="assignment"/>
            <OMV name="g"/>
            <OMV name="f"/>
          </OMA>
          <OMA>
            <OMS cd="prog2" name="for"/>
            <OMA>
              <OMS cd="prog2" name="assignment"/>
              <OMV name="i"/>
              <OMI> 0 </OMI>
            </OMA>
            <OMA>
              <OMS cd="relation1" name="lt"/>
              <OMV name="i"/>
              <OMV name="n"/>
            </OMA>
            <OMA>
              <OMS cd="prog2" name="assignment"/>
              <OMV name="i"/>
              <OMA>
                <OMS cd="arith1" name="plus"/>
                <OMV name="i"/>
                <OMI> 1 </OMI>
              </OMA>
            </OMA>
            <OMA>
              <OMS cd="prog2" name="assignment"/>
              <OMV name="g"/>
              <OMA>
                <OMS cd="calculus1" name="diff"/>
                <OMV name="g"/>
              </OMA>
            </OMA>
          </OMA>
          <OMA>
            <OMS cd="prog2" name="return"/>
            <OMV name="g"/>
          </OMA>
        </OMA>
      </OMA>
    </OMBIND>
  </OMA>
</OMOBJ>
</Example>


</CDDefinition>

</CD>