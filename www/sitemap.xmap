<?xml version="1.0" encoding="UTF-8"?>
<map:sitemap xmlns:map="http://apache.org/cocoon/sitemap/1.0">
<!-- 
   This is the 'heart' of Cocoon. The sitemap maps URI space to 
   resources. It consists basicly of two parts: components and
   pipelines. Pipelines are made out of components. There is such a
   vast number of components available that it would be impossible to
   describe them here, please refer to the accompanying
   documentation. For specific components, have a look also at the
   javadocs for them. Most pipelines are present to demonstrate some
   feature or technique, often they are explained in more detail in 
   the accompanying documentation.
   
   There are some other, less important parts that deal with
   resources, views and action sets. For now, ignore them.
-->



<!-- =========================== Components ================================ -->

 <map:components>

<!--
  All pipelines consist at least of two components: a generator, that
  produces the content and a serialiser, that delivers the content to
  the client.

  More precisely: a generator generates SAX events and a serializer
  consumes these events and produces a character stream.

  Some things to note here: each generator has a unique name, this
  name is mapped to a java class, one name is declared as default
  generator. In addition each generator may have additional
  configurations as child elements.

  Additional attributes are targeted at the component manager. The optional
  "label" attribute is relevant for the view concept below. The optional
  "logger" attribute defines the logging category where messages produced
  by a component should go. If there's no "logger" attribute, the category
  used is the one defined for the "sitemap" component in cocoon.xconf.

  We have chosen in this example sitemap to use a different logging category
  for each component, which allows fine-grained classification of log
  messages. But you are free to use any category you want.

  It is possible to have the same java class declared as different
  generators by using different names. No configuration options are
  shared between these instances, however.

  All components follow this schema.

-->
  <map:generators default="file">
    <map:generator label="content,data" logger="sitemap.generator.file" name="file" pool-grow="4" pool-max="32" pool-min="8" src="org.apache.cocoon.generation.FileGenerator"/>

    <map:generator label="content,data" logger="sitemap.generator.serverpages" name="serverpages" pool-grow="2" pool-max="32" pool-min="4" src="org.apache.cocoon.generation.ServerPagesGenerator"/>
    
    <map:generator label="content,data" logger="sitemap.generator.directory" name="directory" pool-grow="2" pool-max="16" pool-min="2" src="org.apache.cocoon.generation.DirectoryGenerator"/>

    <map:generator label="data" logger="sitemap.generator.request" name="request" pool-grow="2" pool-max="16" pool-min="2" src="org.apache.cocoon.generation.RequestGenerator"/>

    <map:generator label="data" logger="sitemap.generator.status" name="status" pool-grow="2" pool-max="16" pool-min="2" src="org.apache.cocoon.generation.StatusGenerator"/>

   <map:generator label="content,data" logger="sitemap.generator.imagedirectory" name="imagedirectory" src="org.apache.cocoon.generation.ImageDirectoryGenerator"/>

   <map:generator label="data" logger="sitemap.generator.extractor" name="extractor" src="org.apache.cocoon.generation.FragmentExtractorGenerator"/>
  
    <map:generator label="content,data" name="script" src="org.apache.cocoon.generation.ScriptGenerator"/>

    <map:generator label="content,data" name="velocity" src="org.apache.cocoon.generation.VelocityGenerator"/>

<!--     <map:generator label="content,data" name="jsp" src="org.apache.cocoon.generation.JspGenerator"/> -->
    <map:generator label="content,data" name="stream" src="org.apache.cocoon.generation.StreamGenerator"/>

    <map:generator label="content,data" name="html" src="org.apache.cocoon.generation.HTMLGenerator"/>

</map:generators>

<!--
  Transformers can be placed inside the pipeline between the generator
  and the serializer. You may have as many transformers as you
  like. Transformers consume SAX events and emmit SAX events.

  The "xslt" transformer is an example of a component with additional
  configuration.
-->
  <map:transformers default="xslt">
    <map:transformer logger="sitemap.transformer.xslt" name="xslt" pool-grow="2" pool-max="32" pool-min="8" src="org.apache.cocoon.transformation.TraxTransformer">
      <use-request-parameters>false</use-request-parameters>
      <use-browser-capabilities-db>false</use-browser-capabilities-db>
      <use-deli>false</use-deli>
    </map:transformer>

    <map:transformer logger="sitemap.transformer.log" name="log" pool-grow="2" pool-max="16" pool-min="2" src="org.apache.cocoon.transformation.LogTransformer"/>

    <map:transformer logger="sitemap.transformer.xinclude" name="xinclude" pool-grow="2" pool-max="16" pool-min="2" src="org.apache.cocoon.transformation.XIncludeTransformer"/>

    <map:transformer logger="sitemap.transformer.cinclude" name="cinclude" pool-grow="2" pool-max="16" pool-min="2" src="org.apache.cocoon.transformation.CIncludeTransformer"/>

   <map:transformer logger="sitemap.transformer.sql" name="sql" src="org.apache.cocoon.transformation.SQLTransformer"/>

   <map:transformer logger="sitemap.transformer.extractor" name="extractor" src="org.apache.cocoon.transformation.FragmentExtractorTransformer"/>

   <map:transformer logger="sitemap.transformer.i18n" name="i18n" src="org.apache.cocoon.transformation.I18nTransformer">
    <catalogue-name>messages</catalogue-name>
    <catalogue-location>translations</catalogue-location>
   </map:transformer>

   <map:transformer logger="sitemap.transformer.filter" name="filter" src="org.apache.cocoon.transformation.FilterTransformer"/>

   <map:transformer logger="sitemap.transformer.writeDOMsession" name="writeDOMsession" src="org.apache.cocoon.transformation.WriteDOMSessionTransformer"/>

   <map:transformer logger="sitemap.transformer.readDOMsession" name="readDOMsession" src="org.apache.cocoon.transformation.ReadDOMSessionTransformer"/>
   <map:transformer logger="sitemap.transformer.encodeURL" name="encodeURL" src="org.apache.cocoon.transformation.EncodeURLTransformer"/>

  
<!--     <map:transformer name="xt" src="org.apache.cocoon.transformation.XTTransformer"/> -->

</map:transformers>

<!--
  Readers are an exception to the above rule that a pipline need to
  have exactly one generator and exactly one serializer. Readers
  circumvent the XML oriented SAX pipeline model, think of a reader
  being a generator and a serializer at once thus a pipeline may not
  contain any generator, transformer or serializer in addition to a
  reader. They are useful for delivering binary content like images.
-->
  <map:readers default="resource">
    <map:reader logger="sitemap.reader.resource" name="resource"
                pool-max="32" src="org.apache.cocoon.reading.ResourceReader"/>
  
    <map:reader name="jsp" src="org.apache.cocoon.reading.JSPReader"/>
</map:readers>

<!--
  Serializers consume SAX events and produce a character stream. Every
  pipeline needs to be terminated by a serializer.
-->
  <map:serializers default="html">
    <map:serializer logger="sitemap.serializer.links" name="links" src="org.apache.cocoon.serialization.LinkSerializer"/>

    <map:serializer logger="sitemap.serializer.xml" mime-type="application/xml" name="xml" src="org.apache.cocoon.serialization.XMLSerializer"/>

    <map:serializer logger="sitemap.serializer.html" mime-type="text/html" name="html" pool-grow="4" pool-max="32" pool-min="4" src="org.apache.cocoon.serialization.HTMLSerializer">
      <buffer-size>1024</buffer-size>
    </map:serializer>

   <map:serializer logger="sitemap.serializer.vrml" mime-type="model/vrml" name="vrml" src="org.apache.cocoon.serialization.TextSerializer"/>

   <map:serializer logger="sitemap.serializer.wml" mime-type="text/vnd.wap.wml" name="wml" src="org.apache.cocoon.serialization.XMLSerializer">
    <doctype-public>-//WAPFORUM//DTD WML 1.1//EN</doctype-public>
    <doctype-system>http://www.wapforum.org/DTD/wml_1.1.xml</doctype-system>
    <encoding>ASCII</encoding>
    <omit-xml-declaration>yes</omit-xml-declaration>
   </map:serializer>

   <map:serializer logger="sitemap.serializer.svgxml" mime-type="image/svg-xml" name="svgxml" src="org.apache.cocoon.serialization.XMLSerializer">
    <doctype-public>-//W3C//DTD SVG 20000303 Stylable//EN</doctype-public>
    <doctype-system>http://www.w3.org/TR/2000/03/WD-SVG-20000303/</doctype-system>
   </map:serializer>

   <map:serializer logger="sitemap.serializer.xhtml" mime-type="text/html" name="xhtml" pool-grow="2" pool-max="64" pool-min="2" src="org.apache.cocoon.serialization.XMLSerializer">
     <doctype-public>-//W3C//DTD XHTML 1.0 Strict//EN</doctype-public>
     <doctype-system>http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd</doctype-system>
     <encoding>UTF-8</encoding>
   </map:serializer>

   <map:serializer logger="sitemap.serializer.text" mime-type="text/text" name="text" src="org.apache.cocoon.serialization.TextSerializer"/>
  
    <map:serializer mime-type="image/jpeg" name="svg2jpeg" src="org.apache.cocoon.serialization.SVGSerializer"/>
    <map:serializer mime-type="image/png" name="svg2png" src="org.apache.cocoon.serialization.SVGSerializer"/>

    <map:serializer mime-type="application/pdf" name="fo2pdf" src="org.apache.cocoon.serialization.FOPSerializer"/>
    <map:serializer mime-type="application/postscript" name="fo2ps" src="org.apache.cocoon.serialization.FOPSerializer"/>
    <map:serializer mime-type="vnd.hp-PCL" name="fo2pcl" src="org.apache.cocoon.serialization.FOPSerializer"/>
</map:serializers>

<!--
  Matchers are executed during pipeline setup. They decide if a
  pipeline fragment is used within a pipeline. Usually, the decision
  is based on a match on the requested URI but matchers exist, that
  match different things as well. Most often the fragment contained in
  a matcher has a generator as well as a serializer. This is not a
  necessity, matchers can be nested while chaining does not work.
  Related concepts are selectors and actions. 

  Since this is important, let me repeat it: Matchers are executed
  during pipeline setup.
-->
  <map:matchers default="wildcard">
    <map:matcher logger="sitemap.matcher.wildcard" name="wildcard" src="org.apache.cocoon.matching.WildcardURIMatcher"/>

    <map:matcher logger="sitemap.matcher.regexp" name="regexp" src="org.apache.cocoon.matching.RegexpURIMatcher"/>
   <map:matcher logger="sitemap.matcher.request-parameter" name="request-parameter" src="org.apache.cocoon.matching.RequestParameterMatcher"/>

   <map:matcher logger="sitemap.matcher.cookie" name="cookie" src="org.apache.cocoon.matching.CookieMatcher"/>

   <map:matcher logger="sitemap.matcher.header" name="header" src="org.apache.cocoon.matching.HeaderMatcher"/>

   <map:matcher logger="sitemap.matcher.parameter" name="parameter" src="org.apache.cocoon.matching.ParameterMatcher"/>

   <map:matcher logger="sitemap.matcher.sessionstate" name="sessionstate" src="org.apache.cocoon.matching.WildcardSessionAttributeMatcher">
      <attribute-name>org.apache.cocoon.SessionState</attribute-name>
   </map:matcher>

   <map:matcher logger="sitemap.matcher.next-page" name="next-page" src="org.apache.cocoon.matching.WildcardRequestParameterMatcher">
      <parameter-name>next-state</parameter-name>
   </map:matcher>

   <map:matcher logger="sitemap.matcher.referer-match" name="referer-match" src="org.apache.cocoon.matching.WildcardHeaderMatcher">
      <header-name>referer</header-name>
   </map:matcher>
  </map:matchers>

<!--
  Selectors are executed during pipeline setup. They can be used to
  determine which pipeline fragments should be combined. They are best
  compared with a switch statement in java. Matchers and actions are
  related concepts.

  Since this is important, let me repeat it: Selectors are executed
  during pipeline setup.
-->
  <map:selectors default="browser">
   <map:selector logger="sitemap.selector.browser" name="browser" src="org.apache.cocoon.selection.BrowserSelector">
    <!-- # NOTE: The appearance indicates the search order. This is very important since
         #       some words may be found in more than one browser description. (MSIE is
         #       presented as "Mozilla/4.0 (Compatible; MSIE 4.01; ...")
    -->
    <browser name="explorer" useragent="MSIE"/>
    <browser name="pocketexplorer" useragent="MSPIE"/>
    <browser name="handweb" useragent="HandHTTP"/>
    <browser name="avantgo" useragent="AvantGo"/>
    <browser name="imode" useragent="DoCoMo"/>
    <browser name="opera" useragent="Opera"/>
    <browser name="lynx" useragent="Lynx"/>
    <browser name="java" useragent="Java"/>
    <browser name="wap" useragent="Nokia"/>
    <browser name="wap" useragent="UP"/>
    <browser name="wap" useragent="Wapalizer"/>
    <browser name="mozilla5" useragent="Mozilla/5"/>
    <browser name="netscape6" useragent="Netscape6/"/>
    <browser name="netscape" useragent="Mozilla"/>
   </map:selector>

   <map:selector logger="sitemap.selector.request-parameter" name="request-parameter" src="org.apache.cocoon.selection.RequestParameterSelector">
    <!-- Define now which request parameter to use; or do it later,
         when using this selector, via "parameter-name" parameter.
    <parameter-name>myparam</parameter-name> 
    -->
   </map:selector>

   <map:selector logger="sitemap.selector.request-attribute" name="request-attribute" src="org.apache.cocoon.selection.RequestAttributeSelector">
    <!-- <attribute-name>myparam</attribute-name> -->
   </map:selector>

   <map:selector logger="sitemap.selector.session-attribute" name="session-attribute" src="org.apache.cocoon.selection.SessionAttributeSelector">
    <!-- <attribute-name>myparam</attribute-name> -->
   </map:selector>

   <map:selector logger="sitemap.selector.parameter" name="parameter" src="org.apache.cocoon.selection.ParameterSelector"/>

   <map:selector logger="sitemap.selector.header" name="header" src="org.apache.cocoon.selection.HeaderSelector">
    <!-- <header-name>myparam</header-name> -->
   </map:selector>

   <map:selector logger="sitemap.selector.host" name="host" src="org.apache.cocoon.selection.HostSelector"/>
  </map:selectors>

<!--
  Actions are executed during pipeline setup. Their purpose is to
  execute some arbitrary complex code. They are the work horses of
  pipelines. Use them to update databases, check external resources
  etc. The execution may fail or complete successfully. Only if the
  execution was successful, the pipeline fragment contained inside is
  used within the pipeline. Related concepts are matchers and
  selectors.

  Since this is important, let me repeat it: Actions are executed
  during pipeline setup.
-->
  <map:actions>
<!--    <map:action logger="sitemap.action.lang-select" name="lang-select" src="org.apache.cocoon.acting.LangSelect"/> -->

   <map:action logger="sitemap.action.locale" name="locale" src="org.apache.cocoon.acting.LocaleAction"/>

   <map:action logger="sitemap.action.request" name="request" src="org.apache.cocoon.acting.RequestParamAction"/>

   <map:action logger="sitemap.action.form-validator" name="form-validator" src="org.apache.cocoon.acting.FormValidatorAction"/>

   <map:action logger="sitemap.action.session-state" name="session-state" src="org.apache.cocoon.acting.SessionStateAction"/>

   <map:action logger="sitemap.action.session-isvalid" name="session-isvalid" src="org.apache.cocoon.acting.SessionIsValidAction"/>

   <map:action logger="sitemap.action.resource-exists" name="resource-exists" src="org.apache.cocoon.acting.ResourceExistsAction"/>

   <map:action logger="sitemap.action.set-header" name="set-header" src="org.apache.cocoon.acting.HttpHeaderAction"/>

  

</map:actions>
 </map:components>

<!-- =========================== Views =================================== -->

<!--
  Views provide diffent, well, views to resources. Views are
  orthogonal to pipelines. Please refer to the docs.
-->
 <map:views>
  <map:view from-label="content" name="content">
   <map:serialize type="xml"/>
  </map:view>

  <map:view from-label="data" name="pretty-content">
    <map:transform src="stylesheets/simple-xml2html.xsl"/>
    <map:serialize type="html"/>
  </map:view>
  
  <map:view from-position="last" name="links">
   <map:serialize type="links"/>
  </map:view>

 </map:views>

<!-- =========================== Pipelines ================================= -->

<!--
  Pipelines. The beef. Pipelines specify, how the processing of your
  content is done. Usually, a pipeline consists of several fragments
  that specify the generation, transformation, and serialization of
  SAX events.

  Processing is done in two steps:

  1) The top level elements are executed in order of appearance until
     one signals success. These top level elements are usually
     matchers. AFAIK other components are not supported for this.

     Other components are called depth-first to determine what
     fragments make up the processing pipeline. When a component
     fails, no nested components are called but the next component on
     the same level.

  2) Once it is determined which generator, which transformers and
     wich serializer is used, these components are executed. During
     this, the pipeline may not be changed.


  You may have as many pipelines in your sitemap as you like. However,
  it seems that the only purposes would be to specify different error
  handlers.
-->

 <map:pipelines>

  <!-- OpenMath Stuff -->

  <map:pipeline>
    <map:match pattern="**.jpg">
      <map:read mime-type="image/jpeg" src="xml/{1}.jpg"/>
    </map:match>
  </map:pipeline>

  <map:pipeline>
    <map:match pattern="**.jpeg">
      <map:read mime-type="image/jpeg" src="xml/{1}.jpeg"/>
    </map:match>
  </map:pipeline>

  <map:pipeline>
    <map:match pattern="**.ps">
      <map:read mime-type="application/postscript" src="xml/{1}.ps"/>
    </map:match>
  </map:pipeline>

  <map:pipeline>
    <map:match pattern="**.js">
      <map:read mime-type="application/js" src="xml/{1}.js"/>
    </map:match>
  </map:pipeline>

  <map:pipeline>
    <map:match pattern="**.css">
      <map:read mime-type="text/css" src="xml/{1}.css"/>
    </map:match>
  </map:pipeline>

  <map:pipeline>
    <map:match pattern="**.tgz">
      <map:read type="resource" mime-type="application/octet-stream" src="xml/{1}.zip"/>
    </map:match>
  </map:pipeline>

  <map:pipeline>
    <map:match pattern="**.zip">
      <map:read type="resource" mime-type="application/octet-stream" src="xml/{1}.zip"/>
    </map:match>
  </map:pipeline>

  <map:pipeline>
    <map:match pattern="**.mml">
      <map:read type="resource" mime-type="application/xml" src="xml/{1}.mml"/>
    </map:match>
  </map:pipeline>

  <map:pipeline>
    <map:match pattern="**.dtd">
      <map:read type="resource" mime-type="text/plain" src="xml/{1}.dtd"/>
    </map:match>
  </map:pipeline>

  <map:pipeline>
    <map:match pattern="**.pdf">
      <map:read type="resource" mime-type="application/pdf" src="xml/{1}.pdf"/>
    </map:match>
  </map:pipeline>

  <map:pipeline>
    <map:match pattern="**.png">
      <map:read mime-type="image/png" src="xml/{1}.png"/>
    </map:match>
  </map:pipeline>

  <map:pipeline>
    <map:match pattern="**.gif">
      <map:read mime-type="image/gif" src="xml/{1}.gif"/>
    </map:match>
  </map:pipeline>

  <map:pipeline>
    <map:match pattern="projects/esprit/**.html">
      <map:read mime-type="text/html" src="xml/projects/esprit/{1}.html"/>
    </map:match>
  </map:pipeline>

  <map:pipeline>
    <map:match pattern="meetings/oldws/**.html">
      <map:read mime-type="text/html" src="xml/meetings/oldws/{1}.html"/>
    </map:match>
  </map:pipeline>

  <map:pipeline>
    <map:match pattern="**.htm">
      <map:read mime-type="text/html" src="xml/{1}.htm"/>
    </map:match>
  </map:pipeline>

  <map:pipeline>
   <map:match pattern="index.html">
    <map:generate src="xml/frontpage.xml" type="file"/>
    <map:transform src="stylesheets/html/om-page.xsl"/>
    <map:serialize type="html"/>
   </map:match>
  </map:pipeline>

  <map:pipeline>
   <map:match pattern="**/index.html">
    <map:generate src="xml/{1}/index.xml" type="file" />
    <map:transform src="stylesheets/html/om-page.xsl"/>
    <map:serialize type="html"/>
   </map:match>
  </map:pipeline>


  <map:pipeline>
   <map:match pattern="cdfiles/contrib/cd/*.html">
    <map:generate src="xml/cdfiles/contrib/cd/{1}.ocd" type="file"/>
    <map:transform src="xml/cdfiles/xsl/cd.xsl"/>
    <map:serialize type="html"/>
   </map:match>
  </map:pipeline>
 

  <map:pipeline>
   <map:match pattern="cdfiles/contrib/sts/*.html">
    <map:generate src="xml/cdfiles/contrib/sts/{1}.sts" type="file"/>
    <map:transform src="xml/cdfiles/contrib/xsl/sts.xsl"/>
    <map:serialize type="html"/>
   </map:match>

   <map:handle-errors>
    <map:transform src="xml/cdfiles/contrib/xsl/nosts.xsl"/>
    <map:serialize type="html"/>
   </map:handle-errors>
  </map:pipeline>

 
  <map:pipeline>
   <map:match pattern="cdfiles/contrib/sts/*.sts">
    <map:read mime-type="application/xml" src="contrib/sts/{1}.sts"/>
   </map:match>
  </map:pipeline>


  <map:pipeline>
   <map:match pattern="cdfiles/contrib/cd/*.omcd">
    <map:generate src="xml/cdfiles/contrib/cd/{1}.ocd" type="file"/>
    <map:transform src="xml/cdfiles/xsl/cd2om.xsl"/>
    <map:serialize type="xml"/>
   </map:match>
  </map:pipeline>


  <map:pipeline>
   <map:match pattern="sts/*.html">
    <map:generate src="xml/cdfiles2/sts/{1}.sts" type="file"/>
    <map:transform src="xml/cdfiles2/xsl/sts2html.xsl"/>
    <map:serialize type="html"/>
   </map:match>
  </map:pipeline>
 

  <map:pipeline>
   <map:match pattern="cd/*.omcd">
    <map:generate src="xml/cdfiles2/cd/{1}.ocd" type="file"/>
    <map:transform src="xml/cdfiles2/xsl/cd2om.xsl"/>
    <map:serialize type="xml"/>
   </map:match>
  </map:pipeline>
 
  <map:pipeline>
   <map:match pattern="sts/*.omsts">
    <map:generate src="xml/cdfiles/sts/{1}.sts" type="file"/>
    <map:transform src="xml/cdfiles/xsl/sts2om.xsl"/>
    <map:serialize type="xml"/>
   </map:match>
  </map:pipeline>
 


  <map:pipeline>
   <map:match pattern="cdfiles/cdgroups/*.html">
    <map:generate src="xml/cdfiles/cdgroups/{1}.cdg" type="file"/>
    <map:transform src="xml/cdfiles/xsl/cdgroup.xsl"/>
    <map:serialize type="html"/>
   </map:match>
  </map:pipeline>

  <map:pipeline>
   <map:match pattern="cdfiles/collections/cdindex.html">
    <map:generate src="xml/cdfiles/collections/cdindex.xml" type="file"/>
    <map:transform src="xml/cdfiles/xsl/index.xsl"/>
    <map:serialize type="html"/>
   </map:match>
   <map:match pattern="cdfiles/collections/*.html">
    <map:generate src="xml/cdfiles/collections/{1}.xml" type="file"/>
    <map:transform src="xml/cdfiles/xsl/collections.xsl"/>
    <map:serialize type="html"/>
   </map:match>
  </map:pipeline>

  <map:pipeline>
   <map:match pattern="cd/*.ocd">
    <map:read mime-type="application/xml" src="xml/cd/{1}.ocd"/>
   </map:match>
  </map:pipeline>

  <map:pipeline>
   <map:match pattern="sts/*.sts">
    <map:read mime-type="application/xml" src="xml/cdfiles2/sts/{1}.sts"/>
   </map:match>
  </map:pipeline>

  <map:pipeline>
   <map:match pattern="cd/*.html">
    <map:generate src="xml/cd/{1}.ocd" type="file"/>
    <map:transform src="xml/cdfiles2/xsl/cd.xsl"/>
    <map:serialize type="xml"/>
   </map:match>
  </map:pipeline>

  <map:pipeline>
   <map:match pattern="sts/*.html">
    <map:generate src="xml/cdfiles2/sts/{1}.sts" type="file"/>
    <map:transform src="xml/cdfiles2/xsl/sts.xsl"/>
    <map:serialize type="html"/>
   </map:match>
  </map:pipeline>
 

  <map:pipeline>
   <map:match pattern="cdfiles2/contributed.html">
    <map:generate src="xml/cdfiles2/contributed.xml" type="file"/>
    <map:transform src="xml/cdfiles2/xsl/collections.xsl"/>
    <map:serialize type="html"/>
   </map:match>
  </map:pipeline>

  <map:pipeline>
   <map:match pattern="cdfiles2/cdgroups/*.html">
    <map:generate src="xml/cdfiles2/cdgroups/{1}.cdg" type="file"/>
    <map:transform src="xml/cdfiles2/xsl/cdgroup.xsl"/>
    <map:serialize type="html"/>
   </map:match>
  </map:pipeline>

  <map:pipeline>
   <map:match pattern="cdfiles2/cd/*.html">
    <map:generate src="xml/cdfiles2/cd/{1}.ocd" type="file"/>
    <map:transform src="xml/cdfiles2/xsl/cd.xsl"/>
    <map:serialize type="xml"/>
   </map:match>
  </map:pipeline>


  <map:pipeline>
   <map:match pattern="cdfiles2/contrib/cd/*.html">
    <map:generate src="xml/cdfiles2/contrib/cd/{1}.ocd" type="file"/>
    <map:transform src="xml/cdfiles2/xsl/cd.xsl"/>
    <map:serialize type="xml"/>
   </map:match>
  </map:pipeline>

  <map:pipeline>
   <map:match pattern="cdfiles2/cdindex.html">
    <map:generate src="xml/cdfiles2/cdindex.xml" type="file"/>
    <map:transform src="xml/cdfiles2/xsl/index.xsl"/>
    <map:serialize type="html"/>
   </map:match>
  </map:pipeline>

  <map:pipeline>
   <map:match pattern="cdfiles2/cdnames.html">
    <map:generate src="xml/cdfiles2/cdindex.xml" type="file"/>
    <map:transform src="xml/cdfiles2/xsl/cdnames.xsl"/>
    <map:serialize type="html"/>
   </map:match>
  </map:pipeline>

  <map:pipeline>
   <map:match pattern="cdfiles2/cdnamess.html">
    <map:generate src="xml/cdfiles2/cdindex.xml" type="file"/>
    <map:transform src="xml/cdfiles2/xsl/cdnamess.xsl"/>
    <map:serialize type="html"/>
   </map:match>
  </map:pipeline>


  <map:pipeline>
   <map:match pattern="cdfiles2/sts/*.html">
    <map:generate src="xml/cdfiles2/sts/{1}.sts" type="file"/>
    <map:transform src="xml/cdfiles2/xsl/sts2html.xsl"/>
    <map:serialize type="html"/>
   </map:match>

   <map:handle-errors>
    <map:transform src="xml/cdfiles2/xsl/nosts.xsl"/>
    <map:serialize type="html"/>
   </map:handle-errors>
  </map:pipeline>

  <map:pipeline>
   <map:match pattern="cdfiles2/contrib/sts/*.html">
    <map:generate src="xml/cdfiles2/contrib/sts/{1}.sts" type="file"/>
    <map:transform src="xml/cdfiles2/xsl/sts2html.xsl"/>
    <map:serialize type="html"/>
   </map:match>

   <map:handle-errors>
    <map:transform src="xml/cdfiles2/xsl/nosts.xsl"/>
    <map:serialize type="html"/>
   </map:handle-errors>
  </map:pipeline>


  <map:pipeline>
   <map:match pattern="cdfiles2/cd/*.omcd">
    <map:generate src="xml/cdfiles2/cd/{1}.ocd" type="file"/>
    <map:transform src="xml/cdfiles2/xsl/cd2om.xsl"/>
    <map:serialize type="xml"/>
   </map:match>
  </map:pipeline>


  <map:pipeline>
   <map:match pattern="standard/cd/*.html">
    <map:generate src="xml/standard/cd/{1}.ocd" type="file"/>
    <map:transform src="xml/standard/omxsl/cd.xsl"/>
    <map:serialize type="xml"/>
   </map:match>
  </map:pipeline>


  <map:pipeline>
   <map:match pattern="standard/sts/*.html">
    <map:generate src="xml/standard/sts/{1}.sts" type="file"/>
    <map:transform src="xml/standard/omxsl/sts2html.xsl"/>
    <map:serialize type="html"/>
   </map:match>

   <map:handle-errors>
    <map:transform src="xml/cdfiles2/xsl/nosts.xsl"/>
    <map:serialize type="html"/>
   </map:handle-errors>
  </map:pipeline>

  <map:pipeline>
   <map:match pattern="standard/cdgroups/*.html">
    <map:generate src="xml/standard/cdgroups/{1}.cdg" type="file"/>
    <map:transform src="xml/standard/omxsl/cdgroup.xsl"/>
    <map:serialize type="html"/>
   </map:match>
  </map:pipeline>

  <map:pipeline>
   <map:match pattern="standard/xml/omstd.html">
    <map:generate src="xml/standard/xml/omstd.xml" type="file" />
    <map:transform src="xml/standard/xml/omstd.xsl"/>
    <map:serialize type="xml"/>
   </map:match>
  </map:pipeline>

  <map:pipeline>
   <map:match pattern="standard/om11/omstd11.html">
    <map:generate src="xml/standard/om11/omstd11.xml" type="file" />
    <map:transform src="xml/standard/om11/omstd11.xsl"/>
    <map:serialize type="xml"/>
   </map:match>
  </map:pipeline>

  <map:pipeline>
   <map:match pattern="**.html">
    <map:generate src="xml/{1}.xml" type="file" />
    <map:transform src="stylesheets/html/om-page.xsl"/>
    <map:serialize type="html"/>
   </map:match>

   <map:handle-errors>
    <map:transform src="../samples/common/style/xsl/html/error2html.xsl"/>
    <map:serialize status-code="500"/>
   </map:handle-errors>
  </map:pipeline>

  <map:pipeline>
   <map:match pattern="*.html">
    <map:generate src="xml/{1}.xml" type="file" />
    <map:transform src="stylesheets/html/om-page.xsl"/>
    <map:serialize type="html"/>
   </map:match>

   <map:handle-errors>
    <map:transform src="../samples/common/style/xsl/html/error2html.xsl"/>
    <map:serialize status-code="500"/>
   </map:handle-errors>
  </map:pipeline>

  <map:pipeline>
   <map:match pattern="*/">
    <map:generate src="xml/frontpage.xml" type="file"/>
    <map:transform src="stylesheets/html/om-page.xsl"/>
    <map:serialize type="html"/>
   </map:match>
  </map:pipeline>

  <map:pipeline>
   <map:match pattern="**/">
    <map:generate src="xml/{1}/index.xml" type="file"/>
    <map:transform src="stylesheets/html/om-page.xsl"/>
    <map:serialize type="html"/>
   </map:match>
  </map:pipeline>


  <map:pipeline>
    <map:match pattern="**">
      <map:read type="resource" mime-type="application/octet-stream" src="xml/{1}"/>
    </map:match>
  </map:pipeline>

 </map:pipelines>

</map:sitemap><!-- end of file -->
