<?xml version="1.0" encoding="utf-8"?>
<!-- $Id: linear_algebra.mcd,v 1.9 2007/06/27 04:02:08 mkohlhas2 Exp $ -->

<mcd id="linear_algebra">
  <title>Linear Algebra</title>
  <MMLdefinition id="cds_vector" cdrole="application" arity="nary" container="yes">
    <name>vector</name>
    <description>
      <p>A vector is an ordered n-tuple of values representing an element of an
      n-dimensional vector space.  The "values" are all from the same ring, typically real
      or complex.  Where orientation is important, such as for pre or post multiplication
      by a matrix a vector is treated as if it were a column vector and its transpose is
      treated a row vector.  The type attribute can be used to explicitly specify that a
      vector is a "row" vector.  See CRC Standard Mathematical Tables and Formulae,
      editor: Dan Zwillinger, CRC Press Inc., 1996, [2.4]</p>
    </description>

    <discussion>
      <p><el>vector</el> is the container element for a vector. The child elements form
      the components of the vector.</p>

      <p>For purposes of interaction with matrices and matrix multiplication, vectors are
      regarded as equivalent to a matrix consisting of a single column, and the transpose
      of a vector behaves the same as a matrix consisting of a single row. Note that
      vectors may be rendered either as a single column or row.</p>

      <p>In general a vector can be constructed by providing a function and a
      1-dimensional domain of application.  The entries of the vector correspond to the
      values obtained by evaluating the function at the points of the domain.  The
      qualifications defined by a <el>domainofapplication</el> element can also be
      abbreviated in several ways including a <el>condition</el> placed on a bound
      variable and an expression involving that variable.</p>

      <p>The <el>vector</el> element constructs vectors from an <var>n</var>-dimensional
      vector space so that its <var>n</var> child elements typically represent real or
      complex valued scalars as in the three-element vector

<eg role = "mathml"><![CDATA[<vector>
  <apply><plus/><ci>x</ci><ci>y</ci></apply>
  <cn>3</cn>
  <cn>7</cn>
</vector>]]></eg></p>

<p>A vector can also be constructed by evaluating a function over a specific domain
       of application, each evaluation corresponding to an entry in the vector.  In its
       most general form a domain is explicitly specified by a
       <el>domainofapplication</el> element and a function. Optionally the
       <el>domainofapplication</el> can be augmented by a <el>bvar</el> element and an
       algebraic expression expressed in terms of it.  Qualifications defined by a
       <el>domainofapplication</el> element can be abbreviated in several ways as
       described in <specref ref="contm_qualifiers"/>.</p>
	</discussion>
        <classification> constructor </classification>
        <MMLattribute>
          <attname> type </attname>
          <attvalue>  row | column | MathMLType </attvalue>
          <attdefault> column </attdefault>
        </MMLattribute>
	<rendering>
	  <graphic role="display" source="image/f4108.gif" alt="\left(\begin{array}{c} 1 \\ 2 \\ 3 \\ x \end{array} \right)"/>
	  <p>(1, 2, 3, 
	  <var>x</var>)</p>
	</rendering>
	<optype>ncontainer</optype>
        <signature>(real*) -> vector(type=real)</signature>
        <signature>[type=vectortype]((anything)*) -> vector(type=vectortype)</signature>
        <signature> (domainofapp,function) -> vector </signature>
        <signature> (bvar+,domainofapp,anything) -> vector </signature>
        <property>
	  <description><p>vector=column_vector</p></description>
        </property>
        <property>
          <description><p>matrix * vector = vector</p></description>
        </property>
        <property>
          <description><p>matrix * column_vector = column_ vector</p></description>
        </property>
        <property>
          <description><p>row_vector*matrix  = row_vector</p></description>
        </property>
        <property>
          <description><p>transpose(vector) = row_vector</p></description>
        </property>
        <property>
          <description><p>transpose(column_vector) = row_vector</p></description>
        </property>
        <property>
          <description><p>transpose(row_vector) = column_vector</p></description>
        </property>
        <property>
          <description><p>distributive over scalars</p></description>
        </property>
        <property>
          <description><p>associativity.</p></description>
        </property>
        <property>
          <description><p>Matrix * column vector</p></description>
	</property>
        <property>
          <description><p>row vector * Matrix</p></description></property>
        <MMLexample>
	  <![CDATA[<vector><cn>1</cn><cn>2</cn><cn>3</cn><ci>x</ci></vector>]]>
	</MMLexample>

        <MMLexample role="mathml-fragment">
	  <![CDATA[<vector type="row"><cn>1</cn><cn>2</cn><cn>3</cn><ci>x</ci></vector>]]>
	</MMLexample>
        <MMLexample role="mathml-fragment"><![CDATA[<vector>
  <bvar><ci type="integer">i</ci></bvar>
  <lowlimit><ci>1</ci></lowlimit>
  <uplimit><ci>10</ci></uplimit>
  <apply><power/>
    <ci>x</ci>
    <ci>i</ci>
  </apply>
</vector>]]></MMLexample>
      </MMLdefinition>
      
	  <MMLdefinition id="cds_matrix"  cdrole="application" arity="nary" container="yes">
        <name>matrix</name>
        <description>
          <p>This is the constructor for a matrix.  It requires matrixrow's as arguments.
          It is used to represent matrices.  See CRC Standard Mathematical Tables and
          Formulae, editor: Dan Zwillinger, CRC Press Inc., 1996, [2.5.1].</p>
        </description>
	<discussion>
	  <p>The <el>matrix</el> element is the container element for matrix rows, which
	  are represented by <el>matrixrow</el>. The <el>matrixrow</el>s contain the
	  elements of a matrix.</p>
	  
	  <p>In general a matrix can be constructed by providing a function and a
	  2-dimensional domain of application.  The entries of the matrix correspond to
	  the values obtained by evaluating the function at the points of the domain.  The
	  qualifications defined by a <el>domainofapplication</el> element can also be
	  abbreviated in several ways including a <el>condition</el> element placing
	  constraints directly on bound variables and an expression in those variables.</p>
	  <p>The <el>matrix</el> element is used to represent mathematical matrices. It
	  has zero or more child elements, all of which are <el>matrixrow</el>
	  elements. These in turn expect zero or more child elements that evaluate to
	  algebraic expressions or numbers. These sub-elements are often real numbers, or
	  symbols as in

<eg role = "mathml"><![CDATA[<matrix>
  <matrixrow> <cn> 1 </cn> <cn> 2 </cn> </matrixrow>
  <matrixrow> <cn> 3 </cn> <cn> 4 </cn> </matrixrow>
</matrix>]]></eg>

        The <el>matrixrow</el> elements must always be contained inside of a matrix, and
        all rows in a given matrix must have the same number of elements.</p>

	<p>Note that the behavior of the <el>matrix</el> and <el>matrixrow</el> elements
	is substantially different from the <el>mtable</el> and <el>mtr</el> presentation
	elements.</p>

	<p>A matrix can also be constructed by evaluating a bivariate function over a
	specific domain of application, each evaluation corresponding to an entry in the
	matrix.  In its most general form a domain of application is explicitly specified
	by a <el>domainofapplication</el> element and a function which when evaluated at
	points of the domain produces entries in the matrix. Optionally the
	<el>domainofapplication</el> can be augmented by <el>bvar</el> elements and an
	algebraic expression expressed in terms of them.</p>
	</discussion>
        <classification>constructor</classification>
        <MMLattribute>
          <attname>type</attname>
          <attvalue> real  |  complex  |  integer  |  symbolic  | integer |  MathMLType </attvalue>
          <attdefault> real </attdefault>
        </MMLattribute>
	<rendering>
	  <graphic role="display" source="image/f4109.gif" alt="A = \left(\begin{array}{ccc} 0 &amp; 1 &amp; 0 \\ 0 &amp; 0 &amp; 1 \\ 1 &amp; 0 &amp; 0 \end{array} \right)"/>
	</rendering>
	<optype>ncontainer</optype>
        <signature>(matrixrow*) -> matrix</signature>
        <signature>[type=matrixtype](matrixrow*) -> 
matrix(type=matrixtype)</signature>
        <signature> (domainofapp,function) -> matrix </signature>
        <signature> (bvar,bvar,domainofapp,anything) -> matrix </signature>
        <property>
          <description>
            <p>scalar multiplication</p>
          </description>
        </property>
        <property role="mathml-fragment" >
	  <description>
	    <p>scalar multiplication</p>
	  </description>
	  <![CDATA[Matrix*column vector]]>
	</property>
        <property role="mathml-fragment">
          <description>
            <p>scalar multiplication</p>
          </description>
	  <![CDATA[Addition]]>
	</property>
        <property role="mathml-fragment">
          <description>
            <p>scalar multiplication</p>
          </description>
	  <![CDATA[Matrix*Matrix]]>
	</property>

        <MMLexample>
	  <![CDATA[<matrix>
  <matrixrow><cn>0</cn> <cn> 1 </cn> <cn> 0 </cn></matrixrow>
  <matrixrow><cn>0</cn> <cn> 0 </cn> <cn> 1 </cn></matrixrow>
  <matrixrow><cn>1</cn> <cn> 0 </cn> <cn> 0 </cn></matrixrow>
</matrix>]]></MMLexample>
        <MMLexample role="mathml-fragment"><![CDATA[<matrix>
  <bvar><ci type="integer">i</ci></bvar>
  <bvar><ci type="integer">j</ci></bvar>
  <condition>
    <apply><and/>
      <apply><in/>
        <ci>i</ci>
        <interval><ci>1</ci><ci>5</ci></interval>
      </apply>
      <apply><in/>
        <ci>j</ci>
        <interval><ci>5</ci><ci>9</ci></interval>
      </apply>
    </apply>
  </condition>
  <apply><power/>
    <ci>i</ci>
    <ci>j</ci>
  </apply>
</vector>]]></MMLexample>
      </MMLdefinition>

      <MMLdefinition id="cds_matrixrow" cdrole="application" arity="nary" container="yes">
        <name>matrixrow</name>
        <description>
	  <p>This symbol is an n-ary constructor used to represent rows of matrices.  Its
	  arguments should be members of a ring. </p>
	</description>
	<discussion>
	  <p>The <el>matrixrow</el> element is the <emph>container</emph> element
	  for the rows of a matrix.</p>
	</discussion>
	<classification>constructor</classification>
	<rendering>
	  <p>Matrix rows are not directly rendered by themselves outside of the
	  context of a matrix.</p>
	</rendering>
	<signature>(ringelement+) -> matrixrow</signature>
        <MMLexample>
	  <![CDATA[<matrixrow><cn>1</cn><cn>2</cn></matrixrow>]]>
	</MMLexample>
      </MMLdefinition>
      
	  <MMLdefinition id="cds_determinant" cdrole="application" arity="1">
        <name>determinant</name>
        <description>
          <p>The "determinant" of a matrix.  This is a unary function.  See CRC Standard
          Mathematical Tables and Formulae, editor: Dan Zwillinger, CRC Press Inc., 1996,
          [2.5.4].</p>
        </description>
	<discussion>
	  <p>The <el>determinant</el> element is the operator for constructing the
	  determinant of a matrix.</p>
	</discussion>
        <classification>function</classification>
	<rendering>
	  <graphic role="display" source="image/f4110.gif" alt="\det A"/>
	</rendering>
	<optype>unary function</optype>
	<signature>(matrix)-> scalar</signature>

        <MMLexample>
	  <![CDATA[<apply><determinant/>
  <ci type="matrix"> A </ci>
</apply>]]></MMLexample>
      </MMLdefinition>
      
      <MMLdefinition id="cds_transpose"  cdrole="application" arity="1">
        <name>transpose</name>
        <description>
          <p>The transpose of a matrix or vector.  See CRC Standard Mathematical Tables
          and Formulae, editor: Dan Zwillinger, CRC Press Inc., 1996, [2.4] and
          [2.5.1].</p>
        </description>
	<discussion>
	  <p>The <el>transpose</el> element is the operator for constructing the transpose
	  of a matrix.</p>
	</discussion>
        <classification>function</classification>
	<rendering>
	  <graphic role="display" source="image/f4111.gif" alt="A^{\mathrm{T}}"/>
	</rendering>
	<optype>unary function</optype>
        <signature>(vector)->vector(type=row)</signature>
        <signature>(matrix)->matrix</signature>
        <signature>(vector[type=row])->vector</signature>
        <property>
          <description>
            <p>transpose(transpose(A))= A</p>
          </description>
        </property>
        <property>
          <description>
            <p>transpose(transpose(V))= V</p>
          </description>
        </property>
        <MMLexample>
	  <![CDATA[<apply><transpose/><ci type="matrix">A</ci></apply>]]>
	</MMLexample>
	  
	<MMLexample><![CDATA[<apply><transpose/><ci type="vector">V</ci></apply>]]></MMLexample>
      </MMLdefinition>

      <MMLdefinition id="cds_selector" cdrole="application" arity="2">
        <name>selector</name>
        <description>
          <p>The operator used to extract sub-objects from vectors, matrices matrix rows
          and lists.  Elements are accessed by providing one index element for each
          dimension.  For matrices, sub-matrices are selected by providing one fewer index
          items.  For a matrix A and a column vector V : select(i, j, A) is the i,j th
          element of A.  select(i, A) is the matrixrow formed from the i'th row of A.
          select(i, V) is the i'th element of V.  select(V) is the sequence of all
          elements of V.  select(A) is the sequence of all elements of A, extracted row by
          row.  select(i, L) is the i'th element of a list.  select(L) is the sequence of
          elements of a list.</p>
        </description>
	<discussion>
	  <p>The <el>selector</el> element is the operator for indexing into vectors
	  matrices and lists. It accepts one or more arguments. The first argument
	  identifies the vector, matrix or list from which the selection is taking place,
	  and the second and subsequent arguments, if any, indicate the kind of selection
	  taking place.</p>

	  <p>When <el>selector</el> is used with a single argument, it should be
	  interpreted as giving the sequence of all elements in the list, vector or matrix
	  given. The ordering of elements in the sequence for a matrix is understood to be
	  first by column, then by row. That is, for a matrix (
	  <var>a</var><sub><var>i</var>,<var>j</var></sub>), where the indices denote row
	  and column, the ordering would be <var>a</var> <sub>1,1</sub>, <var>a</var>
	  <sub>1,2</sub>, ...  <var>a</var> <sub>2,1</sub>, <var>a</var><sub>2,2</sub>
	  ... etc.</p>

	  <p>When three arguments are given, the last one is ignored for a list or vector,
	  and in the case of a matrix, the second and third arguments specify the row and
	  column of the selected element.</p>

	  <p>When two arguments are given, and the first is a vector or list, the second
	  argument specifies an element in the list or vector. When a matrix and only one
	  index <var>i</var> is specified as in</p>
	  <MMLexample><![CDATA[<apply>
  <selector/>
  <matrix>
    <matrixrow><cn>1</cn><cn>2</cn></matrixrow>
    <matrixrow><cn>3</cn><cn>4</cn></matrixrow>
  </matrix>
  <cn>1</cn>
</apply>]]></MMLexample> 
	  <p>it refers to the <var>i</var>-th matrixrow. Thus, the preceding example
	  selects the following row:</p>
	  <MMLexample><![CDATA[<matrixrow> <cn> 1 </cn> <cn> 2 </cn> </matrixrow>]]></MMLexample>
	  <p>
	    <el>selector</el> is classified as an n-ary linear algebra operator even
	  though it can take only one, two, or three arguments.</p>
	</discussion>
	<classification>function</classification>
	<rendering>
	  <p>The <el>selector</el> construct renders in a manner that indicates which
	  sub-element of the parent object is selected.  For vectors and matrices this is
	  normally done by specifying the parent object together with subscripted indices.
	  For example, the selection</p>
	  <MMLexample><![CDATA[<apply>
  <selector/>
  <ci type="vector">V</ci>
  <cn> 1 </cn>
</apply>]]></MMLexample> 
	  <p>would have a default rendering of
	  <graphic role="display" source="image/selector.gif" alt="V_1"/>
	  </p>
	  <p>Selecting the (1,2) element of a 2 by 2 matrix would have a default rendering as
	  <graphic role="display" source="image/selector2.gif" 
		   alt="{\left[\begin{array}{cc}1&amp;2\\3&amp;4\end{array}\right]}_{1,2}"/>
	  </p>
	</rendering>
	<signature>(matrix,scalar,scalar)->scalar</signature>
	<signature>(matrix,scalar)->matrixrow</signature>
	<signature>(matrix)->scalar* </signature>
        <signature>((vector|list|matrixrow),scalar )->scalar</signature>
        <signature>(vector|list|matrixrow)->scalar*</signature>
        <property>
          <description>
            <p>For all vectors V, V = vector(selector(V))</p>
          </description>
        </property>
        <property>
          <description>
            <p>For all matrix rows Mrow, Mrow = matrixrow(selector(Mrow))</p>
          </description>
        </property>
        <MMLexample>&lt;apply&gt;<![CDATA[<selector/><ci type="matrix">M</ci><cn>3</cn><cn>2</cn>]]>&lt;/apply&gt;</MMLexample>
      </MMLdefinition>
      
      <MMLdefinition id="cds_vectorproduct"  cdrole="application" arity="2">
        <name>vectorproduct</name>
        <description>
          <p>The vector or cross product of two nonzero three-dimensional vectors
v1 and v2 is defined by</p>
          <p>v1 x v2  =  n  norm(v1) * norm(v2) sin(theta)
where n is the unit normal vector perpendicular to both, adhering to
the right hand rule.
CRC Standard Mathematical Tables and Formulae, 
editor: Dan Zwillinger, CRC Press Inc., 1996, [2.4]
</p>
        </description>
	<discussion>
	  <p>The <el>vectorproduct</el> is the operator element for
	  deriving the vector product of two vectors.</p>
	</discussion>
        <classification>function</classification>
	<rendering>
	  <graphic role="display" source="image/f4113.gif"
		   alt="A \times B = a b \sin\theta N"/>
	</rendering>
	<optype>binary vector operator</optype>
	<signature>(vector,vector)->vector</signature>
        <property>
          <description>
            <p>if v1 and v2 are parallel then their vector product is 0</p>
          </description>
        </property>
        <MMLexample><![CDATA[<apply><vectorproduct/><ci>u</ci><ci>v</ci></apply>]]></MMLexample>
		<MMLexample>
		<description><p>where <var>A</var> and <var>B</var> are vectors, <var>N</var> is a unit vector orthogonal to <var>A</var> and <var>B</var>, <var>a</var>, <var>b</var> are the magnitudes of
A, B and <graphic role="inline" source="image/f4112.gif" alt="\theta"/>is the angle between A and B.</p>
        </description>
		<![CDATA[
		<apply>
		  <eq/>
		  <apply><vectorproduct/>
		    <ci type="vector"> A </ci>
		    <ci type="vector"> B </ci>
		  </apply>
		  <apply><times/>
		    <ci> a </ci>
		    <ci> b </ci>
		    <apply><sin/>
		      <ci> &theta; </ci>
		    </apply>
		    <ci type="vector"> N </ci>
		  </apply>
		</apply>
		]]></MMLexample>
      </MMLdefinition>
      
	  <MMLdefinition id="cds_scalarproduct"  cdrole="application" arity="nary">
        <name>scalarproduct</name>
        <description>
          <p>This symbol represents the scalar product function. It takes two vector
          arguments and returns a scalar value. The scalar product of two vectors a, b is
          defined as |a| * |b| * cos(\theta), where \theta is the angle between the two
          vectors and |.| is a euclidean size function. Note that the scalar product is
          often referred to as the dot product. </p>
	</description>
	<discussion>
	  <p>The <el>scalarproduct</el> is the operator element for deriving the scalar
	  product of two vectors.</p>
	</discussion>
        <classification>function</classification>
	<rendering>
	  <graphic role="display" source="image/f4114.gif" alt="A.B = ab\cos\theta"/>
	</rendering>
	<optype>binary vector operator</optype>
        <signature>(vector,vector) -> scalar</signature>
        <property>
          <description>
            <p>if the scalar product of two vectors is 0 then they are orthogonal.</p>
          </description>
        </property>
        <MMLexample><![CDATA[<apply><scalarproduct/><ci>u</ci><ci>v</ci></apply>]]></MMLexample>
		<MMLexample>
		<description>
        <p>where A and B are vectors, <var>a</var>, <var>b</var> are the magnitudes of A, B and <graphic role="inline" source="image/f4112.gif" alt="\theta"/>is the angle between A and B.</p>
        </description>
	<![CDATA[<apply>
  <eq/>
  <apply><scalarproduct/>
    <ci type="vector"> A </ci>
    <ci type="vector">B </ci>
  </apply>
  <apply><times/>
    <ci> a </ci>
    <ci> b </ci>
    <apply><cos/>
      <ci> &theta; </ci>
    </apply>
  </apply>
</apply>]]></MMLexample>
      </MMLdefinition>
	  
      <MMLdefinition id="cds_outerproduct" cdrole="application" arity="2">
        <name>outerproduct</name>
        <description>
          <p>This symbol represents the outer product function. It takes two vector
          arguments and returns a matrix. It is defined as follows: if we write the
          {i,j}'th element of the matrix to be returned as m_{i,j}, then: m_{i,j}=a_i *
          b_j where a_i,b_j are the i'th and j'th elements of a, b respectively. </p>
        </description>
	<discussion>
	  <p>The <el>outerproduct</el> is the operator element for deriving the outer
	  product of two vectors.</p>
	</discussion>
        <classification>function</classification>
	<rendering>
	  <p>
	    <graphic role="inline" source="image/tensor.gif" alt="A \otimes B"/>
	    or
	    <graphic role="inline" source="image/wedge.gif" alt="A \wedge B"/>
	  </p>
	</rendering>
	<optype>binary vector operator</optype>
        <signature>(vector,vector) -> matrix</signature>
        <MMLexample><![CDATA[<apply><outerproduct/><ci>u</ci><ci>v</ci></apply>]]></MMLexample>
	<MMLexample>
	  <description><p>where A and B are vectors.</p></description>
	  <![CDATA[<apply>
  <outerproduct/>
  <ci type="vector">A</ci>
  <ci type="vector">B</ci>
</apply>]]></MMLexample>
      </MMLdefinition>
    </mcd>
