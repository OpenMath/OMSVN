<?xml version="1.0" encoding="UTF-8"?>
<!--
      This is the Mathematical Markup Language (MathML) 3.0, an XML
      application for describing mathematical notation and capturing
      both its structure and content.
  
      Copyright 1998-2007 World Wide Web Consortium
         (Massachusetts Institute of Technology, Institut National de
          Recherche en Informatique et en Automatique, Keio University).
          All Rights Reserved.
  
      Permission to use, copy, modify and distribute the RelaxNG schema for MathML3
      and its accompanying documentation for any purpose and without fee is
      hereby granted in perpetuity, provided that the above copyright notice
      and this paragraph appear in all copies.  The copyright holders make
      no representation about the suitability of the Schema for any purpose.
  
      This file contains the grammar rules for pragmatic content MathML3
      It is provided "as is" without expressed or implied warranty.
  
      Revision:   $Id: mathml3-pragmatic.rnc 727 2008-03-27 13:00:05Z kohlhase $
      Author: Michael Kohlhase http://kwarc.info/kohlhase
  
      This is the RelaxNG schema module for the pragmatic content part of 
      MathML (but without the presentation in token elements).
-->
<grammar xmlns:m="http://www.w3.org/1998/Math/MathML" xmlns:a="http://relaxng.org/ns/compatibility/annotations/1.0" ns="http://www.w3.org/1998/Math/MathML" xmlns="http://relaxng.org/ns/structure/1.0">
  <include href="mathml3-strict.rng"/>
  <define name="sep">
    <a:documentation>the content of "cn" may have &lt;sep&gt; elements in it</a:documentation>
    <element name="sep">
      <empty/>
    </element>
  </define>
  <define name="cn.content" combine="choice">
    <ref name="sep"/>
  </define>
  <define name="cn.type.vals" combine="choice">
    <value>constant</value>
  </define>
  <!-- allow degree in bvar -->
  <define name="degree">
    <element name="degree">
      <ref name="MathML.Common.attrib"/>
      <oneOrMore>
        <ref name="ContExp"/>
      </oneOrMore>
    </element>
  </define>
  <define name="bvar-head" combine="choice">
    <choice>
      <group>
        <optional>
          <ref name="degree"/>
        </optional>
        <ref name="ci"/>
      </group>
      <group>
        <ref name="ci"/>
        <optional>
          <ref name="degree"/>
        </optional>
      </group>
    </choice>
  </define>
  <!-- allow degree to modify <root/> -->
  <define name="apply.content" combine="choice">
    <ref name="root_arith1_elt"/>
    <ref name="degree"/>
    <zeroOrMore>
      <ref name="ContExp"/>
    </zeroOrMore>
  </define>
  <define name="domainofapplication">
    <element name="domainofapplication">
      <ref name="Definition.attrib"/>
      <ref name="MathML.Common.attrib"/>
      <optional>
        <ref name="cdbase.attrib"/>
      </optional>
      <ref name="ContExp"/>
    </element>
  </define>
  <define name="lowlimit">
    <element name="lowlimit">
      <ref name="Definition.attrib"/>
      <ref name="MathML.Common.attrib"/>
      <optional>
        <ref name="cdbase.attrib"/>
      </optional>
      <oneOrMore>
        <ref name="ContExp"/>
      </oneOrMore>
    </element>
  </define>
  <define name="uplimit">
    <element name="uplimit">
      <ref name="Definition.attrib"/>
      <ref name="MathML.Common.attrib"/>
      <optional>
        <ref name="cdbase.attrib"/>
      </optional>
      <oneOrMore>
        <ref name="ContExp"/>
      </oneOrMore>
    </element>
  </define>
  <define name="qualifier" combine="choice">
    <a:documentation>allow the non-strict qualifiers</a:documentation>
    <choice>
      <ref name="domainofapplication"/>
      <group>
        <ref name="uplimit"/>
        <optional>
          <ref name="lowlimit"/>
        </optional>
      </group>
      <group>
        <ref name="lowlimit"/>
        <optional>
          <ref name="uplimit"/>
        </optional>
      </group>
      <ref name="degree"/>
    </choice>
  </define>
  <define name="opel.constant">
    <a:documentation>we collect the operator elements by role</a:documentation>
    <notAllowed/>
  </define>
  <define name="opel.binder">
    <notAllowed/>
  </define>
  <define name="opel.application">
    <notAllowed/>
  </define>
  <define name="opel.semantic-attribution">
    <notAllowed/>
  </define>
  <define name="opel.attribution">
    <notAllowed/>
  </define>
  <define name="opel.error">
    <notAllowed/>
  </define>
  <define name="opels">
    <choice>
      <ref name="opel.constant"/>
      <ref name="opel.binder"/>
      <ref name="opel.application"/>
      <ref name="opel.semantic-attribution"/>
      <ref name="opel.attribution"/>
      <ref name="opel.error"/>
    </choice>
  </define>
  <define name="container">
    <notAllowed/>
  </define>
  <define name="MathMLType" combine="choice">
    <a:documentation>the values of the MathML type attributes;  </a:documentation>
    <choice>
      <value>real</value>
      <value>complex</value>
      <value>function</value>
      <value>algebraic</value>
      <value>integer</value>
    </choice>
  </define>
  <include href="mathml3-cds-pragmatic.rng">
    <a:documentation>include the relevant content dictionaries</a:documentation>
  </include>
  <define name="apply-binder-head">
    <a:documentation>we instantiate the strict content model by structure checking</a:documentation>
    <choice>
      <ref name="semantics-apply-binder"/>
      <ref name="opel.binder"/>
    </choice>
  </define>
  <define name="apply.content" combine="choice">
    <ref name="apply-binder-head"/>
    <oneOrMore>
      <ref name="bvar"/>
    </oneOrMore>
    <optional>
      <ref name="qualifier"/>
    </optional>
    <ref name="ContExp"/>
  </define>
  <define name="semantics-apply-binder">
    <element name="semantics">
      <ref name="semantics.attribs"/>
      <ref name="apply-binder-head"/>
      <zeroOrMore>
        <ref name="semantics-annotation"/>
      </zeroOrMore>
    </element>
  </define>
  <define name="apply-head" combine="choice">
    <ref name="opel.application"/>
  </define>
  <define name="bind-head" combine="choice">
    <ref name="opel.binder"/>
  </define>
  <define name="cerror-head" combine="choice">
    <ref name="opel.error"/>
  </define>
  <define name="ContExp" combine="choice">
    <a:documentation>allow all functions, constants, and containers to be content expressions on their own</a:documentation>
    <choice>
      <ref name="opel.constant"/>
      <ref name="opel.application"/>
      <ref name="container"/>
    </choice>
  </define>
</grammar>
