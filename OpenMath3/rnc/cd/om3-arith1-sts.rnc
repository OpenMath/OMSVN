#     This file contains the type checking rules for the symbols
#     from the STS types for the content dictionary 
#     It is provided "as is" without expressed or implied warranty.
#
#     Revision:   $Id$
#    $HeadURL$ 


namespace om = "http://www.openmath.org/OpenMath"





     This document is distributed in the hope that it will be useful, 
     but WITHOUT ANY WARRANTY; without even the implied warranty of 
     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

     The copyright holder grants you permission to redistribute this 
     document freely as a verbatim copy. Furthermore, the copyright
     holder permits you to develop any derived work from this document
     provided that the following conditions are met.
       a) The derived work acknowledges the fact that it is derived from
          this document, and maintains a prominent reference in the 
          work to the original source.
       b) The fact that the derived work is not the original OpenMath 
          document is stated prominently in the derived work.  Moreover if
          both this document and the derived work are Content Dictionaries
          then the derived work must include a different CDName element,
          chosen so that it cannot be confused with any works adopted by
          the OpenMath Society.  In particular, if there is a Content 
          Dictionary Group whose name is, for example, `math' containing
          Content Dictionaries named `math1', `math2' etc., then you should 
          not name a derived Content Dictionary `mathN' where N is an integer.
          However you are free to name it `private_mathN' or some such.  This
          is because the names `mathN' may be used by the OpenMath Society
          for future extensions.
       c) The derived work is distributed under terms that allow the
          compilation of derived works, but keep paragraphs a) and b)
          intact.  The simplest way to do this is to distribute the derived
          work under the OpenMath license, but this is not a requirement.
     If you have questions about this license please contact the OpenMath
     society at http://www.openmath.org.


arith1
http://www.openmath.org/cd
http://www.openmath.org/cd/arith1.ocd
2006-03-30
official
2004-03-30
3
0

 
This CD defines symbols for common arithmetic functions.



lcm

  lcm
    
      type
      Real
      "real"
    
  
  application
  Least Common Multiple
  
    This n-ary operator is used to construct an expression which represents the
    least common multiple of its arguments.  If no argument is provided, the lcm is
    1.  If one argument is provided, the lcm is that argument.  The least common
    multiple of x and 1 is x.
  


 lcm(a,b) = a*b/gcd(a,b) 



  
    
    
      
      
      
    
    
      
      
        
	
	
      
      
        
        
        
      
    
  





  
    for all integers a,b |
    There does not exist a c>0 such that c/a is an Integer and c/b is an
    Integer and lcm(a,b) > c.
  

  
    

  
  
    
    
  
  
    
    
      
      
        
	
	
      
      
        
	
	
      
    
    
      
      
        
        
          
        
        
          
          
            
              
              0
          
          
            
              
              
          
          
            
              
              
          
          
            
            
            
              
              
              
            
          
        
      
    
  






  ForAll(x,lcm(x,1)=x)
  
    
      
	
	x
	
	  
	  x1
	x
       
    
    
  



  
    1217
  



  
    357




  
    If the following expression were evaluated at a= 2, b=4, c=6 it would yield 12.
  
  
    abc
  




  big_lcm
  
    big_lcm
    
      type
      Real
      "real"
    
  

  binder
  Least Common Multiple over a Set of expressions
  
    This n-ary operator is used to construct the least common multiple over a set of
    expressions.
  



gcd
  
    gcd
    
      type
      Real
      "real"
    
  
  application
  
    This is the n-ary operator used to construct an expression which represents
    the greatest common divisor of its arguments.  If no argument is provided, the
    gcd is 0.  If one argument is provided, the gcd is that argument.
  



for all integers a,b |
There does not exist a c such that a/c is an Integer and b/c is an
Integer and c > gcd(a,b).

Note that this implies that gcd(a,b) > 0





  
  
    
    
  
  
    
    
      
      
        
	
	
      
      
        
	
	
      
    
    
      
      
        
        
          
        
        
          
          
            
            
              
              
              
            
            
          
          
            
            
              
              
              
            
            
          
          
            
            
            
              
              
              
            
          
        
      
    
  






gcd(6,9) = 3

  
    
    
      
       6 
       9 
    
     3 
  





  big_gcd
  
    big_gcd
    
      type
      Real
      "real"
    
  

  binder
  Greatest Common Divisor over a Set of expressions
  
    This n-ary operator is used to construct the greatest common divisor over a set of
    expressions.
  





plus
  
    plus
  
application

 	The symbol representing an n-ary commutative function plus.




          This is the n-ary addition operator of an algebraic structure.  Ordinarily,
          the operands are provided explicitly.  As an n-ary operation the operands can
          also be generated by allowing a function or expression vary over a domain of
          application though the sum element is normally used for that purpose.  If no
          operands are provided, the expression represents the additive identity.  If one
          operand, a, is provided the expression evaluates to "a".  If two or more
          operands are provided, the expression represents the (semi) group element
          corresponding to a left associative binary pairing of the operands.  The meaning
          of mixed operand types not covered by the signatures shown here are left up to
          the target system.
	  
	  
          To use different type coercion rules different from those indicated by the
          signatures, use the definitionURL attribute to identify a new definition.
        
      
          
            an sum of no terms is 0
          
	  

  
  0
 

        
          
            a sum of one term is equal to itself
          

  a
  
    a
    a
   


        
          
            Commutativity
          

  a
  b
  
    
      a
      b
    
  
  
    ab
    ba
  

        
  3

        
  3
  5

       
	   If this were evaluated at x = 5, y = 2 and z = 1 it would yield 8.
	   
			
			  
			  x
			  y
			  z
			
			



 for all a,b | a + b = b + a 


  
    
    
       
       
    
    
      
      
        
        
        
      
      
        
        
        
      
    
  





unary_minus
  
    unary_minus
  
application

 	This symbol denotes unary minus, i.e. the additive inverse.



  
          This is the  inversion operator for an additive group. It constructs the additive inverse of
          that group element.
        

         3



 for all a | a + (-a) = 0 


  
    
    
       
    
    
      
      
        
        
        
           
           
        
      
      
    
  





minus
  
    minus
  
application
 
The symbol representing a binary minus function. This is equivalent to
adding the additive inverse.




          This is the subtraction operator for an additive group. 
        
	
	  The minus element is the subtraction operator.
	


  
    ForAll( x, x-x=0 )
    
    

  x
  
    xx
    0
  




  If this were evaluated at x=5 and 
  y=2 it would yield 3.
  
 
  x
  y







 for all a,b | a - b = a + (-b) 


  
    
    
       
       
    
    
      
      
        
        
        
      
      
        
        
        
          
          
        
      
    
  





times
  
    times
  
application
 
The symbol representing an n-ary multiplication function.




   This is the n-ary multiplication operator of a ring.
  Ordinarily, the operands are provided explicitly.  As an n-ary operation
  the operands can also be generated by allowing a function or expression
  vary over a domain of application though the product element is normally used
  for that purpose.
  If no arguments are supplied then this represents the
  multiplicative identity.  If one argument is supplied, this
  represents an expression that would evaluate to
  that single argument.


  
    ForAll( [a,b], condition(in({a,b}, Commutative)), a*b=b*a )
  


  
    ForAll( [a,b,c], Associative, a*(b*c)=(a*b)*c ), associativity 
  


  
    multiplicative identity
    

  a
  
    1a
    a
   


        
          
             a*0=0 
          
        
        
          
            Commutative property
          


  a
  b
  
    
      a
      b
    
  
  
    ab
    ba
  

        
	  
	    a*0=0
	    
	    
  a
  
    0a
    0
   

	

	
	  If this were evaluated at 
	  a = 5.5 and b = 3 it would yield 16.5.
	  ab
	






  
  
    
    
      
      
        
         1 
         2 
      
      
        
         3 
         4 
      
    
    
      
      
        
         5 
         6 
      
      
        
         7 
         8 
      
    
  
  
    
    
      
       19 
       22 
    
    
      
       43 
       50 
    
  





 for all a,b | a * 0 = 0 and a * b = a * (b - 1) + a 



  
  
    
    
  
  
    
    
      
      
        
        
        
      
      
    
    
      
      
        
	
	
      
      
        
	
	  
	  
	  
	    
	    
	    
	  
	
	
      
    
  




 for all a,b,c | a*(b+c) = a*b + a*c 


  
  
    
    
    
  
  
    
    
      
      
      
        
	
	
      
    
    
      
      
        
	
	
      
      
        
	
	
      
    
  





divide
  
    divide
  
application

This symbol represents a (binary) division function denoting the first argument
right-divided by the second, i.e. divide(a,b)=a*inverse(b). It is the
inverse of the multiplication function defined by the symbol times in this CD.



  
    This is the binary MathML operator that is used indicate the mathematical
    operation a "divided by" b.
  
  
  
    
      Division by Zero error
      


      a
      
    a0
    
  


        
          
            ForAll( a, a!= 0, a/a = 1 )
          

  a
  a0
  
    aa
    1
  



	  
	    
	      As a MathML expression, this does not evaluate. However, on receiving
	      such an expression, some applications may attempt to evaluate and simplify
	      the value. For example, when a=5 and b=2 some
	      mathematical applications may evaluate this to 2.5 while others will treat
	      is as a rational number.
	    

  a
  b





 whenever not(a=0) then a/a = 1 


  
    
    
       
    
    
      
      
        
        
        
      
      
        
        
          
          
          
        
        
      
    
  





power
  
    power
  
application


This symbol represents a power function. The first argument is raised
to the power of the second argument. When the second argument is not
an integer, powering is defined in terms of exponentials and 
logarithms for the complex and real numbers.
This operator can represent general powering.



 
          This is the binary powering operator that is used to construct expressions
          such as a "to the power of" b.  In particular, it is the operation for which a
          "to the power of" 2 is equivalent to a * a.
	
	
	  The power element is a generic exponentiation operator. That is,
	  when applied to arguments a and b, it returns the value of
	  a to the power of b.
	

          
            ForAll( a, a!=0, a^0=1 )
          

  a
  a0
  
    a0
    1
  


        
          
            ForAll( a, a^1=a )
          

  a
  
    a1
    a
  


        
          
            ForAll( a, 1^a=1 )
          

  a
  
    1a
    1
  

        2x
        x3
      
	  If this were evaluated at x= 5 it would yield 125.
	  
		
		  
		  x
		  3
		
		





x\in C implies x^a = exp(a ln x)




  
    
    
      
      
      
    
    
      
      
        
        
        
      
      
        
        
          
          
          
            
            
          
        
      
    
  





  if n is an integer then
  x^0 = 1,
  x^n = x * x^(n-1)



  
    
    
      
      
      
    
    
      
      
        
        
          
          
          0
        
        
      
      
        
        
          
          
          
        
        
          
          
          
            
            
            
              
              
              1
            
          
        
      
    
  





  
  
    
    
      
      
        
         1 
         2 
      
      
        
         3 
         4 
      
    
    3
  
  
    
    
      
       37 
       54 
    
    
      
       81 
       118 
    
  






  
  
    
    
    
      
      
      
    
  
  
    
    
  






abs
  
    abs
  
application
 
A unary operator which represents the absolute value of its
argument. The argument should be numerically valued.
In the complex case this is often referred to as the modulus.




          A unary operator which represents the absolute value of its argument. 
In the complex case this is often referred to as the modulus. 
        
	
	  The abs element represents the absolute value of a real quantity or
	  the modulus of a complex quantity.
	

          
            for all x and y, abs(x) + abs(y) >= abs(x+y) 
          
        
        
		The following example encodes the absolute value of x.
		
		
x




 for all x,y | abs(x) + abs(y) >= abs(x+y) 


  
    
    
      
      
    
    
      
      
        
        
          
            
        
        
          
            
        
      
      
        
        
          
          
          
        
      
    
  





root
  
    root
  
application
 
A binary operator which represents its first argument "lowered" to its
n'th root where n is the second argument. This is the inverse of the operation
represented by the power symbol defined in this CD.

Care should be taken as to the precise meaning of this operator, in
particular which root is represented, however it is here to represent
the general notion of taking n'th roots. As inferred by the signature
relevant to this symbol, the function represented by this symbol is
the single valued function, the specific root returned is the one
indicated by the first CMP. Note also that the converse of the second
CMP is not valid in general.



 
          This is the binary operator used to construct the nth root of an expression.
          The first argument "a" is the expression and the second object "n" denotes the
          root, as in ( a ) ^ (1/n)
        
	
	  The root element is used to construct roots. The kind of root to be
	  taken is specified by a degree child, which should be given as
	  the second child of the apply element enclosing the root
	  element. Thus, square roots correspond to the case where degree
	  contains the value 2, cube roots correspond to 3, and so on.
	  
	  Note that Pragmatic MathML3 supports a degree element in the legacy container representation (see  for details). If no degree is present, a default
	  value of 2 is used.
	


          
            ForAll( bvars(a,n), root(degree(n),a) = a^(1/n) )
            
        
          
            The nth root of a is is given by
          
	
	  na




 x\in C implies root(x,n) = exp(ln(x)/n) 

  
    
      
      
        
        
        
      
      
        
        
          
          
                    
        
        
          
          
            
            
              
              
            
                      
          
        
      
    
  



 for all a,n | power(root(a,n),n) = a (if the root exists!) 

  
    
      
      
         
         
      
      
        
        
          
          
            
            
            
          
          
        
        
      
    
  




sum
  
    sum
  
application

An operator taking two arguments, the first being the range of summation,
e.g. an integral interval, the second being the function to be
summed. Note that the sum may be over an infinite interval.




      The sum element denotes the summation operator.  It may be qualified by providing
      a domainofapplication.  This may be provided using one of the shorthand notations
      for domainofapplication such as an uplimit,lowlimit pair or a condition or an
      interval.  The index for the summation is specified by a bvar element.
    
    
      The sum element denotes the summation operator.  The most general form
      of a sum specifies the terms of the sum by using a domainofapplication
      element to specify a domain.  If no bound variables are specified then terms of the
      sum correspond to those produced by evaluating the function that is provided at the
      points of the domain, while if bound variables are present they are the index of
      summation and they take on the values of points in the domain.  In this case the
      terms of the sum correspond to the values of the expression that is provided,
      evaluated at those points.  Depending on the structure of the domain, the domain of
      summation can be abbreviated by using uplimit and lowlimit to
      specify upper and lower limits for the sum. 

      The sum function accept the bvar, lowlimit,
      uplimit, interval, condition and
      domainofapplication schemata. If both lowlimit and
      uplimit schemata are present, they denote the limits of the sum or
      product. The limits may alternatively be specified using the interval,
      condition or domainofapplication schema. The bvar schema
      signifies the internal variable in the sum or product. A typical example might be:



  
  i
  0
  100
  
    
    x
    i
  


When used with sum or product, each qualifier schema is expected to
contain a single child schema; otherwise an error is generated.
		

        
	  

   x
  a
  b
  fx




  

  x
   xB
   fx




	
	  
  
  
     B
  
   f








  This represents the summation of the reciprocals of all the integers between
  1 and 10 inclusive.

  
    
      
        
         1 
         10 
      
    
      
        
          
        
        
          
           1 
          
        
    
  





product
  
    product
  
application

An operator taking two arguments, the first being the range of multiplication
e.g. an integral interval, the second being the function to
be multiplied. Note that the product may be over an infinite interval. 




          The product element denotes the product operator.  It may be qualified by
          providing a domainofapplication.  This may be provided using one of the
          shorthand notations for domainofapplication such as an uplimit,lowlimit pair or
          a condition or an interval.  The index for the product is specified by a bvar
          element.
        

	
	  The product element denotes the product operator.  The most general
	  form of a product specifies the terms of the product by using a
	  domainofapplication element to specify the domain.  If no bound
	  variables are specified then terms of the product correspond to those produced
	  by evaluating the function that is provided at the points of the domain, while
	  if bound variables are present they are the index of product and they take on
	  the values of points in the domain.  In this case the terms of the product
	  correspond to the values of the expression that is provided, evaluated at those
	  points.  Depending on the structure of the domain, the domain of product can be
	  abbreviated by using uplimit and lowlimit to specify upper and
	  lower limits for the product. 

	  The sum function accepts the bvar, lowlimit,
	  uplimit, interval, condition and
	  domainofapplication schemata. If both lowlimit and
	  uplimit schemata are present, they denote the limits of the sum or
	  product. The limits may alternatively be specified using the interval,
	  condition or domainofapplication schema. The bvar
	  schema signifies the internal variable in the sum or product.
	

        


  x
   a
  b
   fx




        

  x
   xB
  fx







This represents the statement that the factorial of n is equal to the product
of all the integers between 1 and n inclusive.

  
    
    
      
      
    
    
      
        
          
           1 
          
        
      
        
          
            
          
          
      
    
  




