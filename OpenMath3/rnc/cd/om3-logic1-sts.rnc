#     This file contains the type checking rules for the symbols
#     from the STS types for the content dictionary 
#     It is provided "as is" without expressed or implied warranty.
#
#     Revision:   $Id$
#    $HeadURL$ 


namespace om = "http://www.openmath.org/OpenMath"





     This document is distributed in the hope that it will be useful, 
     but WITHOUT ANY WARRANTY; without even the implied warranty of 
     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

     The copyright holder grants you permission to redistribute this 
     document freely as a verbatim copy. Furthermore, the copyright
     holder permits you to develop any derived work from this document
     provided that the following conditions are met.
       a) The derived work acknowledges the fact that it is derived from
          this document, and maintains a prominent reference in the 
          work to the original source.
       b) The fact that the derived work is not the original OpenMath 
          document is stated prominently in the derived work.  Moreover if
          both this document and the derived work are Content Dictionaries
          then the derived work must include a different CDName element,
          chosen so that it cannot be confused with any works adopted by
          the OpenMath Society.  In particular, if there is a Content 
          Dictionary Group whose name is, for example, `math' containing
          Content Dictionaries named `math1', `math2' etc., then you should 
          not name a derived Content Dictionary `mathN' where N is an integer.
          However you are free to name it `private_mathN' or some such.  This
          is because the names `mathN' may be used by the OpenMath Society
          for future extensions.
       c) The derived work is distributed under terms that allow the
          compilation of derived works, but keep paragraphs a) and b)
          intact.  The simplest way to do this is to distribute the derived
          work under the OpenMath license, but this is not a requirement.
     If you have questions about this license please contact the OpenMath
     society at http://www.openmath.org.


logic1
http://www.openmath.org/cd
http://www.openmath.org/cd/logic1.ocd 
2006-03-30
2004-03-30
3
0
official

    This CD holds the basic logic functions.



  equivalent
  
    equivalent
  
  application
   
    This symbol is used to show that two boolean expressions are logically equivalent,
    that is have the same boolean value for any inputs.



          This element represents the n-ary logical equivalence function in which two
          boolean expressions are said to be equivalent if their truth values are equal
          for all choices of values of the boolean variables appearing in them.
        
	
	  The equivalent element is the equivalence relational
	  operator.
	  Its operands may be generated by allowing a function or expression to vary
	  over a domain of application. Therefore it may take qualifiers.
	
        
          
             Symmetric 
          
        
        
          
            Transitive 
          
        
        
          
            Reflexive
          
        
        
		
           This yields the truth value true for all values of a.
        
		
		
		  
		  a
		  
		    
		      a 
		  
		
		


 The condition (A is equivalent to B) is equivalent to the
condition that (A implies B and B implies A) 



  
    
    
      
      
      
    
    
      
      
        
	
	
      
      
        
	
	
      
    
  





not
Negation
  
    not
	
          type
          MathMLType
          boolean
        
  
application
 
This symbol represents the logical not function which takes one boolean
argument, and returns the opposite boolean value.



          This is the unary logical "not" operator.  It negates the truth value of its
          single argument.  e.g., not P is true when P is false and false when P is
          true.
        
	
	  The not operator is the Booleannot operator.
	
  
 a


 for all x | not(not(x))=x 



  
  
    
  
  
    
    
      
      
        
        
      
    
    
  






  and
  Conjunction
  application
   
    This symbol represents the logical and function which is an n-ary function taking
    boolean arguments and returning a boolean value. It is true if all arguments are true
    or false otherwise.
  

  
    and
    
      type
      MathMLType
      boolean
    
    
      The and operator element can be used as a binding operator in pragmatic
      Content MathML. This role is taken over by the big_and symbol in strict
      Content MathML.

  
    
    x
    xx
  
  
    big_and
    
      lambda
      x
      eqxx
    
  

    
  

          This is the n-ary logical "and" operator.  It is used to construct the
          logical expression which were it to be evaluated would have a value of "true"
          when all of its operands have a truth value of "true", and "false"
          otherwise.
        
	
	  The and element is the Boolean and operator.
	  As an n-ary operator, its operands may also be generated as described
	  in Therefore it may take qualifiers.
	

 
          
            ForAll( p, (true and p = p) )
          
        
          
            ForAll( [p,q], (p and q = q and p) ) 
          
        
        
          
            x and not(x) = false
          
        
        
		
            If this were evaluated and both a and 
b had truth values of true, then the result would be true.
          
		
		  a
		  b
		  
		



for all x | x and not(x) = false



  
  
    
  
  
    
    
      
      
        
      
    
    
  





  big_and
  binder
  Conjunction over a set of formulae
  
    This n-ary operator is used to construct the conjunction over a set of forumlae.
  



  xor
  Exclusive Disjunction
  
    xor
    
      type
      MathMLType
      boolean
    
    
      The xor operator element can be used as a binding operator in pragmatic
      Content MathML. This role is taken over by the big_xor symbol in strict
      Content MathML.

  
    
    x
    xx
  
  
    big_xor
    
      lambda
      x
      eqxx
    
  

    
  
application
 
This symbol represents the logical xor function which is an n-ary
function taking boolean arguments and returning a boolean
value. It is true if there are an odd number of true arguments or
false otherwise.



          The is the n-ary logical "xor" operator.  The constructed expression
has a truth value of true if an odd number of its arguments
are true.
        
	
	  As an n-ary operator, its operands may also be generated as described
	  in Therefore it may take qualifiers.
	


          
            x xor x = false 
          
        
        
          
            x xor not(x) = true 
          
        
        ab



for all x | x xor x = false


  
  
    
  
  
    
    
      
      
    
    
  





for all x | x xor not(x) = true




  
    
    
      
    
    
      
      
      
      
      
      
      
      
  





  big_xor
  binder
  Exclusive disjunction over a set of formulae
  
    This n-ary operator is used to construct the exclusive disjunction over a set of forumlae.
  



  or
  Disjunction
  
    or
    
      type
      MathMLType
      boolean
    
    
      The or operator element can be used as a binding operator in pragmatic
      Content MathML. This role is taken over by the big_or symbol in strict
      Content MathML.

  
    
    x
    xx
  
  
    big_or
    
      lambda
      x
      eqxx
    
  

    
  
  application
   
    This symbol represents the logical or function which is an n-ary function taking
    boolean arguments and returning a boolean value. It is true if any of the arguments
    are true or false otherwise.



          The is the n-ary logical "or" operator.  The constructed expression has a
          truth value of true if at least one of its arguments is true.
        
	
	  The or element is the Boolean or operator.
	  As an n-ary operator, its operands may also be generated as described
	  in Therefore it may take qualifiers.
	


  
  a
  b





for all x | x or not(x) = true




  
    
  
  
    
    
      
      
        
      
    
    
  





for all a,b | not(a and b)= (not(a) or not(b))




  
  
    
    
  
  
    
    
      
      
        
        
        
      
    
    
      
      
        
        
      
      
        
        
      
    
  







  big_or
  binder
  Disjunction over a set of formulae
  
    This n-ary operator is used to construct the disjunction over a set of forumlae.
  



implies
Implication
  
    implies
        
          type
          MathMLType
          boolean
        
  
application
 
This symbol represents the logical implies function which takes two
boolean expressions as arguments. It evaluates to false if the first
argument is true and the second argument is false, otherwise it
evaluates to true.



          This is the binary "implies" operator.  It is used to construct the logical
          expression "A implies B".
        
	
	  The implies element is the Boolean relational operator
	  implies.
	


          
            false implies x 

          
        
        
		
           Mathematical applications designed for the evaluation of such expressions would evaluate this to true when 
a = false and b = true.
          
		
  
  A
  B

		



 for all x | false implies x 



  
  
    
  
  
    
    
    
  





true
  
    true
  
constant
 
This symbol represents the boolean value true.


 
          true represents the logical constant for truth.
        
	
	  true represents the logical constant for truth.
	
        
          not true = false
          

  
  


  
    For all boolean p,  p or true is true
  

  
  p
  
    p
    
  





 
  
    
    P
  
  





 not true = false 

  
    
      
      
        
	
      
      
    
  




false
  
    false
  
constant
 
This symbol represents the boolean value false.



          false represents the logical constant for falsehood.
        
	
	  false represents the logical constant for falsehood.
	

        
          
            
not true = false
          

  
  

        
          
            
p and false = false
          

  p
  
    
      p
      
  


        
  
    
    P
  
  




 not false = true 

  
    
      
      
        
	
      
      
    
  



