#     This file contains the type checking rules for the symbols
#     from the STS types for the content dictionary 
#     It is provided "as is" without expressed or implied warranty.
#
#     Revision:   $Id$
#    $HeadURL$ 


namespace om = "http://www.openmath.org/OpenMath"





     This document is distributed in the hope that it will be useful, 
     but WITHOUT ANY WARRANTY; without even the implied warranty of 
     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

     The copyright holder grants you permission to redistribute this 
     document freely as a verbatim copy. Furthermore, the copyright
     holder permits you to develop any derived work from this document
     provided that the following conditions are met.
       a) The derived work acknowledges the fact that it is derived from
          this document, and maintains a prominent reference in the 
          work to the original source.
       b) The fact that the derived work is not the original OpenMath 
          document is stated prominently in the derived work.  Moreover if
          both this document and the derived work are Content Dictionaries
          then the derived work must include a different CDName element,
          chosen so that it cannot be confused with any works adopted by
          the OpenMath Society.  In particular, if there is a Content 
          Dictionary Group whose name is, for example, `math' containing
          Content Dictionaries named `math1', `math2' etc., then you should 
          not name a derived Content Dictionary `mathN' where N is an integer.
          However you are free to name it `private_mathN' or some such.  This
          is because the names `mathN' may be used by the OpenMath Society
          for future extensions.
       c) The derived work is distributed under terms that allow the
          compilation of derived works, but keep paragraphs a) and b)
          intact.  The simplest way to do this is to distribute the derived
          work under the OpenMath license, but this is not a requirement.
     If you have questions about this license please contact the OpenMath
     society at http://www.openmath.org.


linalg2
http://www.openmath.org/cd
http://www.openmath.org/cd/linalg2.ocd 
2006-03-30
2004-03-30
3
0
official

    This CD  treats matrices and vectors in a row oriented fashion
    (using matrixrow's).



vector
  
    vector
	
           type 
            row | column | MathMLType 
           column 
        
  
application

This symbol represents an n-ary function used to construct (or describe)
vectors.  Vectors in this CD are considered to be row vectors and must 
therefore be transposed to be considered as column vectors.




      A vector is an ordered n-tuple of values representing an element of an
      n-dimensional vector space.  The "values" are all from the same ring, typically real
      or complex.  Where orientation is important, such as for pre or post multiplication
      by a matrix a vector is treated as if it were a column vector and its transpose is
      treated a row vector.  The type attribute can be used to explicitly specify that a
      vector is a "row" vector.  See CRC Standard Mathematical Tables and Formulae,
      editor: Dan Zwillinger, CRC Press Inc., 1996, [2.4]
    

    
      vector is the container element for a vector. The child elements form
      the components of the vector.

      For purposes of interaction with matrices and matrix multiplication, vectors are
      regarded as equivalent to a matrix consisting of a single column, and the transpose
      of a vector behaves the same as a matrix consisting of a single row. Note that
      vectors may be rendered either as a single column or row.

      In general a vector can be constructed by providing a function and a
      1-dimensional domain of application.  The entries of the vector correspond to the
      values obtained by evaluating the function at the points of the domain.  The
      qualifications defined by a domainofapplication element can also be
      abbreviated in several ways including a condition placed on a bound
      variable and an expression involving that variable.

      The vector element constructs vectors from an n-dimensional
      vector space so that its n child elements typically represent real or
      complex valued scalars as in the three-element vector


  

  xy
  3
  7


A vector can also be constructed by evaluating a function over a specific domain
       of application, each evaluation corresponding to an entry in the vector.  In its
       most general form a domain is explicitly specified by a
       domainofapplication element and a function. Optionally the
       domainofapplication can be augmented by a bvar element and an
       algebraic expression expressed in terms of it.  Qualifications defined by a
       domainofapplication element can be abbreviated in several ways as
       described in .
	




An example of vector using n arguments. 
The specific vector constructed in this example is [3,6,9].

  
    
     3 
     6 
     9 
  






matrixrow
  
    matrixrow
  
  application
   
    This symbol is an n-ary constructor used to represent rows of matrices. Its arguments
    should be members of a ring.
  


 
   This symbol is an n-ary constructor used to represent rows of matrices.  Its
   arguments should be members of a ring. 
 
 
   The matrixrow element is the container element
   for the rows of a matrix.
 
 
   
   12
 
 


Representation of a row of a matrix of length two containing the integers
[1,0]

  
    
     1 
     0 
  





matrix
  
    matrix
	
          type
           real  |  complex  |  integer  |  symbolic  | integer |  MathMLType 
           real 
        
  
application

This symbol is an n-ary matrix constructor which requires matrixrow's
as arguments. It is used to represent matrices.




          This is the constructor for a matrix.  It requires matrixrow's as arguments.
          It is used to represent matrices.  See CRC Standard Mathematical Tables and
          Formulae, editor: Dan Zwillinger, CRC Press Inc., 1996, [2.5.1].
        
	
	  The matrix element is the container element for matrix rows, which
	  are represented by matrixrow. The matrixrows contain the
	  elements of a matrix.
	  
	  In general a matrix can be constructed by providing a function and a
	  2-dimensional domain of application.  The entries of the matrix correspond to
	  the values obtained by evaluating the function at the points of the domain.  The
	  qualifications defined by a domainofapplication element can also be
	  abbreviated in several ways including a condition element placing
	  constraints directly on bound variables and an expression in those variables.
	  The matrix element is used to represent mathematical matrices. It
	  has zero or more child elements, all of which are matrixrow
	  elements. These in turn expect zero or more child elements that evaluate to
	  algebraic expressions or numbers. These sub-elements are often real numbers, or
	  symbols as in


   1 2 
   3 4 


        The matrixrow elements must always be contained inside of a matrix, and
        all rows in a given matrix must have the same number of elements.

	Note that the behavior of the matrix and matrixrow elements
	is substantially different from the mtable and mtr presentation
	elements.

	A matrix can also be constructed by evaluating a bivariate function over a
	specific domain of application, each evaluation corresponding to an entry in the
	matrix.  In its most general form a domain of application is explicitly specified
	by a domainofapplication element and a function which when evaluated at
	points of the domain produces entries in the matrix. Optionally the
	domainofapplication can be augmented by bvar elements and an
	algebraic expression expressed in terms of them.
	

  
          
            scalar multiplication
          
        
        
	  
	    scalar multiplication
	  
	  Matrix*column vector
	

        
          
            scalar multiplication
          
	  Addition
	
        
          
            scalar multiplication
          
	  Matrix*Matrix
	

        
	  
  0 1 0
  0 0 1
  1 0 0


  i
  j
  
    
      
        i
        15
      
      
        j
        59
      
    
  

  
    i
    j
  







Representation of a 2x2 identity matrix

  
    
    
      
       1 
       0 
    
    
      
       0 
       1 
    
  




