#     This file contains the type checking rules for the symbols
#     from the STS types for the content dictionary 
#     It is provided "as is" without expressed or implied warranty.
#
#     Revision:   $Id$
#    $HeadURL$ 


namespace om = "http://www.openmath.org/OpenMath"





     This document is distributed in the hope that it will be useful, 
     but WITHOUT ANY WARRANTY; without even the implied warranty of 
     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

     The copyright holder grants you permission to redistribute this 
     document freely as a verbatim copy. Furthermore, the copyright
     holder permits you to develop any derived work from this document
     provided that the following conditions are met.
       a) The derived work acknowledges the fact that it is derived from
          this document, and maintains a prominent reference in the 
          work to the original source.
       b) The fact that the derived work is not the original OpenMath 
          document is stated prominently in the derived work.  Moreover if
          both this document and the derived work are Content Dictionaries
          then the derived work must include a different CDName element,
          chosen so that it cannot be confused with any works adopted by
          the OpenMath Society.  In particular, if there is a Content 
          Dictionary Group whose name is, for example, `math' containing
          Content Dictionaries named `math1', `math2' etc., then you should 
          not name a derived Content Dictionary `mathN' where N is an integer.
          However you are free to name it `private_mathN' or some such.  This
          is because the names `mathN' may be used by the OpenMath Society
          for future extensions.
       c) The derived work is distributed under terms that allow the
          compilation of derived works, but keep paragraphs a) and b)
          intact.  The simplest way to do this is to distribute the derived
          work under the OpenMath license, but this is not a requirement.
     If you have questions about this license please contact the OpenMath
     society at http://www.openmath.org.


fns1
http://www.openmath.org/cd
http://www.openmath.org/cd/fns1.ocd 
2006-03-30
2004-03-30
3
0
official


    This CD is intended to be `compatible' with the corresponding
    elements in Content MathML.

    In this CD we give a set of functions concerning functions
    themselves. Functions can be constructed from expressions via a
    lambda expression. Also there are basic function functions like
    compose, etc.



domainofapplication
  
    domainofapplication
  
application
 
The domainofapplication element denotes the domain over which a given 
function is being applied. It is intended in MathML to be a more general 
alternative to specification of this domain using
such quantifier elements as bvar, lowlimit or condition. 




domain
  
    domain
  
application
 
This symbol denotes the domain of a given function, which is the set of
values it is defined over.



       
          The domain element denotes the domain of a given function, which is the 
set of values over which it is defined. 

        
	
	  The domain element denotes the domain of a given function, which is
	  the set of values over which it is defined.  



If f is a function from the reals to the rationals, then:

  
  
    f
  
  







x is in the domain of f if and only if 
there exists a y in the range of f and f(x) = y




  
    
    
      
      
      
        
	
      
    
    
      
      
        
      
      
        
        
          
	  
	  
            
	    
	  
        
	
	  
	  
	    
	    
	  
	  
	
      
    
  






range
  
    range
  
application

This symbol denotes the range of a function, that is a set that the
function will map to. The single argument should be the function whos
range is being queried. It should be noted that this is not necessarily
equal to the image, it is merely required to contain the image.




the range of f is a subset of the image of f




  
    
    
      
      
    
    
      
      
    
  






image
  
    image
  
application
 
This symbol denotes the image of a given function, which is the set of
values the domain of the given function maps to.




          The image element denotes the image of a given function, which is the set of
          values taken by the function. Every point in the image is generated by the
          function applied to some point of the domain.
        
	
	  The image element denotes the image of a given function, which is
	  the set of values taken by the function. Every point in the image is generated
	  by the function applied to some point of the domain.
	


        
          
            ForAll( x, x in image(f), ThereExists(y,f(y)=x) )
	  
	

        
	  
	    The real sin function is a function from the reals to the reals, 
	    taking values between -1 and 1.
	  
	  
	    
	      
	      
		
		
	      
	      -11
	




 x in the domain of f implies f(x) is in the image f 



  
    
    
      
      
      
	
	
      
    
    
      
      
        
	
      
      
        
	
      
    
  






identity
  
    identity
  
application
 
The identity function, it takes one argument and returns the same value.



 for all x | identity(x)=x 



  
    
    
      
    
    
      
      
        
        
      
      
    
  





left_inverse
  
    left_inverse
  
application
 
This symbol is used to describe the left inverse of its argument (a
function). This inverse may only be partially defined because the
function may not have been surjective. If the function is not
surjective the left inverse function is
ill-defined without further stipulations. No other assumptions are made on
the semantics of this left inverse.




right_inverse
  
    right_inverse
  
application
 
This symbol is used to describe the right inverse of its argument (a
function). This inverse may only be partially defined because the
function may not have been surjective. If the function is not
surjective the right inverse function is
ill-defined without further stipulations. No other assumptions are made on
the semantics of this right inverse.




inverse
  
    inverse
  
application
 
This symbol is used to describe the inverse of its argument (a
function). This inverse may only be partially defined because the
function may not have been surjective. If the function is not
surjective the inverse function is
ill-defined without further stipulations. No assumptions are made on
the semantics of this inverse.



    
          This MathML element is applied to a function in order to construct a new
          function that is to be interpreted as the inverse function of the original
          function.  For a particular function F, inverse(F) composed with F behaves like
          the identity map on the domain of F and F composed with inverse(F) should be an
          identity function on a suitably restricted subset of the Range of F.  The MathML
          definitionURL attribute should be used to resolve notational ambiguities, or to
          restrict the inverse to a particular domain or to make it one-sided. 
        
	
	  The inverse element is applied to a function in order to construct a
	  generic expression nfor the functional inverse of that function. As with other
	  MathML functions, inverse may either be applied to arguments, or it may
	  appear alone, in which case it represents an abstract inversion operator acting
	  on other functions.
	  A typical use of the inverse element is in an HTML document
	  discussing a number of alternative definitions for a particular function so that
	  there is a need to write and define f(-1)(x). To associate
	  a particular definition with f(-1), use the
	  definitionURL and encoding attributes.

    Given functions, it is natural to have functional inverses. This is handled by the
    inverse element.
    Functional inverses can be problematic from a mathematical point of view in that
    they implicitly involve the definition of an inverse for an arbitrary function
    F. Even at the K-through-12 level the concept of an inverse F
    -1 of many common functions F is not used in a uniform way. For
    example, the definitions used for the inverse trigonometric functions may differ
    slightly depending on the choice of domain and/or branch cuts.
    MathML adopts the view: if F is a function from a domain D to
    D', then the inverse G of F is a function over
    D' such that G(F(x)) = x
    for x in D. This definition does not assert that such an inverse
    exists for all or indeed any x in D, or that it is single-valued
    anywhere. Also, depending on the functions involved, additional properties such as
    F(G(y)) = y for y in
    D' may hold.
    
    The inverse element is applied to a function whenever an inverse is
    required. For example, application of the inverse sine function to x,
    i.e. sin-1 (x), is encoded as: 
    <apply> <apply> <inverse/> <sin/> </apply> <ci>x</ci> </apply> While
    arcsin is one of the predefined MathML functions, an explicit reference to
    sin-1(x) might occur in a document discussing possible
    definitions of arcsin.
	

        
          
            ForAll( y, such y in domain( f^(-1) ), f( f^(-1)(y) ) = y 
           

  y
  f
  
    
      y
      Domain
        f
      
    
  
  
    f
      f
        y
      
    
    y
  


         
  


        
	  
  


 
  
     a
  
  A





 
(inverse(f))(f(x)) = x if f is injective,
that is
(for all x,y | f(x) = f(y) implies x=y) implies (inverse(f))(f(z)) = z





  
  
    
    
      
      
    
    
      
      
        
        
          
	  
        
        
          
          
        
      
      
        
        
        
      
    
  
  
    
    
      
        
        
      
      
        
        
      
    
    
  






f(inverse(f(y))=y if f is defined at inverse(f)(y)
that is, 
if there exists an x s.t. inverse(f)(y) = x then this implies
f(inverse(f)(y)) = y




  
    
       
        
	
	  
	
	
	  
	  
	    
	      
	      
	    
	    
	  
	  
	
      
    
      
      
        
	
	  
	    
	    
	  
	  
	
      
      
    
  





left_compose
  
    left_compose
  
application
 
This symbol represents the function which forms the left-composition
of its two (function) arguments.



 for all f,g,x | left_compose(f,g)(x) = f(g(x)) 



  
  
    
    
    
  
  
    
    
      
        
        
        
      
      
    
    
      
      
        
        
      
    
  






lambda
  
    lambda
  
binder

This symbol is used to represent anonymous functions as lambda expansions. 
It is used in a binder that takes two further arguments, the first of which
is a list of variables, and the second of which is an expression, and it
forms the function which is the lambda extraction of the expression



 
          This is the operation of lambda calculus that constructs a function from an
          expression and a variable.  Lambda is an n-ary function, where all but an
          optional domain of application and the last argument are bound variables and the
          last argument is an expression possibly involving those variables.  The lambda
          function can be viewed as the inverse of function application.
	  

	  For example, Lambda( x, F ) is written as \lambda x [F] in the lambda
	  calculus literature.  The expression F may contain x but the full lambda
	  expression is regarded to be free of x.  A computational application receiving a
	  MathML lambda expression should not evaluate x or test for x.  Such an
	  application may apply the lambda expression as a function to arguments in which
	  case any result that is computed is computed through parameter substitutions
	  into F.
          
	    Note that a lambda expression on an arbitrary function applied to a the bound
	    variable is equivalent to that arbitrary function.  A domain of application
	    can be used to restrict the defined function to a specific domain.
        
	
	  The lambda element is used to construct a user-defined function from
	  an expression, bound variables, and qualifiers. In a lambda construct with
	  n (possibly 0) bound variables, the first n children are
	  bvar elements that identify the variables that are used as placeholders
	  in the last child for actual parameter values. The bound variables can be
	  restricted by an optional domainofapplication qualifier or one of its
	  shorthand notations. The meaning of the lambda construct is an
	  n-ary function that returns the expression in the last child where
	  the bound variables are replaced with the respective arguments.

	The lambda element is used to construct a user-defined function from
	an expression.  The last child is an expression defining the function in terms of
	the bound variables declared by the bvar and any
	domainofapplication (see ) elements
	coming before it.  The last element is typically an apply element, but
	can also be any container element. The following constructs
	
	(x, sin x)



  x
  x


      The following constructs the constant function (x, 3)

x3

    The lambda calculus allows a user to construct a function from a variable and an
    expression. For example, the lambda construct underlies the common mathematical idiom
    illustrated here: Let f be the function taking x to
    x2 + 2

    There are various notations for this concept in mathematical literature, such as
    (x,
    F(x)) = F or (x, [F]) =F,
    where x is a free variable in F.

    This concept is implemented in MathML with the lambda element. A lambda
    construct with n (possibly 0) internal variables is encoded by a
    lambda element, where the first n children are bvar
    elements containing the identifiers of the internal variables. This is followed by an
    optional domainofapplication qualifier (see ) and an expression defining the function. The defining
    expression is typically an apply, but can also be any expression.

    The following constructs
    
(x, sin(x+1)):



  x
  
    
    
      
      x
      1
    
  


To use declare and lambda to construct the function f for
which f( x) = x2 + x + 3 use:



  f
  
    x
    
      
      
        
        x
        2
      
      x
      3
    
  


The following markup declares and constructs the function J such that
J(x, y) is the integral from x to y
of t4 with respect to t.



  J
  
    x
    y
     
      t
      x
      y
      
        
        t
        4
      
    
  


The function J can then in turn be applied to an argument pair.

	

	
          
            ForAll( F, lambda(x,F(x)) = F )
          

  F
  
    
      
      x
      Fx
    
    F
  




a simple lambda construct.


  x
  
    
      
      x
      1
    
  


The next example constructs a one-argument function in which the argument 
b specifies the upper bound of a specific definite integral.



  b
  
    
    x
    a
    b
    fx
    
  


The domainofapplication child restricts the possible
values of the arguments of the constructed function. For instance, the
following two lambda constructs are representations of a function on
the integers.



  x
  
  x



If a lambda construct does not contain bound variables, then the
  arity of the constructed function is unchanged, and the lambda
  construct is redundant, unless it also contains a
  domainofapplication construct that restricts existing functional
  arguments, as in this example, which is a variant representation for the
  function above. In particular, if the last child of a lambda construct is not a
function, say a number, then the lambda construct will not be a
function, but the same number. Of course, in this case a
  domainofapplication does not make sense



  
  






An example to show the connection between curried and uncurried
applications of a binary function f 
(lambda(x,y).(f))(a,b)= (lambda(x).((lambda(y).(f))(b)))(a)


  
  
    
    
  
  
    
    
      
        
        
          
          
        
        
      
      
      
    
    
      
        
        
          
        
        
          
            
            
              
            
            
          
          
        
      
      
    
  





