#     This file contains the type checking rules for the symbols
#     from the STS types for the content dictionary 
#     It is provided "as is" without expressed or implied warranty.
#
#     Revision:   $Id$
#    $HeadURL$ 


namespace om = "http://www.openmath.org/OpenMath"





     This document is distributed in the hope that it will be useful, 
     but WITHOUT ANY WARRANTY; without even the implied warranty of 
     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

     The copyright holder grants you permission to redistribute this 
     document freely as a verbatim copy. Furthermore, the copyright
     holder permits you to develop any derived work from this document
     provided that the following conditions are met.
       a) The derived work acknowledges the fact that it is derived from
          this document, and maintains a prominent reference in the 
          work to the original source.
       b) The fact that the derived work is not the original OpenMath 
          document is stated prominently in the derived work.  Moreover if
          both this document and the derived work are Content Dictionaries
          then the derived work must include a different CDName element,
          chosen so that it cannot be confused with any works adopted by
          the OpenMath Society.  In particular, if there is a Content 
          Dictionary Group whose name is, for example, `math' containing
          Content Dictionaries named `math1', `math2' etc., then you should 
          not name a derived Content Dictionary `mathN' where N is an integer.
          However you are free to name it `private_mathN' or some such.  This
          is because the names `mathN' may be used by the OpenMath Society
          for future extensions.
       c) The derived work is distributed under terms that allow the
          compilation of derived works, but keep paragraphs a) and b)
          intact.  The simplest way to do this is to distribute the derived
          work under the OpenMath license, but this is not a requirement.
     If you have questions about this license please contact the OpenMath
     society at http://www.openmath.org.


set1
http://www.openmath.org/cd
http://www.openmath.org/cd/set1.ocd 
2006-03-30
2004-03-30
3
0
official

    This CD defines the set functions and constructors for basic set theory. It is
    intended to be `compatible' with the corresponding elements in MathML.


  The symbols introduced in this content dictionary have operator elements that take a
  type attribute indicates whehter the they pertain to a set or multilset
  interpretation of the arguments. This attribute takes the values normal
  and multiset, where normal is the default value.
  multiset indicates that repetitions are allowed. The symbols defined in
  the set1 content dictionary correspond to the set interpretation.




  cartesian_product
  
    cartesianproduct
    
      type
      "normal" | "multiset"
      "normal"
    
  
  application
  
    This symbol represents an n-ary construction function for constructing the Cartesian
    product of sets. It takes n set arguments in order to construct their Cartesian
    product.
  


  The cartesianproduct element is the operator for a set-theoretic cartesian product of
  two (or more) sets.  The cartesian product of multisets produces a multiset since
  n-tuples may be repeated if elements in the base sets are repeated.


  The cartesianproduct element is the operator element for the Cartesian
  product of two or more sets. If A and B are two sets, then the
  Cartesian product of A and B is the set of all pairs
  (a,b) with a in A and b in
  B. 
	  
  As an n-ary operator, its operands may also be generated as described in
   Therefore it may take qualifiers.



  
    AB
  



  
    
  


An example to show the representation of the Cartesian product of sets: AxBxC.

  
    
    
    
    
  





  emptyset
  
    emptyset
    
      type
      "normal" | "multiset"
      "normal"
    
  
  constant
  
    This symbol is used to represent the empty set, that is the set which contains no
    members. It takes no parameters.
  
  

          emptyset represents the empty set.
        
	
	  emptyset represents the empty set.
	
        
          
            
for all sets S,   intersect(S,emptyset) = emptyset
          
S
  
    S
    
  

        
  
  




 The intersection of A with the emptyset is the emptyset 


  
    
    
      
      
      
    
    
  




 The union of A with the emptyset is A 


  
    
    
      
      
      
    
    
  




 the size of the empty set is zero 



  
    
    
      
      
    
    
  





  map
  
    map
    
      type
      "normal" | "multiset"
      "normal"
    
  
  application
  
    This symbol represents a mapping function which may be used to construct sets, it
    takes as arguments a function from X to Y and a set over X in that order. The value
    that is returned is a set of values in Y. The argument list may be a set or an
    integer_interval.
  
  
    The set of even values between 0 and 20, that is the values 2x, where x ranges over
    the integral interval [0,10].
    
  
    
    
      
      
        
      
      
        
         2 
	
      
    
    
      
       0 
       10 
    
  





 size
 
   card
    
      type
      "normal" | "multiset"
      "normal"
    
 
 application
  
   This symbol is used to denote the number of elements in a set. It is either a
   non-negative integer, or an infinite cardinal number. The symbol infinity may be used
   for an unspecified infinite cardinal.
 
 

The size of the set{3,6,9} = 3


  
    
    
      
      
        
         3 
         6 
         9 
      
    
     3 
  




The size of the set of integers is infinite


  
    
    
      
      
    
    
  




  where A is a set with 5 elements.
  
  
    
    A
    5
    
  






  suchthat
  
    suchthat
    
      type
      "normal" | "multiset"
      "normal"
    
  
  application
  
    This symbol represents the suchthat function which may be used to construct sets, it
    takes two arguments. The first argument should be the set which contains the elements
    of the set we wish to represent, the second argument should be a predicate, that is a
    function from the set to the booleans which describes if an element is to be in the
    set returned.
  
  
    This example shows how to construct the set of even integers, using
    the suchthat constructor.

  
    
    
    
      
      
        
      
      
        
	
	  
	  
	   2 
	
	
      
    
  





  set
  
    set
    
      type
      "normal" | "multiset"
      "normal"
    
  
  application
   
    This symbol represents the set construct. It is an n-ary function. The set entries are
    given explicitly. There is no implied ordering to the elements of a set.
  

  
    The set element is the container element that constructs a set of elements.  They
    may be explicitly listed, or defined by expressions or functions evaluated over a
    domain of application.  The domain of application may be given explicitly, or provided
    by means of one of the shortcut notations.
  
  

    The child elements of a possibly empty list element are the actual
    components of an ordered list. For example, an ordered list of the three
    symbols a, b, and c is encoded as

    abc
	
      Sets and lists can also be constructed by evaluating a function over a domain of
      application, each evaluation corresponding to a term of the set or list.  In the
      most general form a domain is explicitly specified by a domainofapplication
      element together with optional bvar elements.  Qualifications involving a
      domainofapplication element can be abbreviated in several ways as described
      in .  For example, a bvar and a
      condition element can be used to define lists where membership depends on
      satisfying certain conditions.

      An order attribute can be used to specify what ordering is to be
      used. When the nature of the child elements permits, the ordering defaults to a
      numeric or lexicographic ordering.
	
      Sets are structured much the same as lists except that there is no implied
      ordering and the type of set may be normal or
      multiset with multiset indicating that repetitions
      are allowed.
	
      For both sets and lists, the child elements must be valid MathML content
      elements. The type of the child elements is not restricted. For example, one might
      construct a list of equations, or of inequalities.
	
      The child elements of a possibly empty list element are the actual
      components of an ordered list. For example, an ordered list of the
      three symbols a, b, and c is encoded as

      abc
      
      Sets and lists can also be constructed by evaluating a function over a domain of
      application, each evaluation corresponding to a term of the set or list.  In the
      most general form a domain is explicitly specified by a domainofapplication
      element together with optional bvar elements.  Qualifications involving a
      domainofapplication element can be abbreviated in several ways as described
      in .  For example, a bvar and a
      condition element can be used to define lists where membership depends on
      satisfying certain conditions.

      An order attribute can be used to specify what ordering is to be
      used. When the nature of the child elements permits, the ordering defaults to a
      numeric or lexicographic ordering.
	
      Sets are structured much the same as lists except that there is no implied
      ordering and the type of set may be normal or
      multiset with multiset indicating that repetitions
      are allowed.
	
      For both sets and lists, the child elements must be valid MathML content
      elements. The type of the child elements is not restricted. For example, one might
      construct a list of equations, or of inequalities.
    

    
      
	abc
      
    

    
      
	
	  x
	  
	    x5
	  
	
    
    


The set {3, 6, 9}

  
    
     3 
     6 
     9 
  






intersect
  
    intersect
    
      The intersect operator element can be used as a binding operator in
      pragmatic Content MathML. This role is taken over by the big_intersect
      symbol in strict Content MathML.

  
    
    x
    0x
  
  
    big_intersect
    
      lambda
      x
      integer_interval0x
    
  

    
  
application
 
This symbol is used to denote the n-ary intersection of sets. It takes
sets as arguments, and denotes the set that contains all the
elements that occur in all of them.



           This n-ary operator indicates the intersection of two sets.  If the two sets
          are multisets, the result is a multiset. in which each element is present with a
          repetition determined by the smallest number of occurrences in any of the sets
          (multisets) that occur as arguments.
        
	
	  The intersect element is the operator for the set-theoretic
	  intersection or meet of two (or more) sets.  The operands are usually listed
	  explicitly.
	  As an n-ary operator, its operands may also be generated as described in
	   Therefore it may take qualifiers.
	  
	

        
   A
   B





  big_intersect
  L
  
    
     S
     S
  





  (A intersect B) is a subset of A and (A intersect B) is a subset of B



  
    
    
      
      
        
	
	
      
      
    
    
      
      
        
	
	
      
      
    
  





  big_intersect
  binder
  Intersection over a set of expressions
  
    This n-ary operator is used to construct the intersection over a collection of sets.
  




  union
  application
   
    This symbol is used to denote the n-ary union of sets. It takes sets as arguments, and
    denotes the set that contains all the elements that occur in any of them.


  
    union
    
      The union operator element can be used as a binding operator in
      pragmatic Content MathML. This role is taken over by the big_union
      symbol in strict Content MathML.

  
    
    x
    0x
  
  
    big_union
    
      lambda
      x
      integer_interval0x
    
  

    
  
  
    This is the set-theoretic operation of union of sets.  This n-ary operator
    generalizes to operations on multisets by tracking the frequency of occurrence of each
    element in the union. As an n-ary operation the operands can be generated by allowing
    a function or expression to range over the elements of a domain of application.  Thus
    it accepts qualifiers.
  
  
    The union element is the operator for a set-theoretic union or join of two
    (or more) sets.  The operands are usually listed explicitly.
	  
    As an n-ary operator, its operands may also be generated as described in  Therefore it may take qualifiers.
  

  
    
      AB
    
  
  
  
    
    
      
       S
      L
       S
    
  



 A is a subset of (A union B) and B is a subset of (A union B) 



  
    
    
      
      
      
        
	
	
      
    
    
      
      
      
        
	
	
      
    
  





for all sets A,B and C

union(A,intersect(B,C)) = intersect(union(A,B),union(A,C))




  
    
    
      
      
      
    
    
      
      
        
        
        
          
          
          
        
      
      
        
        
          
          
          
        
        
          
          
          
        
      
        
  






  big_union
  binder
  Union over a Set of expressions
  
    This n-ary operator is used to construct the union over a collection of sets.
  




setdiff
  
    setdiff
  
application
 
This symbol is used to denote the set difference of two sets. It takes
two sets as arguments, and denotes the set that contains all the
elements that occur in the first set, but not in the second.


 
          The setdiff element is the operator element for a set-theoretic difference of
          two sets.
        
	
	  The setdiff element is the operator element for a set-theoretic
	  difference of two sets.
	
        
   A
   B





  the difference of A and B is a subset of A


  
    
    
      
      
      
    
    
  




subset
  
    subset
  
application

This symbol has two (set) arguments. It is used to denote that the
first set is a subset of the second.


 
          The subset element is the n-ary relational operator element for a
          set-theoretic containment ('is a subset of').
	
	
	  The subset element is the relational operator element for a
	  set-theoretic containment (is a subset of).
	  The subset element is an n-ary set relation.  As an
	  n-ary operator, its operands may also be generated as described in  Therefore it may take qualifiers.
	

        
   A
   B





  
    
      S
      
	ST
      
      S
    
  




  if B is a subset of A and C is a subset of B then C is a subset of A


  
    
    
      
      
        
        
        
      
      
        
        
        
      
    
    
      
      
      
    
  




in
  
    in
  
application
 
This symbol has two arguments, an element and a set. It is used to
denote that the element is in the given set.



          The in element is the relational operator used for a set-theoretic inclusion
          ('is in' or 'is a member of').
        
	
	  The in element is the relational operator used for a set-theoretic
	  inclusion (is in or is a member of).
	
        
  a
   A




  if a is in A and a is in B then a is in A intersect B


  
    
    
      
      
        
        
        
      
      
        
        
        
      
    
    
      
      
      
        
        
        
      
    
  




notin

  notin

application
 
This symbol has two arguments, an element and a set. It is used to
denote that the element is not in the given set.


 
          The notin element is the relational operator element used 
to construct set-theoretic exclusion ('is not in' or 'is not a member of').
	
	
	  The notin element is the relational operator element used for
	  set-theoretic exclusion (is not in or is not a member
	  of).
	
        
  a
   A




 if a is a member of a then it is not true that a is not a member of A




  
  
    
    
    
  
  
    
    
      
      
      
    
  




  4 is not in {1,2,3}


  
    
     4 
    
      
       1 
       2 
       3 
    
  





prsubset

  prsubset

application
 
This symbol has two (set) arguments. It is used to denote that the
first set is a proper subset of the second, that is a subset of the
second set but not actually equal to it.



  The prsubset element is the n-ary relational operator element for
  set-theoretic proper containment ('is a proper subset of').


  The prsubset element is the relational operator element for set-theoretic
  proper containment (is a proper subset of).
  The prsubset element is an n-ary set relation.  As an n-ary
  operator, its operands may also be generated as described in  Therefore it may take qualifiers.


  
    
     A
     B
    
  



  
    
    i
    0
    10
    Si
  





A is a proper subset of B implies that A is a subset of B and A not= B




  
  
    
    
    
  
  
    
    
      
      
      
    
    
      
      
      
    
  




  {2,3} is a proper subset of {1,2,3}


  
    
    
      
       2 
       3 
    
    
      
       1 
       2 
       3 
    
  





notsubset

  notsubset

application
 
This symbol has two (set) arguments. It is used to denote that the
first set is not a subset of the second.



          The notsubset element is the relational operator element for the 
set-theoretic relation 'is not a subset of'.
        
	
	  The notsubset element is the relational operator element for the
	  set-theoretic relation is not a subset of.
	
        
   A
   B





if A is not a subset of B then 
there exists an x in B s.t. x is not a member of B




  
  
    
    
    
  
  
    
    
      
    
    
      
      
        
	
	
      
      
        
	
	
      
    
  




  {2,3,4} is not a subset of {1,2,3}


  
    
    
      
       2 
       3 
       4 
    
    
      
       1 
       2 
       3 
    
  





notprsubset

  notprsubset

application
 
This symbol has two (set) arguments. It is used to denote that the
first set is not a proper subset of the second. A proper subset of a
set is a subset of the set but not actually equal to it.



          The notprsubset element is the element for constructing the set-theoretic
          relation 'is not a proper subset of'.
        
	
	  The notprsubset element is the operator element for the
	  set-theoretic relation is not a proper subset of.
	
        
   A
   B





 A is not a proper subset of B implies 
that it is not true that A is a proper subset of B




  
  
    
    
    
  
  
    
    
      
      
      
    
  




{1,2,3} is not a proper subset of {1,2,3}


  
    
    
      
       1 
       2 
       3 
    
    
      
       1 
       2 
       3 
    
  




