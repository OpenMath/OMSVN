#     This file contains the type checking rules for the symbols
#     from the STS types for the content dictionary 
#     It is provided "as is" without expressed or implied warranty.
#
#     Revision:   $Id$
#    $HeadURL$ 


namespace m  ="http://www.w3.org/1998/Math/MathML"




     This document is distributed in the hope that it will be useful, 
     but WITHOUT ANY WARRANTY; without even the implied warranty of 
     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

     The copyright holder grants you permission to redistribute this 
     document freely as a verbatim copy. Furthermore, the copyright
     holder permits you to develop any derived work from this document
     provided that the following conditions are met.
       a) The derived work acknowledges the fact that it is derived from
          this document, and maintains a prominent reference in the 
          work to the original source.
       b) The fact that the derived work is not the original OpenMath 
          document is stated prominently in the derived work.  Moreover if
          both this document and the derived work are Content Dictionaries
          then the derived work must include a different CDName element,
          chosen so that it cannot be confused with any works adopted by
          the OpenMath Society.  In particular, if there is a Content 
          Dictionary Group whose name is, for example, `math' containing
          Content Dictionaries named `math1', `math2' etc., then you should 
          not name a derived Content Dictionary `mathN' where N is an integer.
          However you are free to name it `private_mathN' or some such.  This
          is because the names `mathN' may be used by the OpenMath Society
          for future extensions.
       c) The derived work is distributed under terms that allow the
          compilation of derived works, but keep paragraphs a) and b)
          intact.  The simplest way to do this is to distribute the derived
          work under the OpenMath license, but this is not a requirement.
     If you have questions about this license please contact the OpenMath
     society at http://www.openmath.org.


quant1
http://www.openmath.org/cd
http://www.openmath.org/cd/quant1.ocd 
2006-03-30
2004-05-11
3
1
official

    This CD holds the definitions of the basic universal ("for all")
    quantifier and existential ("there exists") quantifier. It is
    intended to be `compatible' with the MathML elements representing
    these quantifiers. 




forall
Universal Quantification
  
    forall
        
          type
          MathMLType
          boolean
        
  
binder
 
This symbol represents the universal ("for all") quantifier which takes two
arguments. It must be placed within an OMBIND element. The first argument is the
bound variables (placed within an OMBVAR element), and the second is an expression. 



          The forall operator is the logical "For all" quantifier.  The bound
          variables, if any, appear first and are tagged using the bvar element.  Next
          comes an optional condition on the bound variables.  The last argument is the
          boolean expression that is asserted to be true for all values of the bound
          variables that meet the specified conditions (if any).
        
	
	  The forall element represents the universal quantifier of logic. It
	  is usually used in conjunction with one or more bound variables, an optional
	  condition element, and an assertion. It may also be used with a domain
	  of application and function as described in  in
	  which case the assertion corresponds to applying the function to an element of
	  the specified domain., which should take the form of an apply
	  element.

	  The universal quantifier forall is used in conjunction with one or
	  more bvar schemata to represent simple logical assertions. There are
	  two main main ways of using the logical quantifier operators. The first usage is
	  for representing a simple, quantified assertion.  For example, the statement
	  there exists x < 9 would be represented as:


  
  x
  x9


The second usage is for representing implications. Hypotheses are given by a
condition element following the bound variables. For example the statement
for all x < 9, x < 10 would be represented as:


  
  x
  x9
  x10


Note that in both these usages one or more bvar qualifiers are mandatory.
		

 
		The example encodes a simple identity.
		
		
		  
		  x
		  
		    
		      xx
		    
		    0
		  
		
		
		The example is more involved, and makes use of an optional condition element.
		
		
		
		  
		  p
		  q
		  
		    
		      p
		      q
		      pq
		    
		  
		  
		      p
		      
		          
		        q
		        2
		      
		  
		
		
		
		The example uses both the forall and
exists quantifiers.
		
		
		
		  
		  n
		  
		    
		      n0
		      n
		    
		  
		  
		    
		    x
		    y
		    z
		    
		      
		        x
		        y
		        z
		      
		    
		    
		      
		      
		        
		        xn
		        yn
		      
		      zn
		    
		  
		
		
        
		  
		  x
		  x0
		 
		  x




An example to represent the statement for all real x, |sin(x)| <= 1

  
    
    
      
    
    
    
    
      
      
      
    
    
      
      
        
        
          
          
        
      
      
    
    
  





exists
Existential Quantification
  
    exists
        
          type
          MathMLType
          boolean
        
  
binder
 
This symbol represents the existential ("there exists") quantifier
which takes two arguments. It must be placed within an OMBIND element. The first
argument is the bound variables (placed within an OMBVAR element), and the second
is an expression.



          This is the MathML operator that is used to assert existence, as in "There
          exists an x such that x is real and x is positive."
          - The first argument indicates the bound variable,
          - The second optional argument places conditions on that
bound variable. 
          - The last argument is the expression
that is asserted to be true.
        
	
	  The exists element represents the existential quantifier of
	  logic. Typically, it is used in conjunction with one or more bound variables, an
	  optional condition element, and an assertion, which may take the form
	  of either an apply or reln element.The exists element
	  may also be used with a general domain of application and function as described
	  in .  For such uses the assertion is obtained
	  by applying the function to an element of the specified domain.
	  The universal quantifier forall is used in conjunction with one or
	  more bvar schemata to represent simple logical assertions. There are
	  two main main ways of using the logical quantifier operators. The first usage is
	  for representing a simple, quantified assertion.  For example, the statement
	  there exists x < 9 would be represented as:


  
  x
  x9


The second usage is for representing implications. Hypotheses are given by a
condition element following the bound variables. For example the statement
for all x < 9, x < 10 would be represented as:


  
  x
  x9
  x10


Note that in both these usages one or more bvar qualifiers are mandatory.
	

		The following example encodes the sense of the expression there exists an x such that f(x) = 0.
		
		
		
		  x
		  
		    f
		      x
		    
		    0
		  
		


       

  
  x
  
    C
  
  
    
    
      x2
    
    4
  




An example  which represents the statement that there is no solution
to x^n+y^n=z^n for n>2, that is:
it is not true that there exists x,y,z,n | n>2 and x^n+y^n=z^n


  
    
    
      
      
        
        
        
        
      
      
        
        
          
          
          
        
        
          
          
          
        
        
          
          
          
        
        
          
          
          
        
        
          
          
           2 
        
        
          
          
            
            
               
               
               
            
            
               
               
               
            
          
          
             
             
             
          
        
      
    
  




