# *********************************************
# 
# Relax NG Schema for OpenMath CD
# 
# *********************************************

default namespace = "http://www.openmath.org/OpenMathCD"

start = CD

CDComment = element CDComment { text }
CDName = element CDName { xsd:NCName }
CDUses = element CDUses { CDName* }
CDURL = element CDURL { xsd:anyURI }
CDBase = element CDBase { xsd:anyURI }

mmobj = external "mathml3.rnc"
omobj = external "openmath3.rnc"
#omobj = external "om3-sts.rnc"

mobj = (omobj | mmobj)

ContExp = grammar {include "mathml3.rnc" {start = ContExp}}


text-or-om = (text | mobj | code | var | quote | intref | specref | el | att | attval | sup | sub |
graphic | eg | emph | kw )*

########### eliminate or substitute these in the final version
code = element code {text}
var = element var {text}
quote = element quote {text-or-om}
intref = element intref {attribute ref {xsd:anyURI}, text}
specref = element specref {attribute ref {xsd:anyURI}}
el = element el {text}
att = element att {text}
attval = element attval {text}
sub = element sub {text}
sup = element sup {text}
emph = element emph {text}
kw = element kw {text}
graphic = element graphic {attribute role {xsd:string}?, attribute source {xsd:anyURI},attribute alt {xsd:string}}
eg = element eg {attribute role {xsd:string}?,mobj}
############ end eliminate

CDReviewDate = element CDReviewDate { xsd:date }
CDDate = element CDDate { xsd:date }
CDVersion = element CDVersion { xsd:nonNegativeInteger }
CDRevision = element CDRevision { xsd:nonNegativeInteger }
CDStatus = element CDStatus {
   "draft" | 
   "official" |
   "experimental" |
   "private" |
   "obsolete"}
Description = element Description { text }
Name = element Name { xsd:NCName }
Role = element Role {
   "binder" |
   "attribution" |
   "semantic-attribution" |
   "error" |
   "application" |
   "constant" }

Pragmatic = element Pragmatic {attribute specref {text}?,(Element,Attribute*)?,description?}
Element  = element Element {attribute type {"opel" | "opel_big" | "container"}?, text }
Attribute = element Attribute {Name,((Model,Default?)|Prescribed)}
Model = element Model { text }
Default = element Default { text }
Prescribed = element Prescribed { text }
Title = element Title { text }
property = element property {id.att,(CMP|description)?,(FMP|mobj)?}
CMP = element CMP { text }
FMP = element FMP { 
  attribute kind {xsd:string}?,
  mobj
  }
# allow embedded OM
Example = element Example { text-or-om }
MMLexample = element MMLexample {id.att,description?,mobj}
description = element description {(p|pseq)*}
pseq = element pseq {ContExp,ContExp}	    
discussion = element discussion {attribute type {text}?,p*}
p = element p { text-or-om }
id.att = attribute xml:id {xsd:ID}?,attribute speclevel {xsd:nonNegativeInteger}?
CDDefinition =
  element CDDefinition {id.att,
    CDComment*,
    (Name & Role? & Pragmatic? & Title? & Description & description? & discussion?),
   (CDComment | Example | MMLexample | property)*
  }
CD =
  element CD {
    (CDComment* & Description? & discussion? &
     CDName & CDURL? & CDBase? &
     CDReviewDate? & CDDate & CDStatus & 
     CDUses? & 
     CDVersion & CDRevision),
    ( CDDefinition,CDComment* )+
  }

