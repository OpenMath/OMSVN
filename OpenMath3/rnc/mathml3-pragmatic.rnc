#     This is the Mathematical Markup Language (MathML) 3.0, an XML
#     application for describing mathematical notation and capturing
#     both its structure and content.
#
#     Copyright 1998-2007 World Wide Web Consortium
#        (Massachusetts Institute of Technology, Institut National de
#         Recherche en Informatique et en Automatique, Keio University).
#         All Rights Reserved.
#
#     Permission to use, copy, modify and distribute the RelaxNG schema for MathML3
#     and its accompanying documentation for any purpose and without fee is
#     hereby granted in perpetuity, provided that the above copyright notice
#     and this paragraph appear in all copies.  The copyright holders make
#     no representation about the suitability of the Schema for any purpose.
#
#     This file contains the grammar rules for pragmatic content MathML3
#     It is provided "as is" without expressed or implied warranty.
#
#     Revision:   $Id$
#     Author: Michael Kohlhase http://kwarc.info/kohlhase

default namespace m = "http://www.w3.org/1998/Math/MathML"

#  This is the RelaxNG schema module for the pragmatic content part of MathML.

# we also allow pMathML in tokens 
Content-token.content |= PresExp

# the content of "cn" may have <sep> elements in it
sep = element sep {empty}
cn.content |= sep
cn.type.vals |= "constant" 

# allow degree in bvar
degree = element degree {MathML.Common.attrib,ContExp+}
bvar-head |= (degree?,ci)|(ci,degree?)
# allow degree to modify <root/>
apply.content |= root_arith1_elt,degree,ContExp*


domainofapplication = element domainofapplication {Definition.attrib,MathML.Common.attrib,cdbase.attrib?,ContExp}

lowlimit = element lowlimit {Definition.attrib,MathML.Common.attrib,cdbase.attrib?,ContExp+}
uplimit = element uplimit {Definition.attrib,MathML.Common.attrib,cdbase.attrib?,ContExp+}

## allow the non-strict qualifiers
qualifier |= domainofapplication|(uplimit,lowlimit?)|(lowlimit,uplimit?)|degree

## we collect the tokens by role
token.constant = notAllowed
token.binder = notAllowed
token.application = notAllowed
token.semantic-attribution = notAllowed
token.attribution = notAllowed
token.error = notAllowed

tokens = token.constant | token.binder | token.application | 
               token.semantic-attribution | token.attribution |
	       token.error
container = notAllowed

## include the relevant content dictionaries
include "cd/mathml3-pragmatic.rnc"

## we instantiate the strict content model by structure checking
apply-binder-head = semantics-apply-binder|token.binder
apply.content |= apply-binder-head,bvar*,qualifier?,ContExp
semantics-apply-binder = element semantics {semantics.attribs,apply-binder-head, semantics-annotation*}

ContExp |=  container 
